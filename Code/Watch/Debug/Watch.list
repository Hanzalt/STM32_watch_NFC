
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  080035e4  080035e4  000045e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035ec  080035ec  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ec  080035ec  000045ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080035f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000018  0800360c  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800360c  00005534  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012acf  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  00017b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a2a7  00000000  00000000  0001a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00024b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128d  00000000  00000000  000258e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013390  00000000  00000000  00026b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a705  00000000  00000000  00039efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000755a7  00000000  00000000  00054602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c9ba9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025cc  00000000  00000000  000c9bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000cc1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035b0 	.word	0x080035b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080035b0 	.word	0x080035b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <decToBinary>:
			}
		}
	}
}

static int decToBinary(int n) {
 800067c:	b530      	push	{r4, r5, lr}
 800067e:	4c10      	ldr	r4, [pc, #64]	@ (80006c0 <decToBinary+0x44>)
 8000680:	44a5      	add	sp, r4
	int result = 0;
	int binaryNum[1000];

	// counter for binary array
	int i = 0;
	while (n > 0) {
 8000682:	2800      	cmp	r0, #0
 8000684:	d019      	beq.n	80006ba <decToBinary+0x3e>
 8000686:	466c      	mov	r4, sp
	int i = 0;
 8000688:	2300      	movs	r3, #0
	while (n > 0) {
 800068a:	0021      	movs	r1, r4

		// storing remainder in binary array
		binaryNum[i] = n % 2;
 800068c:	2501      	movs	r5, #1
 800068e:	002a      	movs	r2, r5
 8000690:	4002      	ands	r2, r0
 8000692:	c104      	stmia	r1!, {r2}
		n = n / 2;
 8000694:	1040      	asrs	r0, r0, #1
		i++;
 8000696:	001a      	movs	r2, r3
 8000698:	3301      	adds	r3, #1
	while (n > 0) {
 800069a:	2800      	cmp	r0, #0
 800069c:	d1f7      	bne.n	800068e <decToBinary+0x12>
	}

	// printing binary array in reverse order
	for (int j = i - 1; j >= 0; j--)
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	18a2      	adds	r2, r4, r2
		result = result*10 + binaryNum[j];
 80006a2:	0083      	lsls	r3, r0, #2
 80006a4:	181b      	adds	r3, r3, r0
 80006a6:	6810      	ldr	r0, [r2, #0]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1818      	adds	r0, r3, r0
	for (int j = i - 1; j >= 0; j--)
 80006ac:	0013      	movs	r3, r2
 80006ae:	3a04      	subs	r2, #4
 80006b0:	429c      	cmp	r4, r3
 80006b2:	d1f6      	bne.n	80006a2 <decToBinary+0x26>
	return result;
}
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <decToBinary+0x48>)
 80006b6:	449d      	add	sp, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
	int result = 0;
 80006ba:	2000      	movs	r0, #0
	return result;
 80006bc:	e7fa      	b.n	80006b4 <decToBinary+0x38>
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	fffff05c 	.word	0xfffff05c
 80006c4:	00000fa4 	.word	0x00000fa4

080006c8 <clear_LEDs>:
	for (int i = 0; i < 12; i++) {
 80006c8:	2390      	movs	r3, #144	@ 0x90
 80006ca:	009b      	lsls	r3, r3, #2
void clear_LEDs(LEDs* leds, uint16_t num_LEDs) {
 80006cc:	b510      	push	{r4, lr}
 80006ce:	18c2      	adds	r2, r0, r3
	for (int i = 0; i < 12; i++) {
 80006d0:	2400      	movs	r4, #0
			(leds + i) ->r[j] = T0H;
 80006d2:	2305      	movs	r3, #5
				(leds + 12 + i) ->r[j] = 0;
 80006d4:	2100      	movs	r1, #0
			(leds + i) ->r[j] = T0H;
 80006d6:	8203      	strh	r3, [r0, #16]
			(leds + i) ->g[j] = T0H;
 80006d8:	8003      	strh	r3, [r0, #0]
			(leds + i) ->b[j] = T0H;
 80006da:	8403      	strh	r3, [r0, #32]
			if (i >= 0 && i <= 2) {
 80006dc:	2c02      	cmp	r4, #2
 80006de:	dd1a      	ble.n	8000716 <clear_LEDs+0x4e>
	for (int i = 0; i < 12; i++) {
 80006e0:	3401      	adds	r4, #1
			(leds + i) ->r[j] = T0H;
 80006e2:	8243      	strh	r3, [r0, #18]
			(leds + i) ->g[j] = T0H;
 80006e4:	8043      	strh	r3, [r0, #2]
			(leds + i) ->b[j] = T0H;
 80006e6:	8443      	strh	r3, [r0, #34]	@ 0x22
			(leds + i) ->r[j] = T0H;
 80006e8:	8283      	strh	r3, [r0, #20]
			(leds + i) ->g[j] = T0H;
 80006ea:	8083      	strh	r3, [r0, #4]
			(leds + i) ->b[j] = T0H;
 80006ec:	8483      	strh	r3, [r0, #36]	@ 0x24
			(leds + i) ->r[j] = T0H;
 80006ee:	82c3      	strh	r3, [r0, #22]
			(leds + i) ->g[j] = T0H;
 80006f0:	80c3      	strh	r3, [r0, #6]
			(leds + i) ->b[j] = T0H;
 80006f2:	84c3      	strh	r3, [r0, #38]	@ 0x26
			(leds + i) ->r[j] = T0H;
 80006f4:	8303      	strh	r3, [r0, #24]
			(leds + i) ->g[j] = T0H;
 80006f6:	8103      	strh	r3, [r0, #8]
			(leds + i) ->b[j] = T0H;
 80006f8:	8503      	strh	r3, [r0, #40]	@ 0x28
			(leds + i) ->r[j] = T0H;
 80006fa:	8343      	strh	r3, [r0, #26]
			(leds + i) ->g[j] = T0H;
 80006fc:	8143      	strh	r3, [r0, #10]
			(leds + i) ->b[j] = T0H;
 80006fe:	8543      	strh	r3, [r0, #42]	@ 0x2a
			(leds + i) ->r[j] = T0H;
 8000700:	8383      	strh	r3, [r0, #28]
			(leds + i) ->g[j] = T0H;
 8000702:	8183      	strh	r3, [r0, #12]
			(leds + i) ->b[j] = T0H;
 8000704:	8583      	strh	r3, [r0, #44]	@ 0x2c
			(leds + i) ->r[j] = T0H;
 8000706:	83c3      	strh	r3, [r0, #30]
			(leds + i) ->g[j] = T0H;
 8000708:	81c3      	strh	r3, [r0, #14]
			(leds + i) ->b[j] = T0H;
 800070a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
	for (int i = 0; i < 12; i++) {
 800070c:	3230      	adds	r2, #48	@ 0x30
 800070e:	3030      	adds	r0, #48	@ 0x30
 8000710:	2c0c      	cmp	r4, #12
 8000712:	d1e0      	bne.n	80006d6 <clear_LEDs+0xe>
}
 8000714:	bd10      	pop	{r4, pc}
				(leds + 12 + i) ->r[j] = 0;
 8000716:	8211      	strh	r1, [r2, #16]
				(leds + 12 + i) ->g[j] = 0;
 8000718:	8011      	strh	r1, [r2, #0]
				(leds + 12 + i) ->b[j] = 0;
 800071a:	8411      	strh	r1, [r2, #32]
	for (int i = 0; i < 12; i++) {
 800071c:	3401      	adds	r4, #1
			(leds + i) ->r[j] = T0H;
 800071e:	8243      	strh	r3, [r0, #18]
			(leds + i) ->g[j] = T0H;
 8000720:	8043      	strh	r3, [r0, #2]
			(leds + i) ->b[j] = T0H;
 8000722:	8443      	strh	r3, [r0, #34]	@ 0x22
				(leds + 12 + i) ->r[j] = 0;
 8000724:	8251      	strh	r1, [r2, #18]
				(leds + 12 + i) ->g[j] = 0;
 8000726:	8051      	strh	r1, [r2, #2]
				(leds + 12 + i) ->b[j] = 0;
 8000728:	8451      	strh	r1, [r2, #34]	@ 0x22
			(leds + i) ->r[j] = T0H;
 800072a:	8283      	strh	r3, [r0, #20]
			(leds + i) ->g[j] = T0H;
 800072c:	8083      	strh	r3, [r0, #4]
			(leds + i) ->b[j] = T0H;
 800072e:	8483      	strh	r3, [r0, #36]	@ 0x24
				(leds + 12 + i) ->r[j] = 0;
 8000730:	8291      	strh	r1, [r2, #20]
				(leds + 12 + i) ->g[j] = 0;
 8000732:	8091      	strh	r1, [r2, #4]
				(leds + 12 + i) ->b[j] = 0;
 8000734:	8491      	strh	r1, [r2, #36]	@ 0x24
			(leds + i) ->r[j] = T0H;
 8000736:	82c3      	strh	r3, [r0, #22]
			(leds + i) ->g[j] = T0H;
 8000738:	80c3      	strh	r3, [r0, #6]
			(leds + i) ->b[j] = T0H;
 800073a:	84c3      	strh	r3, [r0, #38]	@ 0x26
				(leds + 12 + i) ->r[j] = 0;
 800073c:	82d1      	strh	r1, [r2, #22]
				(leds + 12 + i) ->g[j] = 0;
 800073e:	80d1      	strh	r1, [r2, #6]
				(leds + 12 + i) ->b[j] = 0;
 8000740:	84d1      	strh	r1, [r2, #38]	@ 0x26
			(leds + i) ->r[j] = T0H;
 8000742:	8303      	strh	r3, [r0, #24]
			(leds + i) ->g[j] = T0H;
 8000744:	8103      	strh	r3, [r0, #8]
			(leds + i) ->b[j] = T0H;
 8000746:	8503      	strh	r3, [r0, #40]	@ 0x28
				(leds + 12 + i) ->r[j] = 0;
 8000748:	8311      	strh	r1, [r2, #24]
				(leds + 12 + i) ->g[j] = 0;
 800074a:	8111      	strh	r1, [r2, #8]
				(leds + 12 + i) ->b[j] = 0;
 800074c:	8511      	strh	r1, [r2, #40]	@ 0x28
			(leds + i) ->r[j] = T0H;
 800074e:	8343      	strh	r3, [r0, #26]
			(leds + i) ->g[j] = T0H;
 8000750:	8143      	strh	r3, [r0, #10]
			(leds + i) ->b[j] = T0H;
 8000752:	8543      	strh	r3, [r0, #42]	@ 0x2a
				(leds + 12 + i) ->r[j] = 0;
 8000754:	8351      	strh	r1, [r2, #26]
				(leds + 12 + i) ->g[j] = 0;
 8000756:	8151      	strh	r1, [r2, #10]
				(leds + 12 + i) ->b[j] = 0;
 8000758:	8551      	strh	r1, [r2, #42]	@ 0x2a
			(leds + i) ->r[j] = T0H;
 800075a:	8383      	strh	r3, [r0, #28]
			(leds + i) ->g[j] = T0H;
 800075c:	8183      	strh	r3, [r0, #12]
			(leds + i) ->b[j] = T0H;
 800075e:	8583      	strh	r3, [r0, #44]	@ 0x2c
				(leds + 12 + i) ->r[j] = 0;
 8000760:	8391      	strh	r1, [r2, #28]
				(leds + 12 + i) ->g[j] = 0;
 8000762:	8191      	strh	r1, [r2, #12]
				(leds + 12 + i) ->b[j] = 0;
 8000764:	8591      	strh	r1, [r2, #44]	@ 0x2c
			(leds + i) ->r[j] = T0H;
 8000766:	83c3      	strh	r3, [r0, #30]
			(leds + i) ->g[j] = T0H;
 8000768:	81c3      	strh	r3, [r0, #14]
			(leds + i) ->b[j] = T0H;
 800076a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
				(leds + 12 + i) ->r[j] = 0;
 800076c:	83d1      	strh	r1, [r2, #30]
				(leds + 12 + i) ->g[j] = 0;
 800076e:	81d1      	strh	r1, [r2, #14]
				(leds + 12 + i) ->b[j] = 0;
 8000770:	85d1      	strh	r1, [r2, #46]	@ 0x2e
	for (int i = 0; i < 12; i++) {
 8000772:	3030      	adds	r0, #48	@ 0x30
 8000774:	3230      	adds	r2, #48	@ 0x30
 8000776:	e7ae      	b.n	80006d6 <clear_LEDs+0xe>

08000778 <turn_spec_LEDs>:
	for (int i = 0; i < 12; i++) {
 8000778:	2390      	movs	r3, #144	@ 0x90
void turn_spec_LEDs(LEDs* leds, rgb_color* colors) {
 800077a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077c:	464e      	mov	r6, r9
 800077e:	4645      	mov	r5, r8
 8000780:	4657      	mov	r7, sl
 8000782:	46de      	mov	lr, fp
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b5e0      	push	{r5, r6, r7, lr}
 8000788:	18c7      	adds	r7, r0, r3
				(leds + 12 + i) ->r[j] = 0;
 800078a:	2300      	movs	r3, #0
void turn_spec_LEDs(LEDs* leds, rgb_color* colors) {
 800078c:	4689      	mov	r9, r1
 800078e:	0004      	movs	r4, r0
	for (int i = 0; i < 12; i++) {
 8000790:	2600      	movs	r6, #0
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 8000792:	250f      	movs	r5, #15
				(leds + 12 + i) ->r[j] = 0;
 8000794:	4698      	mov	r8, r3
void turn_spec_LEDs(LEDs* leds, rgb_color* colors) {
 8000796:	b083      	sub	sp, #12
		int r = decToBinary(colors[i].r);
 8000798:	464b      	mov	r3, r9
 800079a:	7818      	ldrb	r0, [r3, #0]
 800079c:	f7ff ff6e 	bl	800067c <decToBinary>
		int g = decToBinary(colors[i].g);
 80007a0:	464b      	mov	r3, r9
		int r = decToBinary(colors[i].r);
 80007a2:	4683      	mov	fp, r0
		int g = decToBinary(colors[i].g);
 80007a4:	7858      	ldrb	r0, [r3, #1]
 80007a6:	f7ff ff69 	bl	800067c <decToBinary>
		int b = decToBinary(colors[i].b);
 80007aa:	464b      	mov	r3, r9
		int g = decToBinary(colors[i].g);
 80007ac:	4682      	mov	sl, r0
		int b = decToBinary(colors[i].b);
 80007ae:	7898      	ldrb	r0, [r3, #2]
 80007b0:	f7ff ff64 	bl	800067c <decToBinary>
 80007b4:	210a      	movs	r1, #10
 80007b6:	9001      	str	r0, [sp, #4]
 80007b8:	4658      	mov	r0, fp
 80007ba:	f7ff fe15 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 80007be:	1e4b      	subs	r3, r1, #1
 80007c0:	4199      	sbcs	r1, r3
 80007c2:	4249      	negs	r1, r1
 80007c4:	4029      	ands	r1, r5
 80007c6:	3105      	adds	r1, #5
 80007c8:	4650      	mov	r0, sl
 80007ca:	8221      	strh	r1, [r4, #16]
 80007cc:	210a      	movs	r1, #10
 80007ce:	f7ff fe0b 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 80007d2:	1e4b      	subs	r3, r1, #1
 80007d4:	4199      	sbcs	r1, r3
 80007d6:	4249      	negs	r1, r1
 80007d8:	4029      	ands	r1, r5
 80007da:	3105      	adds	r1, #5
 80007dc:	9801      	ldr	r0, [sp, #4]
 80007de:	8021      	strh	r1, [r4, #0]
 80007e0:	210a      	movs	r1, #10
 80007e2:	f7ff fe01 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80007e6:	1e4b      	subs	r3, r1, #1
 80007e8:	4199      	sbcs	r1, r3
 80007ea:	4249      	negs	r1, r1
 80007ec:	4029      	ands	r1, r5
 80007ee:	3105      	adds	r1, #5
			r = r/10;
 80007f0:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80007f2:	8421      	strh	r1, [r4, #32]
			r = r/10;
 80007f4:	210a      	movs	r1, #10
 80007f6:	f7ff fd11 	bl	800021c <__divsi3>
			g = g/10;
 80007fa:	210a      	movs	r1, #10
			r = r/10;
 80007fc:	4683      	mov	fp, r0
			g = g/10;
 80007fe:	4650      	mov	r0, sl
 8000800:	f7ff fd0c 	bl	800021c <__divsi3>
			b = b/10;
 8000804:	210a      	movs	r1, #10
			g = g/10;
 8000806:	4682      	mov	sl, r0
			b = b/10;
 8000808:	9801      	ldr	r0, [sp, #4]
 800080a:	f7ff fd07 	bl	800021c <__divsi3>
 800080e:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 8000810:	2e02      	cmp	r6, #2
 8000812:	dc00      	bgt.n	8000816 <turn_spec_LEDs+0x9e>
 8000814:	e176      	b.n	8000b04 <turn_spec_LEDs+0x38c>
				(leds + 12 + i) ->b[j] = 0;
 8000816:	4658      	mov	r0, fp
 8000818:	210a      	movs	r1, #10
 800081a:	f7ff fde5 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 800081e:	1e4b      	subs	r3, r1, #1
 8000820:	4199      	sbcs	r1, r3
 8000822:	4249      	negs	r1, r1
 8000824:	4029      	ands	r1, r5
 8000826:	3105      	adds	r1, #5
 8000828:	4650      	mov	r0, sl
 800082a:	8261      	strh	r1, [r4, #18]
 800082c:	210a      	movs	r1, #10
 800082e:	f7ff fddb 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000832:	1e4b      	subs	r3, r1, #1
 8000834:	4199      	sbcs	r1, r3
 8000836:	4249      	negs	r1, r1
 8000838:	4029      	ands	r1, r5
 800083a:	3105      	adds	r1, #5
 800083c:	9801      	ldr	r0, [sp, #4]
 800083e:	8061      	strh	r1, [r4, #2]
 8000840:	210a      	movs	r1, #10
 8000842:	f7ff fdd1 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000846:	1e4b      	subs	r3, r1, #1
 8000848:	4199      	sbcs	r1, r3
 800084a:	4249      	negs	r1, r1
 800084c:	4029      	ands	r1, r5
 800084e:	3105      	adds	r1, #5
			r = r/10;
 8000850:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000852:	8461      	strh	r1, [r4, #34]	@ 0x22
			r = r/10;
 8000854:	210a      	movs	r1, #10
 8000856:	f7ff fce1 	bl	800021c <__divsi3>
			g = g/10;
 800085a:	210a      	movs	r1, #10
			r = r/10;
 800085c:	4683      	mov	fp, r0
			g = g/10;
 800085e:	4650      	mov	r0, sl
 8000860:	f7ff fcdc 	bl	800021c <__divsi3>
			b = b/10;
 8000864:	210a      	movs	r1, #10
			g = g/10;
 8000866:	4682      	mov	sl, r0
			b = b/10;
 8000868:	9801      	ldr	r0, [sp, #4]
 800086a:	f7ff fcd7 	bl	800021c <__divsi3>
 800086e:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 8000870:	2e02      	cmp	r6, #2
 8000872:	dc00      	bgt.n	8000876 <turn_spec_LEDs+0xfe>
 8000874:	e141      	b.n	8000afa <turn_spec_LEDs+0x382>
				(leds + 12 + i) ->b[j] = 0;
 8000876:	4658      	mov	r0, fp
 8000878:	210a      	movs	r1, #10
 800087a:	f7ff fdb5 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 800087e:	1e4b      	subs	r3, r1, #1
 8000880:	4199      	sbcs	r1, r3
 8000882:	4249      	negs	r1, r1
 8000884:	4029      	ands	r1, r5
 8000886:	3105      	adds	r1, #5
 8000888:	4650      	mov	r0, sl
 800088a:	82a1      	strh	r1, [r4, #20]
 800088c:	210a      	movs	r1, #10
 800088e:	f7ff fdab 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000892:	1e4b      	subs	r3, r1, #1
 8000894:	4199      	sbcs	r1, r3
 8000896:	4249      	negs	r1, r1
 8000898:	4029      	ands	r1, r5
 800089a:	3105      	adds	r1, #5
 800089c:	9801      	ldr	r0, [sp, #4]
 800089e:	80a1      	strh	r1, [r4, #4]
 80008a0:	210a      	movs	r1, #10
 80008a2:	f7ff fda1 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80008a6:	1e4b      	subs	r3, r1, #1
 80008a8:	4199      	sbcs	r1, r3
 80008aa:	4249      	negs	r1, r1
 80008ac:	4029      	ands	r1, r5
 80008ae:	3105      	adds	r1, #5
			r = r/10;
 80008b0:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80008b2:	84a1      	strh	r1, [r4, #36]	@ 0x24
			r = r/10;
 80008b4:	210a      	movs	r1, #10
 80008b6:	f7ff fcb1 	bl	800021c <__divsi3>
			g = g/10;
 80008ba:	210a      	movs	r1, #10
			r = r/10;
 80008bc:	4683      	mov	fp, r0
			g = g/10;
 80008be:	4650      	mov	r0, sl
 80008c0:	f7ff fcac 	bl	800021c <__divsi3>
			b = b/10;
 80008c4:	210a      	movs	r1, #10
			g = g/10;
 80008c6:	4682      	mov	sl, r0
			b = b/10;
 80008c8:	9801      	ldr	r0, [sp, #4]
 80008ca:	f7ff fca7 	bl	800021c <__divsi3>
 80008ce:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 80008d0:	2e02      	cmp	r6, #2
 80008d2:	dc00      	bgt.n	80008d6 <turn_spec_LEDs+0x15e>
 80008d4:	e10c      	b.n	8000af0 <turn_spec_LEDs+0x378>
				(leds + 12 + i) ->b[j] = 0;
 80008d6:	4658      	mov	r0, fp
 80008d8:	210a      	movs	r1, #10
 80008da:	f7ff fd85 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 80008de:	1e4b      	subs	r3, r1, #1
 80008e0:	4199      	sbcs	r1, r3
 80008e2:	4249      	negs	r1, r1
 80008e4:	4029      	ands	r1, r5
 80008e6:	3105      	adds	r1, #5
 80008e8:	4650      	mov	r0, sl
 80008ea:	82e1      	strh	r1, [r4, #22]
 80008ec:	210a      	movs	r1, #10
 80008ee:	f7ff fd7b 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 80008f2:	1e4b      	subs	r3, r1, #1
 80008f4:	4199      	sbcs	r1, r3
 80008f6:	4249      	negs	r1, r1
 80008f8:	4029      	ands	r1, r5
 80008fa:	3105      	adds	r1, #5
 80008fc:	9801      	ldr	r0, [sp, #4]
 80008fe:	80e1      	strh	r1, [r4, #6]
 8000900:	210a      	movs	r1, #10
 8000902:	f7ff fd71 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000906:	1e4b      	subs	r3, r1, #1
 8000908:	4199      	sbcs	r1, r3
 800090a:	4249      	negs	r1, r1
 800090c:	4029      	ands	r1, r5
 800090e:	3105      	adds	r1, #5
			r = r/10;
 8000910:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000912:	84e1      	strh	r1, [r4, #38]	@ 0x26
			r = r/10;
 8000914:	210a      	movs	r1, #10
 8000916:	f7ff fc81 	bl	800021c <__divsi3>
			g = g/10;
 800091a:	210a      	movs	r1, #10
			r = r/10;
 800091c:	4683      	mov	fp, r0
			g = g/10;
 800091e:	4650      	mov	r0, sl
 8000920:	f7ff fc7c 	bl	800021c <__divsi3>
			b = b/10;
 8000924:	210a      	movs	r1, #10
			g = g/10;
 8000926:	4682      	mov	sl, r0
			b = b/10;
 8000928:	9801      	ldr	r0, [sp, #4]
 800092a:	f7ff fc77 	bl	800021c <__divsi3>
 800092e:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 8000930:	2e02      	cmp	r6, #2
 8000932:	dc00      	bgt.n	8000936 <turn_spec_LEDs+0x1be>
 8000934:	e0d7      	b.n	8000ae6 <turn_spec_LEDs+0x36e>
				(leds + 12 + i) ->b[j] = 0;
 8000936:	4658      	mov	r0, fp
 8000938:	210a      	movs	r1, #10
 800093a:	f7ff fd55 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 800093e:	1e4b      	subs	r3, r1, #1
 8000940:	4199      	sbcs	r1, r3
 8000942:	4249      	negs	r1, r1
 8000944:	4029      	ands	r1, r5
 8000946:	3105      	adds	r1, #5
 8000948:	4650      	mov	r0, sl
 800094a:	8321      	strh	r1, [r4, #24]
 800094c:	210a      	movs	r1, #10
 800094e:	f7ff fd4b 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000952:	1e4b      	subs	r3, r1, #1
 8000954:	4199      	sbcs	r1, r3
 8000956:	4249      	negs	r1, r1
 8000958:	4029      	ands	r1, r5
 800095a:	3105      	adds	r1, #5
 800095c:	9801      	ldr	r0, [sp, #4]
 800095e:	8121      	strh	r1, [r4, #8]
 8000960:	210a      	movs	r1, #10
 8000962:	f7ff fd41 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000966:	1e4b      	subs	r3, r1, #1
 8000968:	4199      	sbcs	r1, r3
 800096a:	4249      	negs	r1, r1
 800096c:	4029      	ands	r1, r5
 800096e:	3105      	adds	r1, #5
			r = r/10;
 8000970:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000972:	8521      	strh	r1, [r4, #40]	@ 0x28
			r = r/10;
 8000974:	210a      	movs	r1, #10
 8000976:	f7ff fc51 	bl	800021c <__divsi3>
			g = g/10;
 800097a:	210a      	movs	r1, #10
			r = r/10;
 800097c:	4683      	mov	fp, r0
			g = g/10;
 800097e:	4650      	mov	r0, sl
 8000980:	f7ff fc4c 	bl	800021c <__divsi3>
			b = b/10;
 8000984:	210a      	movs	r1, #10
			g = g/10;
 8000986:	4682      	mov	sl, r0
			b = b/10;
 8000988:	9801      	ldr	r0, [sp, #4]
 800098a:	f7ff fc47 	bl	800021c <__divsi3>
 800098e:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 8000990:	2e02      	cmp	r6, #2
 8000992:	dc00      	bgt.n	8000996 <turn_spec_LEDs+0x21e>
 8000994:	e0a2      	b.n	8000adc <turn_spec_LEDs+0x364>
				(leds + 12 + i) ->b[j] = 0;
 8000996:	4658      	mov	r0, fp
 8000998:	210a      	movs	r1, #10
 800099a:	f7ff fd25 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 800099e:	1e4b      	subs	r3, r1, #1
 80009a0:	4199      	sbcs	r1, r3
 80009a2:	4249      	negs	r1, r1
 80009a4:	4029      	ands	r1, r5
 80009a6:	3105      	adds	r1, #5
 80009a8:	4650      	mov	r0, sl
 80009aa:	8361      	strh	r1, [r4, #26]
 80009ac:	210a      	movs	r1, #10
 80009ae:	f7ff fd1b 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 80009b2:	1e4b      	subs	r3, r1, #1
 80009b4:	4199      	sbcs	r1, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	4029      	ands	r1, r5
 80009ba:	3105      	adds	r1, #5
 80009bc:	9801      	ldr	r0, [sp, #4]
 80009be:	8161      	strh	r1, [r4, #10]
 80009c0:	210a      	movs	r1, #10
 80009c2:	f7ff fd11 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80009c6:	1e4b      	subs	r3, r1, #1
 80009c8:	4199      	sbcs	r1, r3
 80009ca:	4249      	negs	r1, r1
 80009cc:	4029      	ands	r1, r5
 80009ce:	3105      	adds	r1, #5
			r = r/10;
 80009d0:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 80009d2:	8561      	strh	r1, [r4, #42]	@ 0x2a
			r = r/10;
 80009d4:	210a      	movs	r1, #10
 80009d6:	f7ff fc21 	bl	800021c <__divsi3>
			g = g/10;
 80009da:	210a      	movs	r1, #10
			r = r/10;
 80009dc:	4683      	mov	fp, r0
			g = g/10;
 80009de:	4650      	mov	r0, sl
 80009e0:	f7ff fc1c 	bl	800021c <__divsi3>
			b = b/10;
 80009e4:	210a      	movs	r1, #10
			g = g/10;
 80009e6:	4682      	mov	sl, r0
			b = b/10;
 80009e8:	9801      	ldr	r0, [sp, #4]
 80009ea:	f7ff fc17 	bl	800021c <__divsi3>
 80009ee:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 80009f0:	2e02      	cmp	r6, #2
 80009f2:	dd6e      	ble.n	8000ad2 <turn_spec_LEDs+0x35a>
				(leds + 12 + i) ->b[j] = 0;
 80009f4:	4658      	mov	r0, fp
 80009f6:	210a      	movs	r1, #10
 80009f8:	f7ff fcf6 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 80009fc:	1e4b      	subs	r3, r1, #1
 80009fe:	4199      	sbcs	r1, r3
 8000a00:	4249      	negs	r1, r1
 8000a02:	4029      	ands	r1, r5
 8000a04:	3105      	adds	r1, #5
 8000a06:	4650      	mov	r0, sl
 8000a08:	83a1      	strh	r1, [r4, #28]
 8000a0a:	210a      	movs	r1, #10
 8000a0c:	f7ff fcec 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000a10:	1e4b      	subs	r3, r1, #1
 8000a12:	4199      	sbcs	r1, r3
 8000a14:	4249      	negs	r1, r1
 8000a16:	4029      	ands	r1, r5
 8000a18:	3105      	adds	r1, #5
 8000a1a:	9801      	ldr	r0, [sp, #4]
 8000a1c:	81a1      	strh	r1, [r4, #12]
 8000a1e:	210a      	movs	r1, #10
 8000a20:	f7ff fce2 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000a24:	1e4b      	subs	r3, r1, #1
 8000a26:	4199      	sbcs	r1, r3
 8000a28:	4249      	negs	r1, r1
 8000a2a:	4029      	ands	r1, r5
 8000a2c:	3105      	adds	r1, #5
			r = r/10;
 8000a2e:	4658      	mov	r0, fp
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000a30:	85a1      	strh	r1, [r4, #44]	@ 0x2c
			r = r/10;
 8000a32:	210a      	movs	r1, #10
 8000a34:	f7ff fbf2 	bl	800021c <__divsi3>
			g = g/10;
 8000a38:	210a      	movs	r1, #10
			r = r/10;
 8000a3a:	4683      	mov	fp, r0
			g = g/10;
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	f7ff fbed 	bl	800021c <__divsi3>
			b = b/10;
 8000a42:	210a      	movs	r1, #10
			g = g/10;
 8000a44:	4682      	mov	sl, r0
			b = b/10;
 8000a46:	9801      	ldr	r0, [sp, #4]
 8000a48:	f7ff fbe8 	bl	800021c <__divsi3>
 8000a4c:	9001      	str	r0, [sp, #4]
			if (i >= 0 && i <= 2) {
 8000a4e:	2e02      	cmp	r6, #2
 8000a50:	dd3a      	ble.n	8000ac8 <turn_spec_LEDs+0x350>
				(leds + 12 + i) ->b[j] = 0;
 8000a52:	210a      	movs	r1, #10
 8000a54:	4658      	mov	r0, fp
 8000a56:	f7ff fcc7 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 8000a5a:	1e4b      	subs	r3, r1, #1
 8000a5c:	4199      	sbcs	r1, r3
 8000a5e:	4249      	negs	r1, r1
 8000a60:	4029      	ands	r1, r5
 8000a62:	3105      	adds	r1, #5
 8000a64:	83e1      	strh	r1, [r4, #30]
 8000a66:	4650      	mov	r0, sl
 8000a68:	210a      	movs	r1, #10
 8000a6a:	f7ff fcbd 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000a6e:	1e4b      	subs	r3, r1, #1
 8000a70:	4199      	sbcs	r1, r3
 8000a72:	4249      	negs	r1, r1
 8000a74:	4029      	ands	r1, r5
 8000a76:	3105      	adds	r1, #5
 8000a78:	81e1      	strh	r1, [r4, #14]
 8000a7a:	9801      	ldr	r0, [sp, #4]
 8000a7c:	210a      	movs	r1, #10
 8000a7e:	f7ff fcb3 	bl	80003e8 <__aeabi_idivmod>
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000a82:	1e4b      	subs	r3, r1, #1
 8000a84:	4199      	sbcs	r1, r3
 8000a86:	4249      	negs	r1, r1
 8000a88:	4029      	ands	r1, r5
 8000a8a:	3105      	adds	r1, #5
 8000a8c:	85e1      	strh	r1, [r4, #46]	@ 0x2e
			if (i >= 0 && i <= 2) {
 8000a8e:	2e02      	cmp	r6, #2
 8000a90:	dd0f      	ble.n	8000ab2 <turn_spec_LEDs+0x33a>
	for (int i = 0; i < 12; i++) {
 8000a92:	2304      	movs	r3, #4
 8000a94:	469c      	mov	ip, r3
 8000a96:	3601      	adds	r6, #1
 8000a98:	44e1      	add	r9, ip
 8000a9a:	3430      	adds	r4, #48	@ 0x30
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	2e0c      	cmp	r6, #12
 8000aa0:	d000      	beq.n	8000aa4 <turn_spec_LEDs+0x32c>
 8000aa2:	e679      	b.n	8000798 <turn_spec_LEDs+0x20>
}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8000aa8:	46bb      	mov	fp, r7
 8000aaa:	46b2      	mov	sl, r6
 8000aac:	46a9      	mov	r9, r5
 8000aae:	46a0      	mov	r8, r4
 8000ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(leds + 12 + i) ->r[j] = 0;
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	83fb      	strh	r3, [r7, #30]
				(leds + 12 + i) ->g[j] = 0;
 8000ab6:	81fb      	strh	r3, [r7, #14]
				(leds + 12 + i) ->b[j] = 0;
 8000ab8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (int i = 0; i < 12; i++) {
 8000aba:	2304      	movs	r3, #4
 8000abc:	469c      	mov	ip, r3
 8000abe:	3601      	adds	r6, #1
 8000ac0:	44e1      	add	r9, ip
 8000ac2:	3430      	adds	r4, #48	@ 0x30
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	e667      	b.n	8000798 <turn_spec_LEDs+0x20>
				(leds + 12 + i) ->r[j] = 0;
 8000ac8:	4643      	mov	r3, r8
 8000aca:	83bb      	strh	r3, [r7, #28]
				(leds + 12 + i) ->g[j] = 0;
 8000acc:	81bb      	strh	r3, [r7, #12]
				(leds + 12 + i) ->b[j] = 0;
 8000ace:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000ad0:	e7bf      	b.n	8000a52 <turn_spec_LEDs+0x2da>
				(leds + 12 + i) ->r[j] = 0;
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	837b      	strh	r3, [r7, #26]
				(leds + 12 + i) ->g[j] = 0;
 8000ad6:	817b      	strh	r3, [r7, #10]
				(leds + 12 + i) ->b[j] = 0;
 8000ad8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000ada:	e78b      	b.n	80009f4 <turn_spec_LEDs+0x27c>
				(leds + 12 + i) ->r[j] = 0;
 8000adc:	4643      	mov	r3, r8
 8000ade:	833b      	strh	r3, [r7, #24]
				(leds + 12 + i) ->g[j] = 0;
 8000ae0:	813b      	strh	r3, [r7, #8]
				(leds + 12 + i) ->b[j] = 0;
 8000ae2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000ae4:	e757      	b.n	8000996 <turn_spec_LEDs+0x21e>
				(leds + 12 + i) ->r[j] = 0;
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	82fb      	strh	r3, [r7, #22]
				(leds + 12 + i) ->g[j] = 0;
 8000aea:	80fb      	strh	r3, [r7, #6]
				(leds + 12 + i) ->b[j] = 0;
 8000aec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000aee:	e722      	b.n	8000936 <turn_spec_LEDs+0x1be>
				(leds + 12 + i) ->r[j] = 0;
 8000af0:	4643      	mov	r3, r8
 8000af2:	82bb      	strh	r3, [r7, #20]
				(leds + 12 + i) ->g[j] = 0;
 8000af4:	80bb      	strh	r3, [r7, #4]
				(leds + 12 + i) ->b[j] = 0;
 8000af6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000af8:	e6ed      	b.n	80008d6 <turn_spec_LEDs+0x15e>
				(leds + 12 + i) ->r[j] = 0;
 8000afa:	4643      	mov	r3, r8
 8000afc:	827b      	strh	r3, [r7, #18]
				(leds + 12 + i) ->g[j] = 0;
 8000afe:	807b      	strh	r3, [r7, #2]
				(leds + 12 + i) ->b[j] = 0;
 8000b00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b02:	e6b8      	b.n	8000876 <turn_spec_LEDs+0xfe>
				(leds + 12 + i) ->r[j] = 0;
 8000b04:	4643      	mov	r3, r8
 8000b06:	823b      	strh	r3, [r7, #16]
				(leds + 12 + i) ->g[j] = 0;
 8000b08:	803b      	strh	r3, [r7, #0]
				(leds + 12 + i) ->b[j] = 0;
 8000b0a:	843b      	strh	r3, [r7, #32]
 8000b0c:	e683      	b.n	8000816 <turn_spec_LEDs+0x9e>
 8000b0e:	46c0      	nop			@ (mov r8, r8)

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b510      	push	{r4, lr}
 8000b12:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b14:	2234      	movs	r2, #52	@ 0x34
 8000b16:	2100      	movs	r1, #0
 8000b18:	a80c      	add	r0, sp, #48	@ 0x30
 8000b1a:	f002 fd1d 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1e:	2214      	movs	r2, #20
 8000b20:	2100      	movs	r1, #0
 8000b22:	a801      	add	r0, sp, #4
 8000b24:	f002 fd18 	bl	8003558 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	2218      	movs	r2, #24
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	a806      	add	r0, sp, #24
 8000b2e:	f002 fd13 	bl	8003558 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	4921      	ldr	r1, [pc, #132]	@ (8000bbc <SystemClock_Config+0xac>)
 8000b36:	4c22      	ldr	r4, [pc, #136]	@ (8000bc0 <SystemClock_Config+0xb0>)
 8000b38:	680a      	ldr	r2, [r1, #0]
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	4022      	ands	r2, r4
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b42:	f001 fa7d 	bl	8002040 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b46:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc4 <SystemClock_Config+0xb4>)
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	a80c      	add	r0, sp, #48	@ 0x30
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b4a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8000b4c:	4023      	ands	r3, r4
 8000b4e:	6513      	str	r3, [r2, #80]	@ 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b50:	2306      	movs	r3, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b52:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b54:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8000b5c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	3b0e      	subs	r3, #14
 8000b64:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	02db      	lsls	r3, r3, #11
 8000b6e:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f001 fb05 	bl	8002184 <HAL_RCC_OscConfig>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b88:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b94:	f001 fdaa 	bl	80026ec <HAL_RCC_ClockConfig>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x90>
 8000b9c:	b672      	cpsid	i
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <SystemClock_Config+0x8e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	025b      	lsls	r3, r3, #9
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba6:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ba8:	9206      	str	r2, [sp, #24]
 8000baa:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	f001 fe8c 	bl	80028c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xa8>
 8000bb4:	b672      	cpsid	i
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <SystemClock_Config+0xa6>
}
 8000bb8:	b01a      	add	sp, #104	@ 0x68
 8000bba:	bd10      	pop	{r4, pc}
 8000bbc:	40007000 	.word	0x40007000
 8000bc0:	ffffe7ff 	.word	0xffffe7ff
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <main>:
{
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	46de      	mov	lr, fp
 8000bcc:	4657      	mov	r7, sl
 8000bce:	464e      	mov	r6, r9
 8000bd0:	4645      	mov	r5, r8
 8000bd2:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2601      	movs	r6, #1
{
 8000bd8:	b099      	sub	sp, #100	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	4ce0      	ldr	r4, [pc, #896]	@ (8000f5c <main+0x394>)
  HAL_Init();
 8000bdc:	f000 fcdc 	bl	8001598 <HAL_Init>
  SystemClock_Config();
 8000be0:	f7ff ff96 	bl	8000b10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	220c      	movs	r2, #12
 8000be6:	2100      	movs	r1, #0
 8000be8:	a815      	add	r0, sp, #84	@ 0x54
 8000bea:	f002 fcb5 	bl	8003558 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	433b      	orrs	r3, r7
 8000bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000bf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	a913      	add	r1, sp, #76	@ 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	403b      	ands	r3, r7
 8000bfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8000bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4333      	orrs	r3, r6
 8000c06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4033      	ands	r3, r6
 8000c0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2302      	movs	r3, #2
 8000c14:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000c16:	431a      	orrs	r2, r3
 8000c18:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000c1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = Button_LT_Pin|Button_LB_Pin|SPI1_IRQ_Pin|Button_R_Pin;
 8000c22:	4bcf      	ldr	r3, [pc, #828]	@ (8000f60 <main+0x398>)
 8000c24:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c26:	2388      	movs	r3, #136	@ 0x88
 8000c28:	035b      	lsls	r3, r3, #13
 8000c2a:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f001 f900 	bl	8001e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CHRG_Pin|DONE_Pin;
 8000c30:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = CHRG_Pin|DONE_Pin;
 8000c34:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	a913      	add	r1, sp, #76	@ 0x4c
 8000c38:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = CHRG_Pin|DONE_Pin;
 8000c3a:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	9515      	str	r5, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f001 f8f6 	bl	8001e30 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2005      	movs	r0, #5
 8000c4a:	f000 ffc1 	bl	8001bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f000 ffe8 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2006      	movs	r0, #6
 8000c5a:	f000 ffb9 	bl	8001bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f000 ffe0 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f000 ffb1 	bl	8001bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f000 ffd8 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8000c76:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c78:	4333      	orrs	r3, r6
 8000c7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8000c7e:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c80:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8000c82:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8000c88:	f000 ffa2 	bl	8001bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000c8c:	200b      	movs	r0, #11
 8000c8e:	f000 ffc9 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000c92:	48b4      	ldr	r0, [pc, #720]	@ (8000f64 <main+0x39c>)
 8000c94:	4bb4      	ldr	r3, [pc, #720]	@ (8000f68 <main+0x3a0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	6085      	str	r5, [r0, #8]
  hspi1.Instance = SPI1;
 8000c98:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	2382      	movs	r3, #130	@ 0x82
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	02db      	lsls	r3, r3, #11
 8000ca4:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ca6:	2318      	movs	r3, #24
 8000ca8:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000caa:	3b11      	subs	r3, #17
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	6105      	str	r5, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb0:	6145      	str	r5, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb2:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	6245      	str	r5, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb6:	6285      	str	r5, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cba:	f002 f855 	bl	8002d68 <HAL_SPI_Init>
 8000cbe:	1e05      	subs	r5, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <main+0xfe>
 8000cc2:	b672      	cpsid	i
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <main+0xfc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	2100      	movs	r1, #0
 8000cca:	a80f      	add	r0, sp, #60	@ 0x3c
 8000ccc:	f002 fc44 	bl	8003558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	a80d      	add	r0, sp, #52	@ 0x34
 8000cd6:	f002 fc3f 	bl	8003558 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	2210      	movs	r2, #16
 8000cdc:	2100      	movs	r1, #0
 8000cde:	a813      	add	r0, sp, #76	@ 0x4c
 8000ce0:	f002 fc3a 	bl	8003558 <memset>
  htim2.Instance = TIM2;
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	4ca1      	ldr	r4, [pc, #644]	@ (8000f6c <main+0x3a4>)
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	4698      	mov	r8, r3
 8000cec:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = 60;
 8000cee:	233c      	movs	r3, #60	@ 0x3c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf0:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8000cf2:	6065      	str	r5, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 60;
 8000cf6:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfc:	f002 f8b0 	bl	8002e60 <HAL_TIM_Base_Init>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d001      	beq.n	8000d08 <main+0x140>
 8000d04:	b672      	cpsid	i
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x13e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0e:	a90f      	add	r1, sp, #60	@ 0x3c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	469a      	mov	sl, r3
 8000d12:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d14:	f002 fab0 	bl	8003278 <HAL_TIM_ConfigClockSource>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d001      	beq.n	8000d20 <main+0x158>
 8000d1c:	b672      	cpsid	i
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <main+0x156>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d20:	0020      	movs	r0, r4
 8000d22:	f002 f8e5 	bl	8002ef0 <HAL_TIM_PWM_Init>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d001      	beq.n	8000d2e <main+0x166>
 8000d2a:	b672      	cpsid	i
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x164>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	900d      	str	r0, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d32:	a90d      	add	r1, sp, #52	@ 0x34
 8000d34:	0020      	movs	r0, r4
 8000d36:	f002 fbe1 	bl	80034fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	1e02      	subs	r2, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <main+0x17a>
 8000d3e:	b672      	cpsid	i
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <main+0x178>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000d44:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d46:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d48:	a913      	add	r1, sp, #76	@ 0x4c
 8000d4a:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d4e:	9716      	str	r7, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	f002 f9da 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000d54:	4681      	mov	r9, r0
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d001      	beq.n	8000d5e <main+0x196>
 8000d5a:	b672      	cpsid	i
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x194>
  HAL_TIM_MspPostInit(&htim2);
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f000 fb70 	bl	8001444 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d64:	2208      	movs	r2, #8
 8000d66:	4649      	mov	r1, r9
 8000d68:	a813      	add	r0, sp, #76	@ 0x4c
 8000d6a:	f002 fbf5 	bl	8003558 <memset>
  hadc.Instance = ADC1;
 8000d6e:	4d80      	ldr	r5, [pc, #512]	@ (8000f70 <main+0x3a8>)
 8000d70:	4b80      	ldr	r3, [pc, #512]	@ (8000f74 <main+0x3ac>)
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d72:	464a      	mov	r2, r9
  hadc.Instance = ADC1;
 8000d74:	602b      	str	r3, [r5, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000d76:	464b      	mov	r3, r9
 8000d78:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	606b      	str	r3, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7e:	464b      	mov	r3, r9
 8000d80:	60ab      	str	r3, [r5, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d82:	63ab      	str	r3, [r5, #56]	@ 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d84:	60eb      	str	r3, [r5, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d86:	62ab      	str	r3, [r5, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d88:	23c2      	movs	r3, #194	@ 0xc2
 8000d8a:	33ff      	adds	r3, #255	@ 0xff
 8000d8c:	626b      	str	r3, [r5, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d8e:	3b96      	subs	r3, #150	@ 0x96
 8000d90:	3bff      	subs	r3, #255	@ 0xff
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d92:	0028      	movs	r0, r5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d94:	612e      	str	r6, [r5, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000d96:	842e      	strh	r6, [r5, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d98:	54ea      	strb	r2, [r5, r3]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	616f      	str	r7, [r5, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d9c:	632a      	str	r2, [r5, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d9e:	61aa      	str	r2, [r5, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000da0:	636a      	str	r2, [r5, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000da2:	61ea      	str	r2, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000da4:	f000 fd08 	bl	80017b8 <HAL_ADC_Init>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d001      	beq.n	8000db0 <main+0x1e8>
 8000dac:	b672      	cpsid	i
  while (1)
 8000dae:	e7fe      	b.n	8000dae <main+0x1e6>
  sConfig.Channel = ADC_CHANNEL_9;
 8000db0:	4b71      	ldr	r3, [pc, #452]	@ (8000f78 <main+0x3b0>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db2:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8000db4:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000db6:	4653      	mov	r3, sl
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db8:	a913      	add	r1, sp, #76	@ 0x4c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000dba:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dbc:	f000 fe9c 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <main+0x200>
 8000dc4:	b672      	cpsid	i
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <main+0x1fe>
  hrtc.Instance = RTC;
 8000dc8:	4e6c      	ldr	r6, [pc, #432]	@ (8000f7c <main+0x3b4>)
 8000dca:	4b6d      	ldr	r3, [pc, #436]	@ (8000f80 <main+0x3b8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dcc:	6070      	str	r0, [r6, #4]
  hrtc.Instance = RTC;
 8000dce:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000dd0:	237f      	movs	r3, #127	@ 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dd2:	6130      	str	r0, [r6, #16]
  hrtc.Init.AsynchPrediv = 127;
 8000dd4:	60b3      	str	r3, [r6, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dd6:	6170      	str	r0, [r6, #20]
  hrtc.Init.SynchPrediv = 255;
 8000dd8:	3380      	adds	r3, #128	@ 0x80
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dda:	61b0      	str	r0, [r6, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ddc:	61f0      	str	r0, [r6, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dde:	0030      	movs	r0, r6
  hrtc.Init.SynchPrediv = 255;
 8000de0:	60f3      	str	r3, [r6, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000de2:	f001 fe49 	bl	8002a78 <HAL_RTC_Init>
 8000de6:	1e07      	subs	r7, r0, #0
 8000de8:	d001      	beq.n	8000dee <main+0x226>
 8000dea:	b672      	cpsid	i
  while (1)
 8000dec:	e7fe      	b.n	8000dec <main+0x224>
 8000dee:	4b65      	ldr	r3, [pc, #404]	@ (8000f84 <main+0x3bc>)
		  led_pattern[i] = blue;
 8000df0:	9403      	str	r4, [sp, #12]
 8000df2:	4698      	mov	r8, r3
 8000df4:	4b64      	ldr	r3, [pc, #400]	@ (8000f88 <main+0x3c0>)
 8000df6:	4644      	mov	r4, r8
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4b64      	ldr	r3, [pc, #400]	@ (8000f8c <main+0x3c4>)
 8000dfc:	9504      	str	r5, [sp, #16]
 8000dfe:	4699      	mov	r9, r3
 8000e00:	4b63      	ldr	r3, [pc, #396]	@ (8000f90 <main+0x3c8>)
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4b63      	ldr	r3, [pc, #396]	@ (8000f94 <main+0x3cc>)
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	4b63      	ldr	r3, [pc, #396]	@ (8000f98 <main+0x3d0>)
 8000e0a:	469b      	mov	fp, r3
	  if (i%3==0) {
 8000e0c:	23fa      	movs	r3, #250	@ 0xfa
 8000e0e:	469a      	mov	sl, r3
		  led_pattern[i] = blue;
 8000e10:	465b      	mov	r3, fp
 8000e12:	46b3      	mov	fp, r6
 8000e14:	4698      	mov	r8, r3
 8000e16:	e01d      	b.n	8000e54 <main+0x28c>
	  } else if (i%3==1) {
 8000e18:	2901      	cmp	r1, #1
 8000e1a:	d100      	bne.n	8000e1e <main+0x256>
 8000e1c:	e119      	b.n	8001052 <main+0x48a>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4653      	mov	r3, sl
 8000e22:	0011      	movs	r1, r2
	  led_pattern[i] = none;
 8000e24:	9800      	ldr	r0, [sp, #0]
	  time_pattern[i] = none;
 8000e26:	464d      	mov	r5, r9
	  led_pattern[i] = none;
 8000e28:	6800      	ldr	r0, [r0, #0]
		  led_pattern[i] = blue;
 8000e2a:	7023      	strb	r3, [r4, #0]
	  led_pattern[i] = none;
 8000e2c:	4684      	mov	ip, r0
	  time_pattern[i] = none;
 8000e2e:	4666      	mov	r6, ip
 8000e30:	00b8      	lsls	r0, r7, #2
 8000e32:	502e      	str	r6, [r5, r0]
	  null_pattern[i] = none;
 8000e34:	9d01      	ldr	r5, [sp, #4]
		  led_pattern[i] = blue;
 8000e36:	2304      	movs	r3, #4
	  null_pattern[i] = none;
 8000e38:	502e      	str	r6, [r5, r0]
	  all_pattern[i] = all;
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	682d      	ldr	r5, [r5, #0]
  for (int i = 0; i < 12; i++) {
 8000e3e:	3701      	adds	r7, #1
	  all_pattern[i] = all;
 8000e40:	46ac      	mov	ip, r5
 8000e42:	4666      	mov	r6, ip
 8000e44:	9d02      	ldr	r5, [sp, #8]
		  led_pattern[i] = blue;
 8000e46:	7062      	strb	r2, [r4, #1]
 8000e48:	70a1      	strb	r1, [r4, #2]
 8000e4a:	70e3      	strb	r3, [r4, #3]
	  all_pattern[i] = all;
 8000e4c:	502e      	str	r6, [r5, r0]
  for (int i = 0; i < 12; i++) {
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	2f0c      	cmp	r7, #12
 8000e52:	d008      	beq.n	8000e66 <main+0x29e>
	  if (i%3==0) {
 8000e54:	2103      	movs	r1, #3
 8000e56:	0038      	movs	r0, r7
 8000e58:	f7ff fac6 	bl	80003e8 <__aeabi_idivmod>
 8000e5c:	1e0b      	subs	r3, r1, #0
 8000e5e:	d1db      	bne.n	8000e18 <main+0x250>
 8000e60:	000a      	movs	r2, r1
 8000e62:	4651      	mov	r1, sl
 8000e64:	e7de      	b.n	8000e24 <main+0x25c>
  time_pattern[shifted_hours] = hour_color;
 8000e66:	464a      	mov	r2, r9
 8000e68:	4b4c      	ldr	r3, [pc, #304]	@ (8000f9c <main+0x3d4>)
 8000e6a:	494d      	ldr	r1, [pc, #308]	@ (8000fa0 <main+0x3d8>)
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	9c03      	ldr	r4, [sp, #12]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	50d1      	str	r1, [r2, r3]
  time_pattern[shifted_minutes] = minut_color;
 8000e76:	4649      	mov	r1, r9
 8000e78:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa4 <main+0x3dc>)
 8000e7a:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa8 <main+0x3e0>)
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	881b      	ldrh	r3, [r3, #0]
  time_pattern[shifted_hours] = hour_color;
 8000e80:	9d04      	ldr	r5, [sp, #16]
  time_pattern[shifted_minutes] = minut_color;
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	50ca      	str	r2, [r1, r3]
 8000e86:	4b49      	ldr	r3, [pc, #292]	@ (8000fac <main+0x3e4>)
  time_pattern[shifted_hours] = hour_color;
 8000e88:	465e      	mov	r6, fp
  time_pattern[shifted_minutes] = minut_color;
 8000e8a:	9307      	str	r3, [sp, #28]
 8000e8c:	4b48      	ldr	r3, [pc, #288]	@ (8000fb0 <main+0x3e8>)
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	4b48      	ldr	r3, [pc, #288]	@ (8000fb4 <main+0x3ec>)
 8000e92:	9305      	str	r3, [sp, #20]
 8000e94:	4b48      	ldr	r3, [pc, #288]	@ (8000fb8 <main+0x3f0>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4b48      	ldr	r3, [pc, #288]	@ (8000fbc <main+0x3f4>)
 8000e9a:	4698      	mov	r8, r3
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000e9c:	23b4      	movs	r3, #180	@ 0xb4
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	469a      	mov	sl, r3
					  toggler = !toggler;
 8000ea2:	3b68      	subs	r3, #104	@ 0x68
 8000ea4:	3bff      	subs	r3, #255	@ 0xff
 8000ea6:	4647      	mov	r7, r8
 8000ea8:	469b      	mov	fp, r3
 8000eaa:	46a8      	mov	r8, r5
 8000eac:	0025      	movs	r5, r4
 8000eae:	464c      	mov	r4, r9
 8000eb0:	46b1      	mov	r9, r6
	  HAL_ADC_Start(&hadc);
 8000eb2:	4640      	mov	r0, r8
 8000eb4:	f000 fd5c 	bl	8001970 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4640      	mov	r0, r8
 8000ebc:	4249      	negs	r1, r1
 8000ebe:	f000 fda3 	bl	8001a08 <HAL_ADC_PollForConversion>
	  batteryVal = HAL_ADC_GetValue(&hadc);
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	f000 fe14 	bl	8001af0 <HAL_ADC_GetValue>
 8000ec8:	9b07      	ldr	r3, [sp, #28]
 8000eca:	8018      	strh	r0, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8000ecc:	4640      	mov	r0, r8
 8000ece:	f000 fd7b 	bl	80019c8 <HAL_ADC_Stop>
	  if (showingLeds) {
 8000ed2:	9b04      	ldr	r3, [sp, #16]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d000      	beq.n	8000edc <main+0x314>
 8000eda:	e07e      	b.n	8000fda <main+0x412>
	  while(changeTime) {
 8000edc:	9b05      	ldr	r3, [sp, #20]
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d029      	beq.n	8000f38 <main+0x370>
		  time_pattern[shifted_hours] = hour_color;
 8000ee4:	9b02      	ldr	r3, [sp, #8]
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa0 <main+0x3d8>)
 8000ee8:	8818      	ldrh	r0, [r3, #0]
		  time_pattern[shifted_minutes] = minut_color;
 8000eea:	4e2f      	ldr	r6, [pc, #188]	@ (8000fa8 <main+0x3e0>)
		  time_pattern[shifted_hours] = hour_color;
 8000eec:	0083      	lsls	r3, r0, #2
 8000eee:	50e2      	str	r2, [r4, r3]
		  time_pattern[shifted_minutes] = minut_color;
 8000ef0:	9b03      	ldr	r3, [sp, #12]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	0099      	lsls	r1, r3, #2
 8000ef6:	1862      	adds	r2, r4, r1
 8000ef8:	6016      	str	r6, [r2, #0]
		  if (shifted_hours==shifted_minutes) {
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d060      	beq.n	8000fc0 <main+0x3f8>
		  turn_spec_LEDs(leds, time_pattern);
 8000efe:	0021      	movs	r1, r4
 8000f00:	0038      	movs	r0, r7
 8000f02:	f7ff fc39 	bl	8000778 <turn_spec_LEDs>
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000f06:	4653      	mov	r3, sl
 8000f08:	003a      	movs	r2, r7
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	0028      	movs	r0, r5
 8000f0e:	f002 f835 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(500);
 8000f12:	20fa      	movs	r0, #250	@ 0xfa
 8000f14:	0040      	lsls	r0, r0, #1
 8000f16:	f000 fb65 	bl	80015e4 <HAL_Delay>
		  clear_LEDs(leds, MAX_LED);
 8000f1a:	0038      	movs	r0, r7
 8000f1c:	210c      	movs	r1, #12
 8000f1e:	f7ff fbd3 	bl	80006c8 <clear_LEDs>
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000f22:	4653      	mov	r3, sl
 8000f24:	003a      	movs	r2, r7
 8000f26:	2100      	movs	r1, #0
 8000f28:	0028      	movs	r0, r5
 8000f2a:	f002 f827 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(500);
 8000f2e:	20fa      	movs	r0, #250	@ 0xfa
 8000f30:	0040      	lsls	r0, r0, #1
 8000f32:	f000 fb57 	bl	80015e4 <HAL_Delay>
 8000f36:	e7d1      	b.n	8000edc <main+0x314>
	  __HAL_RCC_DMA1_CLK_DISABLE();
 8000f38:	4658      	mov	r0, fp
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <main+0x394>)
 8000f3c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000f3e:	4383      	bics	r3, r0
 8000f40:	630b      	str	r3, [r1, #48]	@ 0x30
	  TIM2 ->CCR1 = 0;
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_SuspendTick();
 8000f48:	f000 fb5e 	bl	8001608 <HAL_SuspendTick>
	  HAL_PWR_EnableSleepOnExit();
 8000f4c:	f001 f8c2 	bl	80020d4 <HAL_PWR_EnableSleepOnExit>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f50:	2101      	movs	r1, #1
 8000f52:	0008      	movs	r0, r1
 8000f54:	f001 f87e 	bl	8002054 <HAL_PWR_EnterSTOPMode>
	  HAL_ADC_Start(&hadc);
 8000f58:	e7ab      	b.n	8000eb2 <main+0x2ea>
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	0000040b 	.word	0x0000040b
 8000f64:	20000458 	.word	0x20000458
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	20000418 	.word	0x20000418
 8000f70:	200004d4 	.word	0x200004d4
 8000f74:	40012400 	.word	0x40012400
 8000f78:	24000200 	.word	0x24000200
 8000f7c:	200004b0 	.word	0x200004b0
 8000f80:	40002800 	.word	0x40002800
 8000f84:	200000d0 	.word	0x200000d0
 8000f88:	2000003c 	.word	0x2000003c
 8000f8c:	200000a0 	.word	0x200000a0
 8000f90:	20000040 	.word	0x20000040
 8000f94:	20000070 	.word	0x20000070
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	2000003a 	.word	0x2000003a
 8000fa0:	040000fa 	.word	0x040000fa
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	04fa0000 	.word	0x04fa0000
 8000fac:	20000038 	.word	0x20000038
 8000fb0:	20000036 	.word	0x20000036
 8000fb4:	20000035 	.word	0x20000035
 8000fb8:	20000034 	.word	0x20000034
 8000fbc:	20000100 	.word	0x20000100
			  if (toggler) {
 8000fc0:	9b00      	ldr	r3, [sp, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <main+0x408>
				  time_pattern[shifted_hours] = hour_color;
 8000fc8:	20fa      	movs	r0, #250	@ 0xfa
 8000fca:	5460      	strb	r0, [r4, r1]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	7091      	strb	r1, [r2, #2]
			  toggler = !toggler;
 8000fd0:	465a      	mov	r2, fp
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	9a00      	ldr	r2, [sp, #0]
 8000fd6:	7013      	strb	r3, [r2, #0]
 8000fd8:	e791      	b.n	8000efe <main+0x336>
 8000fda:	26c8      	movs	r6, #200	@ 0xc8
 8000fdc:	e005      	b.n	8000fea <main+0x422>
			  if (x >= 200) {
 8000fde:	3e01      	subs	r6, #1
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d03a      	beq.n	800105a <main+0x492>
			  HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 fafd 	bl	80015e4 <HAL_Delay>
		  while (HAL_GPIO_ReadPin(Button_R_GPIO_Port, Button_R_Pin)) {
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	20a0      	movs	r0, #160	@ 0xa0
 8000fee:	00c9      	lsls	r1, r1, #3
 8000ff0:	05c0      	lsls	r0, r0, #23
 8000ff2:	f001 f813 	bl	800201c <HAL_GPIO_ReadPin>
 8000ff6:	9006      	str	r0, [sp, #24]
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d1f0      	bne.n	8000fde <main+0x416>
			  if (shifted_hours==shifted_minutes) {
 8000ffc:	9b02      	ldr	r3, [sp, #8]
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	9b03      	ldr	r3, [sp, #12]
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d036      	beq.n	8001076 <main+0x4ae>
				  time_pattern[shifted_hours] = hour_color;
 8001008:	493b      	ldr	r1, [pc, #236]	@ (80010f8 <main+0x530>)
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	50a1      	str	r1, [r4, r2]
				  time_pattern[shifted_minutes] = minut_color;
 800100e:	4a3b      	ldr	r2, [pc, #236]	@ (80010fc <main+0x534>)
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	50e2      	str	r2, [r4, r3]
				  turn_spec_LEDs(leds, time_pattern);
 8001014:	0021      	movs	r1, r4
 8001016:	0038      	movs	r0, r7
 8001018:	f7ff fbae 	bl	8000778 <turn_spec_LEDs>
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 800101c:	9e06      	ldr	r6, [sp, #24]
 800101e:	4653      	mov	r3, sl
 8001020:	003a      	movs	r2, r7
 8001022:	0031      	movs	r1, r6
 8001024:	0028      	movs	r0, r5
 8001026:	f001 ffa9 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
				  HAL_Delay(5000);
 800102a:	4835      	ldr	r0, [pc, #212]	@ (8001100 <main+0x538>)
 800102c:	f000 fada 	bl	80015e4 <HAL_Delay>
				  turn_spec_LEDs(leds, null_pattern);
 8001030:	0038      	movs	r0, r7
 8001032:	9901      	ldr	r1, [sp, #4]
 8001034:	f7ff fba0 	bl	8000778 <turn_spec_LEDs>
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8001038:	4653      	mov	r3, sl
 800103a:	003a      	movs	r2, r7
 800103c:	0031      	movs	r1, r6
 800103e:	0028      	movs	r0, r5
 8001040:	f001 ff9c 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
				  HAL_Delay(50);
 8001044:	2032      	movs	r0, #50	@ 0x32
 8001046:	f000 facd 	bl	80015e4 <HAL_Delay>
		  	  showingLeds = false;
 800104a:	2300      	movs	r3, #0
 800104c:	9a04      	ldr	r2, [sp, #16]
 800104e:	7013      	strb	r3, [r2, #0]
 8001050:	e744      	b.n	8000edc <main+0x314>
	  } else if (i%3==1) {
 8001052:	2300      	movs	r3, #0
 8001054:	4652      	mov	r2, sl
 8001056:	0019      	movs	r1, r3
 8001058:	e6e4      	b.n	8000e24 <main+0x25c>
				  changeTime = true;
 800105a:	465a      	mov	r2, fp
 800105c:	9b05      	ldr	r3, [sp, #20]
				  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800105e:	4648      	mov	r0, r9
				  changeTime = true;
 8001060:	701a      	strb	r2, [r3, #0]
				  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001062:	f001 fe19 	bl	8002c98 <HAL_RTCEx_DeactivateWakeUpTimer>
				  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001066:	464b      	mov	r3, r9
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <main+0x53c>)
 800106c:	68ca      	ldr	r2, [r1, #12]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	4313      	orrs	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
		  if (!shouldExitIf) {
 8001074:	e732      	b.n	8000edc <main+0x314>
 8001076:	2605      	movs	r6, #5
 8001078:	e034      	b.n	80010e4 <main+0x51c>
						  time_pattern[shifted_hours] = hour_color;
 800107a:	9a02      	ldr	r2, [sp, #8]
 800107c:	491e      	ldr	r1, [pc, #120]	@ (80010f8 <main+0x530>)
 800107e:	8812      	ldrh	r2, [r2, #0]
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	50a1      	str	r1, [r4, r2]
					  toggler = !toggler;
 8001084:	465a      	mov	r2, fp
 8001086:	4053      	eors	r3, r2
 8001088:	9a00      	ldr	r2, [sp, #0]
					  turn_spec_LEDs(leds, time_pattern);
 800108a:	0021      	movs	r1, r4
 800108c:	0038      	movs	r0, r7
					  toggler = !toggler;
 800108e:	7013      	strb	r3, [r2, #0]
					  turn_spec_LEDs(leds, time_pattern);
 8001090:	f7ff fb72 	bl	8000778 <turn_spec_LEDs>
					  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8001094:	4653      	mov	r3, sl
 8001096:	003a      	movs	r2, r7
 8001098:	2100      	movs	r1, #0
 800109a:	0028      	movs	r0, r5
 800109c:	f001 ff6e 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
					  HAL_Delay(500);
 80010a0:	20fa      	movs	r0, #250	@ 0xfa
 80010a2:	0040      	lsls	r0, r0, #1
 80010a4:	f000 fa9e 	bl	80015e4 <HAL_Delay>
					  turn_spec_LEDs(leds, null_pattern);
 80010a8:	0038      	movs	r0, r7
 80010aa:	9901      	ldr	r1, [sp, #4]
 80010ac:	f7ff fb64 	bl	8000778 <turn_spec_LEDs>
					  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 80010b0:	4653      	mov	r3, sl
 80010b2:	003a      	movs	r2, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	0028      	movs	r0, r5
 80010b8:	f001 ff60 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
					  HAL_Delay(500);
 80010bc:	20fa      	movs	r0, #250	@ 0xfa
 80010be:	0040      	lsls	r0, r0, #1
 80010c0:	f000 fa90 	bl	80015e4 <HAL_Delay>
					  clear_LEDs(leds, MAX_LED);
 80010c4:	210c      	movs	r1, #12
 80010c6:	0038      	movs	r0, r7
 80010c8:	f7ff fafe 	bl	80006c8 <clear_LEDs>
					  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 80010cc:	4653      	mov	r3, sl
 80010ce:	003a      	movs	r2, r7
 80010d0:	2100      	movs	r1, #0
 80010d2:	0028      	movs	r0, r5
 80010d4:	f001 ff52 	bl	8002f7c <HAL_TIM_PWM_Start_DMA>
				  for (int i = 0; i < 5; i++) {
 80010d8:	3e01      	subs	r6, #1
					  HAL_Delay(50);
 80010da:	2032      	movs	r0, #50	@ 0x32
 80010dc:	f000 fa82 	bl	80015e4 <HAL_Delay>
				  for (int i = 0; i < 5; i++) {
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d0b2      	beq.n	800104a <main+0x482>
					  if (toggler) {
 80010e4:	9b00      	ldr	r3, [sp, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1c6      	bne.n	800107a <main+0x4b2>
						  time_pattern[shifted_minutes] = minut_color;
 80010ec:	9a03      	ldr	r2, [sp, #12]
 80010ee:	4903      	ldr	r1, [pc, #12]	@ (80010fc <main+0x534>)
 80010f0:	8812      	ldrh	r2, [r2, #0]
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	50a1      	str	r1, [r4, r2]
 80010f6:	e7c5      	b.n	8001084 <main+0x4bc>
 80010f8:	040000fa 	.word	0x040000fa
 80010fc:	04fa0000 	.word	0x04fa0000
 8001100:	00001388 	.word	0x00001388
 8001104:	fffffb7f 	.word	0xfffffb7f

08001108 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001108:	b510      	push	{r4, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	0004      	movs	r4, r0
	SystemClock_Config();
 800110e:	f7ff fcff 	bl	8000b10 <SystemClock_Config>
	HAL_ResumeTick();
 8001112:	f000 fa81 	bl	8001618 <HAL_ResumeTick>
	HAL_PWR_DisableSleepOnExit();
 8001116:	f000 ffe5 	bl	80020e4 <HAL_PWR_DisableSleepOnExit>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800111a:	2101      	movs	r1, #1
 800111c:	4b3a      	ldr	r3, [pc, #232]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x100>)
 800111e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001120:	430a      	orrs	r2, r1
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	TIM2 ->CCR1 = 60;
 8001126:	223c      	movs	r2, #60	@ 0x3c
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001128:	400b      	ands	r3, r1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	9b01      	ldr	r3, [sp, #4]
	TIM2 ->CCR1 = 60;
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	635a      	str	r2, [r3, #52]	@ 0x34
	if (GPIO_Pin == Button_LB_Pin) {
 8001134:	2c02      	cmp	r4, #2
 8001136:	d023      	beq.n	8001180 <HAL_GPIO_EXTI_Callback+0x78>
    if (GPIO_Pin == Button_LT_Pin) {
 8001138:	2c01      	cmp	r4, #1
 800113a:	d00b      	beq.n	8001154 <HAL_GPIO_EXTI_Callback+0x4c>
    if (GPIO_Pin == Button_R_Pin) {
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	429c      	cmp	r4, r3
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
    	showingLeds = true;
 8001144:	4b31      	ldr	r3, [pc, #196]	@ (800120c <HAL_GPIO_EXTI_Callback+0x104>)
    	if (changeTime) {
 8001146:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x108>)
    	showingLeds = true;
 8001148:	7019      	strb	r1, [r3, #0]
    	if (changeTime) {
 800114a:	7811      	ldrb	r1, [r2, #0]
 800114c:	2900      	cmp	r1, #0
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_EXTI_Callback+0xaa>
}
 8001150:	b002      	add	sp, #8
 8001152:	bd10      	pop	{r4, pc}
		showingLeds = true;
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <HAL_GPIO_EXTI_Callback+0x104>)
 8001156:	701c      	strb	r4, [r3, #0]
		if (changeTime) {
 8001158:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x108>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f7      	beq.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
			minutes+=5;
 8001160:	4b2c      	ldr	r3, [pc, #176]	@ (8001214 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001162:	881c      	ldrh	r4, [r3, #0]
 8001164:	3405      	adds	r4, #5
 8001166:	b2a4      	uxth	r4, r4
 8001168:	801c      	strh	r4, [r3, #0]
			if (minutes >= 60) {
 800116a:	2c3b      	cmp	r4, #59	@ 0x3b
 800116c:	d938      	bls.n	80011e0 <HAL_GPIO_EXTI_Callback+0xd8>
				minutes = 0;
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
			shifted_minutes = minutes/5;
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_GPIO_EXTI_Callback+0x110>)
 8001174:	801a      	strh	r2, [r3, #0]
				time_pattern[11] = none;
 8001176:	4a29      	ldr	r2, [pc, #164]	@ (800121c <HAL_GPIO_EXTI_Callback+0x114>)
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x118>)
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (GPIO_Pin == Button_R_Pin) {
 800117e:	e7e7      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
		showingLeds = true;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <HAL_GPIO_EXTI_Callback+0x104>)
 8001182:	7019      	strb	r1, [r3, #0]
		if (changeTime) {
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x108>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0e1      	beq.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
			hours++;
 800118c:	4925      	ldr	r1, [pc, #148]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x11c>)
 800118e:	880b      	ldrh	r3, [r1, #0]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	b292      	uxth	r2, r2
 8001194:	800a      	strh	r2, [r1, #0]
			if (hours >= 12) {
 8001196:	2a0b      	cmp	r2, #11
 8001198:	d918      	bls.n	80011cc <HAL_GPIO_EXTI_Callback+0xc4>
				hours = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	2206      	movs	r2, #6
 800119e:	800b      	strh	r3, [r1, #0]
 80011a0:	3305      	adds	r3, #5
			shifted_hours = (hours<6) ? hours+6 : hours-6;
 80011a2:	4921      	ldr	r1, [pc, #132]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x120>)
 80011a4:	800a      	strh	r2, [r1, #0]
				time_pattern[shifted_hours-1] = none;
 80011a6:	491d      	ldr	r1, [pc, #116]	@ (800121c <HAL_GPIO_EXTI_Callback+0x114>)
 80011a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x118>)
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	5099      	str	r1, [r3, r2]
    if (GPIO_Pin == Button_R_Pin) {
 80011b0:	e7ce      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
    		changeTime = false;
 80011b2:	2100      	movs	r1, #0
 80011b4:	7011      	strb	r1, [r2, #0]
    		showingLeds = false;
 80011b6:	7019      	strb	r1, [r3, #0]
    		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 299, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80011b8:	212c      	movs	r1, #44	@ 0x2c
 80011ba:	2204      	movs	r2, #4
 80011bc:	481b      	ldr	r0, [pc, #108]	@ (800122c <HAL_GPIO_EXTI_Callback+0x124>)
 80011be:	31ff      	adds	r1, #255	@ 0xff
 80011c0:	f001 fcec 	bl	8002b9c <HAL_RTCEx_SetWakeUpTimer_IT>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d0c3      	beq.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
 80011c8:	b672      	cpsid	i
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HAL_GPIO_EXTI_Callback+0xc2>
			shifted_hours = (hours<6) ? hours+6 : hours-6;
 80011cc:	2a05      	cmp	r2, #5
 80011ce:	d917      	bls.n	8001200 <HAL_GPIO_EXTI_Callback+0xf8>
 80011d0:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x120>)
 80011d2:	3b05      	subs	r3, #5
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8013      	strh	r3, [r2, #0]
			if (shifted_hours == 0) {
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0cc      	beq.n	8001176 <HAL_GPIO_EXTI_Callback+0x6e>
				time_pattern[shifted_hours-1] = none;
 80011dc:	3b01      	subs	r3, #1
 80011de:	e7e2      	b.n	80011a6 <HAL_GPIO_EXTI_Callback+0x9e>
			shifted_minutes = minutes/5;
 80011e0:	2105      	movs	r1, #5
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7fe ff90 	bl	8000108 <__udivsi3>
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_GPIO_EXTI_Callback+0x110>)
 80011ea:	b280      	uxth	r0, r0
 80011ec:	8018      	strh	r0, [r3, #0]
			if (shifted_minutes == 0) {
 80011ee:	2c04      	cmp	r4, #4
 80011f0:	d9c1      	bls.n	8001176 <HAL_GPIO_EXTI_Callback+0x6e>
				time_pattern[shifted_minutes-1] = none;
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_GPIO_EXTI_Callback+0x114>)
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x118>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	3801      	subs	r0, #1
 80011fa:	0080      	lsls	r0, r0, #2
 80011fc:	50c2      	str	r2, [r0, r3]
    if (GPIO_Pin == Button_R_Pin) {
 80011fe:	e7a7      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
			shifted_hours = (hours<6) ? hours+6 : hours-6;
 8001200:	3307      	adds	r3, #7
 8001202:	b29a      	uxth	r2, r3
				time_pattern[shifted_hours-1] = none;
 8001204:	1e53      	subs	r3, r2, #1
 8001206:	e7cc      	b.n	80011a2 <HAL_GPIO_EXTI_Callback+0x9a>
 8001208:	40021000 	.word	0x40021000
 800120c:	20000036 	.word	0x20000036
 8001210:	20000035 	.word	0x20000035
 8001214:	20000004 	.word	0x20000004
 8001218:	20000000 	.word	0x20000000
 800121c:	2000003c 	.word	0x2000003c
 8001220:	200000a0 	.word	0x200000a0
 8001224:	20000002 	.word	0x20000002
 8001228:	2000003a 	.word	0x2000003a
 800122c:	200004b0 	.word	0x200004b0

08001230 <HAL_RTCEx_WakeUpTimerEventCallback>:
    minutes+=5;
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x90>)
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8001232:	b570      	push	{r4, r5, r6, lr}
    minutes+=5;
 8001234:	8818      	ldrh	r0, [r3, #0]
 8001236:	3005      	adds	r0, #5
 8001238:	b280      	uxth	r0, r0
 800123a:	8018      	strh	r0, [r3, #0]
	if (minutes >= 60) {
 800123c:	283b      	cmp	r0, #59	@ 0x3b
 800123e:	d909      	bls.n	8001254 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>
		minutes = 0;
 8001240:	2200      	movs	r2, #0
 8001242:	801a      	strh	r2, [r3, #0]
		shifted_minutes = 0;
 8001244:	2000      	movs	r0, #0
		time_pattern[11] = none;
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>)
 8001248:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
		shifted_minutes = 0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_RTCEx_WakeUpTimerEventCallback+0x9c>)
}
 8001250:	8018      	strh	r0, [r3, #0]
 8001252:	bd70      	pop	{r4, r5, r6, pc}
	} else if (minutes == 30) {
 8001254:	281e      	cmp	r0, #30
 8001256:	d00c      	beq.n	8001272 <HAL_RTCEx_WakeUpTimerEventCallback+0x42>
	if (minutes == 0) {
 8001258:	2800      	cmp	r0, #0
 800125a:	d0f3      	beq.n	8001244 <HAL_RTCEx_WakeUpTimerEventCallback+0x14>
 800125c:	4c1a      	ldr	r4, [pc, #104]	@ (80012c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 800125e:	4d19      	ldr	r5, [pc, #100]	@ (80012c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>)
		shifted_minutes = minutes/5;
 8001260:	2105      	movs	r1, #5
 8001262:	f7fe ff51 	bl	8000108 <__udivsi3>
 8001266:	b280      	uxth	r0, r0
		time_pattern[shifted_minutes-1] = none;
 8001268:	682a      	ldr	r2, [r5, #0]
 800126a:	1e43      	subs	r3, r0, #1
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	50e2      	str	r2, [r4, r3]
 8001270:	e7ed      	b.n	800124e <HAL_RTCEx_WakeUpTimerEventCallback+0x1e>
		hours++;
 8001272:	4917      	ldr	r1, [pc, #92]	@ (80012d0 <HAL_RTCEx_WakeUpTimerEventCallback+0xa0>)
 8001274:	880b      	ldrh	r3, [r1, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	b292      	uxth	r2, r2
 800127a:	800a      	strh	r2, [r1, #0]
		if (hours >= 12) {
 800127c:	2a0b      	cmp	r2, #11
 800127e:	d90b      	bls.n	8001298 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>
			hours = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	2206      	movs	r2, #6
 8001284:	800b      	strh	r3, [r1, #0]
 8001286:	3305      	adds	r3, #5
		shifted_hours = (hours<6) ? hours+6 : hours-6;
 8001288:	4912      	ldr	r1, [pc, #72]	@ (80012d4 <HAL_RTCEx_WakeUpTimerEventCallback+0xa4>)
 800128a:	800a      	strh	r2, [r1, #0]
			time_pattern[shifted_hours-1] = none;
 800128c:	4d0d      	ldr	r5, [pc, #52]	@ (80012c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>)
 800128e:	4c0e      	ldr	r4, [pc, #56]	@ (80012c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 8001290:	682a      	ldr	r2, [r5, #0]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	50e2      	str	r2, [r4, r3]
 8001296:	e7e3      	b.n	8001260 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>
		shifted_hours = (hours<6) ? hours+6 : hours-6;
 8001298:	2a05      	cmp	r2, #5
 800129a:	d90c      	bls.n	80012b6 <HAL_RTCEx_WakeUpTimerEventCallback+0x86>
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <HAL_RTCEx_WakeUpTimerEventCallback+0xa4>)
 800129e:	3b05      	subs	r3, #5
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	8013      	strh	r3, [r2, #0]
		if (shifted_hours == 0) {
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <HAL_RTCEx_WakeUpTimerEventCallback+0x82>
			time_pattern[11] = none;
 80012a8:	4d06      	ldr	r5, [pc, #24]	@ (80012c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>)
 80012aa:	4c07      	ldr	r4, [pc, #28]	@ (80012c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012b0:	e7d6      	b.n	8001260 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>
			time_pattern[shifted_hours-1] = none;
 80012b2:	3b01      	subs	r3, #1
 80012b4:	e7ea      	b.n	800128c <HAL_RTCEx_WakeUpTimerEventCallback+0x5c>
		shifted_hours = (hours<6) ? hours+6 : hours-6;
 80012b6:	3307      	adds	r3, #7
 80012b8:	b29a      	uxth	r2, r3
			time_pattern[shifted_hours-1] = none;
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	e7e4      	b.n	8001288 <HAL_RTCEx_WakeUpTimerEventCallback+0x58>
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	20000004 	.word	0x20000004
 80012c4:	2000003c 	.word	0x2000003c
 80012c8:	200000a0 	.word	0x200000a0
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000002 	.word	0x20000002
 80012d4:	2000003a 	.word	0x2000003a

080012d8 <Error_Handler>:
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x2>

080012dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	2101      	movs	r1, #1
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_MspInit+0x18>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80012ea:	0552      	lsls	r2, r2, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f0:	4770      	bx	lr
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	0004      	movs	r4, r0
 80012fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a802      	add	r0, sp, #8
 8001304:	f002 f928 	bl	8003558 <memset>
  if(hadc->Instance==ADC1)
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_ADC_MspInit+0x4c>)
 800130a:	6822      	ldr	r2, [r4, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001310:	b008      	add	sp, #32
 8001312:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_ADC_MspInit+0x50>)
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 800131c:	480b      	ldr	r0, [pc, #44]	@ (800134c <HAL_ADC_MspInit+0x54>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2202      	movs	r2, #2
 8001324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001326:	4311      	orrs	r1, r2
 8001328:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 800132c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	401a      	ands	r2, r3
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BATT_Pin;
 8001334:	2202      	movs	r2, #2
 8001336:	2303      	movs	r3, #3
 8001338:	9202      	str	r2, [sp, #8]
 800133a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 800133c:	f000 fd78 	bl	8001e30 <HAL_GPIO_Init>
}
 8001340:	e7e6      	b.n	8001310 <HAL_ADC_MspInit+0x18>
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	40012400 	.word	0x40012400
 8001348:	40021000 	.word	0x40021000
 800134c:	50000400 	.word	0x50000400

08001350 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_RTC_MspInit+0x2c>)
 8001352:	6802      	ldr	r2, [r0, #0]
{
 8001354:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8001356:	429a      	cmp	r2, r3
 8001358:	d000      	beq.n	800135c <HAL_RTC_MspInit+0xc>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800135a:	bd10      	pop	{r4, pc}
    __HAL_RCC_RTC_ENABLE();
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_RTC_MspInit+0x30>)
 8001360:	02db      	lsls	r3, r3, #11
 8001362:	6d11      	ldr	r1, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001364:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001366:	430b      	orrs	r3, r1
 8001368:	6513      	str	r3, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 800136a:	2101      	movs	r1, #1
 800136c:	2200      	movs	r2, #0
 800136e:	f000 fc2f 	bl	8001bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001372:	2002      	movs	r0, #2
 8001374:	f000 fc56 	bl	8001c24 <HAL_NVIC_EnableIRQ>
}
 8001378:	e7ef      	b.n	800135a <HAL_RTC_MspInit+0xa>
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	40002800 	.word	0x40002800
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b510      	push	{r4, lr}
 8001386:	0004      	movs	r4, r0
 8001388:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	2214      	movs	r2, #20
 800138c:	2100      	movs	r1, #0
 800138e:	a802      	add	r0, sp, #8
 8001390:	f002 f8e2 	bl	8003558 <memset>
  if(hspi->Instance==SPI1)
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_SPI_MspInit+0x50>)
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800139c:	b008      	add	sp, #32
 800139e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a0:	2280      	movs	r2, #128	@ 0x80
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_SPI_MspInit+0x54>)
 80013a4:	0152      	lsls	r2, r2, #5
 80013a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013aa:	430a      	orrs	r2, r1
 80013ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2201      	movs	r2, #1
 80013b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4311      	orrs	r1, r2
 80013b6:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	401a      	ands	r2, r3
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013c2:	22f0      	movs	r2, #240	@ 0xf0
 80013c4:	2302      	movs	r3, #2
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f000 fd2f 	bl	8001e30 <HAL_GPIO_Init>
}
 80013d2:	e7e3      	b.n	800139c <HAL_SPI_MspInit+0x18>
 80013d4:	40013000 	.word	0x40013000
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	6802      	ldr	r2, [r0, #0]
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 80013e2:	05db      	lsls	r3, r3, #23
{
 80013e4:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM2)
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d000      	beq.n	80013ec <HAL_TIM_Base_MspInit+0x10>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ec:	2101      	movs	r1, #1
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_TIM_Base_MspInit+0x5c>)
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80013f0:	4d12      	ldr	r5, [pc, #72]	@ (800143c <HAL_TIM_Base_MspInit+0x60>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013f4:	0028      	movs	r0, r5
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_TIM_Base_MspInit+0x64>)
 80013fc:	602b      	str	r3, [r5, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 80013fe:	2308      	movs	r3, #8
 8001400:	606b      	str	r3, [r5, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001402:	3308      	adds	r3, #8
 8001404:	60ab      	str	r3, [r5, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60eb      	str	r3, [r5, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	3380      	adds	r3, #128	@ 0x80
 800140c:	612b      	str	r3, [r5, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800140e:	3381      	adds	r3, #129	@ 0x81
 8001410:	33ff      	adds	r3, #255	@ 0xff
 8001412:	616b      	str	r3, [r5, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	61ab      	str	r3, [r5, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800141a:	2320      	movs	r3, #32
 800141c:	61eb      	str	r3, [r5, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141e:	23c0      	movs	r3, #192	@ 0xc0
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001424:	f000 fc24 	bl	8001c70 <HAL_DMA_Init>
 8001428:	2800      	cmp	r0, #0
 800142a:	d102      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x56>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800142c:	6225      	str	r5, [r4, #32]
 800142e:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001430:	e7db      	b.n	80013ea <HAL_TIM_Base_MspInit+0xe>
      Error_Handler();
 8001432:	f7ff ff51 	bl	80012d8 <Error_Handler>
 8001436:	e7f9      	b.n	800142c <HAL_TIM_Base_MspInit+0x50>
 8001438:	40021000 	.word	0x40021000
 800143c:	200003d0 	.word	0x200003d0
 8001440:	40020058 	.word	0x40020058

08001444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001444:	b510      	push	{r4, lr}
 8001446:	0004      	movs	r4, r0
 8001448:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	2214      	movs	r2, #20
 800144c:	2100      	movs	r1, #0
 800144e:	a802      	add	r0, sp, #8
 8001450:	f002 f882 	bl	8003558 <memset>
  if(htim->Instance==TIM2)
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800145e:	b008      	add	sp, #32
 8001460:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2301      	movs	r3, #1
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001466:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 800146a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4319      	orrs	r1, r3
 800146e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001470:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001472:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4013      	ands	r3, r2
 8001476:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = DIN_Pin;
 8001478:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DIN_Pin;
 800147c:	2302      	movs	r3, #2
 800147e:	0212      	lsls	r2, r2, #8
 8001480:	9202      	str	r2, [sp, #8]
 8001482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001484:	2305      	movs	r3, #5
 8001486:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001488:	f000 fcd2 	bl	8001e30 <HAL_GPIO_Init>
}
 800148c:	e7e7      	b.n	800145e <HAL_TIM_MspPostInit+0x1a>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	40021000 	.word	0x40021000

08001494 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler>
 8001496:	46c0      	nop			@ (mov r8, r8)

08001498 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <HardFault_Handler>
 800149a:	46c0      	nop			@ (mov r8, r8)

0800149c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800149c:	4770      	bx	lr
 800149e:	46c0      	nop			@ (mov r8, r8)

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80014a0:	4770      	bx	lr
 80014a2:	46c0      	nop			@ (mov r8, r8)

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f88b 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bd10      	pop	{r4, pc}

080014ac <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80014ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014ae:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <RTC_IRQHandler+0xc>)
 80014b0:	f001 fc3c 	bl	8002d2c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	200004b0 	.word	0x200004b0

080014bc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80014bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_LT_Pin);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 fdb2 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_LB_Pin);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f000 fdaf 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80014ca:	bd10      	pop	{r4, pc}

080014cc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80014cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 80014ce:	2008      	movs	r0, #8
 80014d0:	f000 fdaa 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80014d4:	bd10      	pop	{r4, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)

080014d8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_R_Pin);
 80014d8:	2080      	movs	r0, #128	@ 0x80
{
 80014da:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(Button_R_Pin);
 80014dc:	00c0      	lsls	r0, r0, #3
 80014de:	f000 fda3 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80014e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80014e6:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80014e8:	f000 fc52 	bl	8001d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80014ec:	bd10      	pop	{r4, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	200003d0 	.word	0x200003d0

080014f4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	4770      	bx	lr
 80014f6:	46c0      	nop			@ (mov r8, r8)

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80014fa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014fc:	f7ff fffa 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <LoopForever+0x6>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	@ (8001538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <LoopForever+0xe>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	@ (8001544 <LoopForever+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 f81f 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fb4d 	bl	8000bc8 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
   ldr   r0, =_estack
 8001530:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800153c:	080035f4 	.word	0x080035f4
  ldr r2, =_sbss
 8001540:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001544:	20000534 	.word	0x20000534

08001548 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_COMP_IRQHandler>
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	20fa      	movs	r0, #250	@ 0xfa
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_InitTick+0x40>)
 8001554:	0080      	lsls	r0, r0, #2
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	f7fe fdd6 	bl	8000108 <__udivsi3>
 800155c:	4d0c      	ldr	r5, [pc, #48]	@ (8001590 <HAL_InitTick+0x44>)
 800155e:	0001      	movs	r1, r0
 8001560:	6828      	ldr	r0, [r5, #0]
 8001562:	f7fe fdd1 	bl	8000108 <__udivsi3>
 8001566:	f000 fb69 	bl	8001c3c <HAL_SYSTICK_Config>
 800156a:	2800      	cmp	r0, #0
 800156c:	d10c      	bne.n	8001588 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800156e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	2c03      	cmp	r4, #3
 8001572:	d900      	bls.n	8001576 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001574:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001576:	3802      	subs	r0, #2
 8001578:	2200      	movs	r2, #0
 800157a:	0021      	movs	r1, r4
 800157c:	f000 fb28 	bl	8001bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <HAL_InitTick+0x48>)
 8001582:	2000      	movs	r0, #0
 8001584:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001586:	e7f5      	b.n	8001574 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
 800158a:	e7f3      	b.n	8001574 <HAL_InitTick+0x28>
 800158c:	20000010 	.word	0x20000010
 8001590:	2000000c 	.word	0x2000000c
 8001594:	20000014 	.word	0x20000014

08001598 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001598:	2140      	movs	r1, #64	@ 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	@ (80015bc <HAL_Init+0x24>)
{
 800159c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800159e:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a0:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015a2:	430b      	orrs	r3, r1
 80015a4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	f7ff ffd1 	bl	800154c <HAL_InitTick>
 80015aa:	1e04      	subs	r4, r0, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80015ae:	2401      	movs	r4, #1
}
 80015b0:	0020      	movs	r0, r4
 80015b2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80015b4:	f7ff fe92 	bl	80012dc <HAL_MspInit>
 80015b8:	e7fa      	b.n	80015b0 <HAL_Init+0x18>
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015c0:	4a03      	ldr	r2, [pc, #12]	@ (80015d0 <HAL_IncTick+0x10>)
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <HAL_IncTick+0x14>)
 80015c4:	6811      	ldr	r1, [r2, #0]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	185b      	adds	r3, r3, r1
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	4770      	bx	lr
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	20000530 	.word	0x20000530
 80015d4:	20000010 	.word	0x20000010

080015d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015d8:	4b01      	ldr	r3, [pc, #4]	@ (80015e0 <HAL_GetTick+0x8>)
 80015da:	6818      	ldr	r0, [r3, #0]
}
 80015dc:	4770      	bx	lr
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	20000530 	.word	0x20000530

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff fff6 	bl	80015d8 <HAL_GetTick>
 80015ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	1c63      	adds	r3, r4, #1
 80015f0:	d002      	beq.n	80015f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_Delay+0x20>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	1b40      	subs	r0, r0, r5
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d3fa      	bcc.n	80015f8 <HAL_Delay+0x14>
  {
  }
}
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	20000010 	.word	0x20000010

08001608 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001608:	2102      	movs	r1, #2
 800160a:	4a02      	ldr	r2, [pc, #8]	@ (8001614 <HAL_SuspendTick+0xc>)
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	438b      	bics	r3, r1
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	4770      	bx	lr
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001618:	2102      	movs	r1, #2
 800161a:	4a02      	ldr	r2, [pc, #8]	@ (8001624 <HAL_ResumeTick+0xc>)
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	430b      	orrs	r3, r1
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	4770      	bx	lr
 8001624:	e000e010 	.word	0xe000e010

08001628 <ADC_Disable>:
  uint32_t tickstart = 0U;

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001628:	2103      	movs	r1, #3
 800162a:	6802      	ldr	r2, [r0, #0]
{
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800162e:	6893      	ldr	r3, [r2, #8]
{
 8001630:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001632:	400b      	ands	r3, r1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d001      	beq.n	800163c <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001638:	2000      	movs	r0, #0
}
 800163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800163c:	6810      	ldr	r0, [r2, #0]
 800163e:	4203      	tst	r3, r0
 8001640:	d0fa      	beq.n	8001638 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001642:	2705      	movs	r7, #5
 8001644:	6890      	ldr	r0, [r2, #8]
 8001646:	4007      	ands	r7, r0
 8001648:	2f01      	cmp	r7, #1
 800164a:	d008      	beq.n	800165e <ADC_Disable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164c:	2110      	movs	r1, #16
 800164e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001650:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001652:	430a      	orrs	r2, r1
 8001654:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001658:	4313      	orrs	r3, r2
 800165a:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800165c:	e7ed      	b.n	800163a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800165e:	2002      	movs	r0, #2
 8001660:	6893      	ldr	r3, [r2, #8]
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001662:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 8001664:	4303      	orrs	r3, r0
 8001666:	6093      	str	r3, [r2, #8]
 8001668:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 800166a:	f7ff ffb5 	bl	80015d8 <HAL_GetTick>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800166e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001670:	0006      	movs	r6, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	421f      	tst	r7, r3
 8001676:	d0df      	beq.n	8001638 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001678:	f7ff ffae 	bl	80015d8 <HAL_GetTick>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800167c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800167e:	1b80      	subs	r0, r0, r6
 8001680:	280a      	cmp	r0, #10
 8001682:	d902      	bls.n	800168a <ADC_Disable+0x62>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	4215      	tst	r5, r2
 8001688:	d103      	bne.n	8001692 <ADC_Disable+0x6a>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	421d      	tst	r5, r3
 800168e:	d1f3      	bne.n	8001678 <ADC_Disable+0x50>
 8001690:	e7d2      	b.n	8001638 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001692:	2210      	movs	r2, #16
 8001694:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001696:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001698:	4313      	orrs	r3, r2
 800169a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800169e:	432b      	orrs	r3, r5
 80016a0:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80016a2:	e7ca      	b.n	800163a <ADC_Disable+0x12>

080016a4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	2303      	movs	r3, #3
{
 80016a6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a8:	6802      	ldr	r2, [r0, #0]
{
 80016aa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ac:	6891      	ldr	r1, [r2, #8]
{
 80016ae:	b082      	sub	sp, #8
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b0:	400b      	ands	r3, r1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d02d      	beq.n	8001712 <ADC_Enable+0x6e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016b6:	6891      	ldr	r1, [r2, #8]
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <ADC_Enable+0xa4>)
 80016ba:	4219      	tst	r1, r3
 80016bc:	d130      	bne.n	8001720 <ADC_Enable+0x7c>
    __HAL_ADC_ENABLE(hadc);
 80016be:	2101      	movs	r1, #1
 80016c0:	6893      	ldr	r3, [r2, #8]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6093      	str	r3, [r2, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <ADC_Enable+0xa8>)
 80016c8:	4921      	ldr	r1, [pc, #132]	@ (8001750 <ADC_Enable+0xac>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f7fe fd1c 	bl	8000108 <__udivsi3>
 80016d0:	9001      	str	r0, [sp, #4]

  while (waitLoopIndex != 0U)
 80016d2:	9b01      	ldr	r3, [sp, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <ADC_Enable+0x40>
  {
    waitLoopIndex--;
 80016d8:	9b01      	ldr	r3, [sp, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <ADC_Enable+0x34>
    tickstart = HAL_GetTick();
 80016e4:	f7ff ff78 	bl	80015d8 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016e8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80016ea:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ec:	681b      	ldr	r3, [r3, #0]
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ee:	2501      	movs	r5, #1
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016f0:	07db      	lsls	r3, r3, #31
 80016f2:	d40b      	bmi.n	800170c <ADC_Enable+0x68>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016f4:	f7ff ff70 	bl	80015d8 <HAL_GetTick>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	280a      	cmp	r0, #10
 80016fe:	d902      	bls.n	8001706 <ADC_Enable+0x62>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4215      	tst	r5, r2
 8001704:	d016      	beq.n	8001734 <ADC_Enable+0x90>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	421d      	tst	r5, r3
 800170a:	d0f3      	beq.n	80016f4 <ADC_Enable+0x50>
  return HAL_OK;
 800170c:	2000      	movs	r0, #0
}
 800170e:	b002      	add	sp, #8
 8001710:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	420b      	tst	r3, r1
 8001716:	d1f9      	bne.n	800170c <ADC_Enable+0x68>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001718:	6891      	ldr	r1, [r2, #8]
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <ADC_Enable+0xa4>)
 800171c:	4219      	tst	r1, r3
 800171e:	d0ce      	beq.n	80016be <ADC_Enable+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	2210      	movs	r2, #16
 8001722:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	4313      	orrs	r3, r2
 8001728:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800172c:	3a0f      	subs	r2, #15
 800172e:	4313      	orrs	r3, r2
 8001730:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8001732:	e7ec      	b.n	800170e <ADC_Enable+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	2210      	movs	r2, #16
 8001736:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	4313      	orrs	r3, r2
 800173c:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001740:	432b      	orrs	r3, r5
 8001742:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8001744:	e7e3      	b.n	800170e <ADC_Enable+0x6a>
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	80000017 	.word	0x80000017
 800174c:	2000000c 	.word	0x2000000c
 8001750:	000f4240 	.word	0x000f4240

08001754 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001754:	2204      	movs	r2, #4
 8001756:	6803      	ldr	r3, [r0, #0]
{
 8001758:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800175a:	6899      	ldr	r1, [r3, #8]
{
 800175c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800175e:	420a      	tst	r2, r1
 8001760:	d01d      	beq.n	800179e <ADC_ConversionStop+0x4a>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001762:	6899      	ldr	r1, [r3, #8]
 8001764:	420a      	tst	r2, r1
 8001766:	d006      	beq.n	8001776 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8001768:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800176a:	0792      	lsls	r2, r2, #30
 800176c:	d403      	bmi.n	8001776 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800176e:	2110      	movs	r1, #16
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001776:	f7ff ff2f 	bl	80015d8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800177a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800177c:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	075b      	lsls	r3, r3, #29
 8001782:	d50c      	bpl.n	800179e <ADC_ConversionStop+0x4a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001784:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001786:	f7ff ff27 	bl	80015d8 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800178a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178c:	1b80      	subs	r0, r0, r6
 800178e:	280a      	cmp	r0, #10
 8001790:	d902      	bls.n	8001798 <ADC_ConversionStop+0x44>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4215      	tst	r5, r2
 8001796:	d104      	bne.n	80017a2 <ADC_ConversionStop+0x4e>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	421d      	tst	r5, r3
 800179c:	d1f3      	bne.n	8001786 <ADC_ConversionStop+0x32>
  return HAL_OK;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	2210      	movs	r2, #16
 80017a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	4313      	orrs	r3, r2
 80017aa:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017ae:	3a0f      	subs	r2, #15
 80017b0:	4313      	orrs	r3, r2
 80017b2:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80017b4:	e7f4      	b.n	80017a0 <ADC_ConversionStop+0x4c>
 80017b6:	46c0      	nop			@ (mov r8, r8)

080017b8 <HAL_ADC_Init>:
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 80017bc:	d036      	beq.n	800182c <HAL_ADC_Init+0x74>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017be:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <HAL_ADC_Init+0xe>
 80017c4:	e09a      	b.n	80018fc <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017c8:	06db      	lsls	r3, r3, #27
 80017ca:	d428      	bmi.n	800181e <HAL_ADC_Init+0x66>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017d0:	0752      	lsls	r2, r2, #29
 80017d2:	d424      	bmi.n	800181e <HAL_ADC_Init+0x66>
  ADC_STATE_CLR_SET(hadc->State,
 80017d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017d6:	4960      	ldr	r1, [pc, #384]	@ (8001958 <HAL_ADC_Init+0x1a0>)
 80017d8:	400a      	ands	r2, r1
 80017da:	3106      	adds	r1, #6
 80017dc:	31ff      	adds	r1, #255	@ 0xff
 80017de:	430a      	orrs	r2, r1
 80017e0:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e2:	2203      	movs	r2, #3
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	400a      	ands	r2, r1
 80017e8:	2a01      	cmp	r2, #1
 80017ea:	d100      	bne.n	80017ee <HAL_ADC_Init+0x36>
 80017ec:	e0a0      	b.n	8001930 <HAL_ADC_Init+0x178>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80017ee:	2080      	movs	r0, #128	@ 0x80
 80017f0:	6861      	ldr	r1, [r4, #4]
 80017f2:	05c0      	lsls	r0, r0, #23
 80017f4:	004a      	lsls	r2, r1, #1
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	4282      	cmp	r2, r0
 80017fa:	d019      	beq.n	8001830 <HAL_ADC_Init+0x78>
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	0612      	lsls	r2, r2, #24
 8001800:	4291      	cmp	r1, r2
 8001802:	d015      	beq.n	8001830 <HAL_ADC_Init+0x78>
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	4d55      	ldr	r5, [pc, #340]	@ (800195c <HAL_ADC_Init+0x1a4>)
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	0892      	lsrs	r2, r2, #2
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	4a54      	ldr	r2, [pc, #336]	@ (8001960 <HAL_ADC_Init+0x1a8>)
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	4028      	ands	r0, r5
 8001814:	6010      	str	r0, [r2, #0]
 8001816:	6810      	ldr	r0, [r2, #0]
 8001818:	4301      	orrs	r1, r0
 800181a:	6011      	str	r1, [r2, #0]
 800181c:	e00f      	b.n	800183e <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	2210      	movs	r2, #16
 8001820:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001822:	4313      	orrs	r3, r2
 8001824:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8001826:	2200      	movs	r2, #0
 8001828:	2350      	movs	r3, #80	@ 0x50
 800182a:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	0892      	lsrs	r2, r2, #2
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	430a      	orrs	r2, r1
 800183c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800183e:	2118      	movs	r1, #24
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	438a      	bics	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	68a1      	ldr	r1, [r4, #8]
 800184a:	430a      	orrs	r2, r1
 800184c:	60da      	str	r2, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800184e:	4944      	ldr	r1, [pc, #272]	@ (8001960 <HAL_ADC_Init+0x1a8>)
 8001850:	4844      	ldr	r0, [pc, #272]	@ (8001964 <HAL_ADC_Init+0x1ac>)
 8001852:	680a      	ldr	r2, [r1, #0]
 8001854:	4002      	ands	r2, r0
 8001856:	600a      	str	r2, [r1, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001858:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800185a:	6808      	ldr	r0, [r1, #0]
 800185c:	0652      	lsls	r2, r2, #25
 800185e:	4302      	orrs	r2, r0
 8001860:	600a      	str	r2, [r1, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	0552      	lsls	r2, r2, #21
 8001868:	4211      	tst	r1, r2
 800186a:	d04d      	beq.n	8001908 <HAL_ADC_Init+0x150>
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	493e      	ldr	r1, [pc, #248]	@ (8001968 <HAL_ADC_Init+0x1b0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001870:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001872:	400a      	ands	r2, r1
 8001874:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001876:	2220      	movs	r2, #32
 8001878:	5ca0      	ldrb	r0, [r4, r2]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800187a:	68e2      	ldr	r2, [r4, #12]
 800187c:	68d9      	ldr	r1, [r3, #12]
 800187e:	432a      	orrs	r2, r5
 8001880:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001882:	69a1      	ldr	r1, [r4, #24]
 8001884:	0389      	lsls	r1, r1, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001886:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001888:	69e1      	ldr	r1, [r4, #28]
 800188a:	03c9      	lsls	r1, r1, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800188c:	430a      	orrs	r2, r1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800188e:	0341      	lsls	r1, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001890:	430a      	orrs	r2, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001892:	212c      	movs	r1, #44	@ 0x2c
 8001894:	5c61      	ldrb	r1, [r4, r1]
 8001896:	0049      	lsls	r1, r1, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001898:	430a      	orrs	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800189a:	6921      	ldr	r1, [r4, #16]
 800189c:	3902      	subs	r1, #2
 800189e:	424d      	negs	r5, r1
 80018a0:	4169      	adcs	r1, r5
 80018a2:	0089      	lsls	r1, r1, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80018a4:	430a      	orrs	r2, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a6:	21c2      	movs	r1, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80018a8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80018ac:	31ff      	adds	r1, #255	@ 0xff
 80018ae:	428a      	cmp	r2, r1
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80018b2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	432a      	orrs	r2, r5
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018bc:	2221      	movs	r2, #33	@ 0x21
 80018be:	5ca2      	ldrb	r2, [r4, r2]
 80018c0:	2a01      	cmp	r2, #1
 80018c2:	d039      	beq.n	8001938 <HAL_ADC_Init+0x180>
  if (hadc->Init.OversamplingMode == ENABLE)
 80018c4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80018c6:	2901      	cmp	r1, #1
 80018c8:	d022      	beq.n	8001910 <HAL_ADC_Init+0x158>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80018ca:	2201      	movs	r2, #1
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	420a      	tst	r2, r1
 80018d0:	d002      	beq.n	80018d8 <HAL_ADC_Init+0x120>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80018d2:	6919      	ldr	r1, [r3, #16]
 80018d4:	4391      	bics	r1, r2
 80018d6:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80018d8:	2107      	movs	r1, #7
 80018da:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 80018dc:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80018de:	438a      	bics	r2, r1
 80018e0:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80018e6:	430a      	orrs	r2, r1
 80018e8:	615a      	str	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80018ea:	2300      	movs	r3, #0
  ADC_STATE_CLR_SET(hadc->State,
 80018ec:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	65a3      	str	r3, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80018f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018f2:	4393      	bics	r3, r2
 80018f4:	3a02      	subs	r2, #2
 80018f6:	4313      	orrs	r3, r2
 80018f8:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 80018fa:	e798      	b.n	800182e <HAL_ADC_Init+0x76>
    hadc->Lock = HAL_UNLOCKED;
 80018fc:	2250      	movs	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001900:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001902:	f7ff fcf9 	bl	80012f8 <HAL_ADC_MspInit>
 8001906:	e75e      	b.n	80017c6 <HAL_ADC_Init+0xe>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	e7ad      	b.n	800186c <HAL_ADC_Init+0xb4>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	4816      	ldr	r0, [pc, #88]	@ (800196c <HAL_ADC_Init+0x1b4>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001914:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001916:	4002      	ands	r2, r0
 8001918:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800191a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800191c:	6918      	ldr	r0, [r3, #16]
 800191e:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 8001920:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8001922:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001924:	4302      	orrs	r2, r0
 8001926:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	e7d3      	b.n	80018d8 <HAL_ADC_Init+0x120>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	420a      	tst	r2, r1
 8001934:	d18b      	bne.n	800184e <HAL_ADC_Init+0x96>
 8001936:	e75a      	b.n	80017ee <HAL_ADC_Init+0x36>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001938:	2800      	cmp	r0, #0
 800193a:	d105      	bne.n	8001948 <HAL_ADC_Init+0x190>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800193c:	2280      	movs	r2, #128	@ 0x80
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	0252      	lsls	r2, r2, #9
 8001942:	430a      	orrs	r2, r1
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	e7bd      	b.n	80018c4 <HAL_ADC_Init+0x10c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	2020      	movs	r0, #32
 800194a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800194c:	4301      	orrs	r1, r0
 800194e:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001952:	430a      	orrs	r2, r1
 8001954:	65a2      	str	r2, [r4, #88]	@ 0x58
 8001956:	e7b5      	b.n	80018c4 <HAL_ADC_Init+0x10c>
 8001958:	fffffefd 	.word	0xfffffefd
 800195c:	ffc3ffff 	.word	0xffc3ffff
 8001960:	40012708 	.word	0x40012708
 8001964:	fdffffff 	.word	0xfdffffff
 8001968:	fffe0219 	.word	0xfffe0219
 800196c:	fffffc03 	.word	0xfffffc03

08001970 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001970:	6803      	ldr	r3, [r0, #0]
{
 8001972:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001974:	689a      	ldr	r2, [r3, #8]
{
 8001976:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001978:	0752      	lsls	r2, r2, #29
 800197a:	d421      	bmi.n	80019c0 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800197c:	2250      	movs	r2, #80	@ 0x50
 800197e:	5c81      	ldrb	r1, [r0, r2]
 8001980:	2901      	cmp	r1, #1
 8001982:	d01d      	beq.n	80019c0 <HAL_ADC_Start+0x50>
 8001984:	2101      	movs	r1, #1
 8001986:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001988:	69c2      	ldr	r2, [r0, #28]
 800198a:	2a01      	cmp	r2, #1
 800198c:	d112      	bne.n	80019b4 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800198e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001990:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001992:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001994:	4011      	ands	r1, r2
 8001996:	2280      	movs	r2, #128	@ 0x80
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 800199e:	2150      	movs	r1, #80	@ 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 80019a0:	2200      	movs	r2, #0
 80019a2:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 80019a4:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019a6:	321c      	adds	r2, #28
 80019a8:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	394c      	subs	r1, #76	@ 0x4c
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80019b4:	f7ff fe76 	bl	80016a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1fa      	bne.n	80019b2 <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	e7e6      	b.n	800198e <HAL_ADC_Start+0x1e>
    __HAL_LOCK(hadc);
 80019c0:	2002      	movs	r0, #2
 80019c2:	e7f6      	b.n	80019b2 <HAL_ADC_Start+0x42>
 80019c4:	fffff0fe 	.word	0xfffff0fe

080019c8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80019c8:	2350      	movs	r3, #80	@ 0x50
{
 80019ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80019cc:	5cc2      	ldrb	r2, [r0, r3]
{
 80019ce:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d014      	beq.n	80019fe <HAL_ADC_Stop+0x36>
 80019d4:	2501      	movs	r5, #1
 80019d6:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019d8:	f7ff febc 	bl	8001754 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80019dc:	2800      	cmp	r0, #0
 80019de:	d003      	beq.n	80019e8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80019e0:	2350      	movs	r3, #80	@ 0x50
 80019e2:	2200      	movs	r2, #0
 80019e4:	54e2      	strb	r2, [r4, r3]
}
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80019e8:	0020      	movs	r0, r4
 80019ea:	f7ff fe1d 	bl	8001628 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1f6      	bne.n	80019e0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80019f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019f4:	4a03      	ldr	r2, [pc, #12]	@ (8001a04 <HAL_ADC_Stop+0x3c>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	432b      	orrs	r3, r5
 80019fa:	6563      	str	r3, [r4, #84]	@ 0x54
 80019fc:	e7f0      	b.n	80019e0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80019fe:	2002      	movs	r0, #2
 8001a00:	e7f1      	b.n	80019e6 <HAL_ADC_Stop+0x1e>
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	fffffefe 	.word	0xfffffefe

08001a08 <HAL_ADC_PollForConversion>:
{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a0a:	6944      	ldr	r4, [r0, #20]
{
 8001a0c:	0005      	movs	r5, r0
 8001a0e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a10:	2c08      	cmp	r4, #8
 8001a12:	d004      	beq.n	8001a1e <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001a14:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a16:	240c      	movs	r4, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	07db      	lsls	r3, r3, #31
 8001a1c:	d430      	bmi.n	8001a80 <HAL_ADC_PollForConversion+0x78>
  tickstart = HAL_GetTick();
 8001a1e:	f7ff fddb 	bl	80015d8 <HAL_GetTick>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a22:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 8001a24:	0007      	movs	r7, r0
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a26:	0011      	movs	r1, r2
 8001a28:	1c73      	adds	r3, r6, #1
 8001a2a:	d134      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x8e>
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	4223      	tst	r3, r4
 8001a30:	d0fc      	beq.n	8001a2c <HAL_ADC_PollForConversion+0x24>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	656b      	str	r3, [r5, #84]	@ 0x54
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a3c:	23c0      	movs	r3, #192	@ 0xc0
 8001a3e:	68ca      	ldr	r2, [r1, #12]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	421a      	tst	r2, r3
 8001a44:	d114      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x68>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001a46:	2320      	movs	r3, #32
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a48:	5cea      	ldrb	r2, [r5, r3]
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d110      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x68>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a4e:	680a      	ldr	r2, [r1, #0]
 8001a50:	0712      	lsls	r2, r2, #28
 8001a52:	d50d      	bpl.n	8001a70 <HAL_ADC_PollForConversion+0x68>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a54:	688a      	ldr	r2, [r1, #8]
 8001a56:	0752      	lsls	r2, r2, #29
 8001a58:	d43f      	bmi.n	8001ada <HAL_ADC_PollForConversion+0xd2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	684b      	ldr	r3, [r1, #4]
 8001a5e:	4393      	bics	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001a62:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8001a64:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_ADC_PollForConversion+0xe4>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	3204      	adds	r2, #4
 8001a6a:	32ff      	adds	r2, #255	@ 0xff
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	656b      	str	r3, [r5, #84]	@ 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a70:	69ab      	ldr	r3, [r5, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8001a76:	2000      	movs	r0, #0
}
 8001a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	600b      	str	r3, [r1, #0]
 8001a7e:	e7fa      	b.n	8001a76 <HAL_ADC_PollForConversion+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	2220      	movs	r2, #32
 8001a82:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001a84:	4313      	orrs	r3, r2
 8001a86:	6543      	str	r3, [r0, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2350      	movs	r3, #80	@ 0x50
 8001a8c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e7f2      	b.n	8001a78 <HAL_ADC_PollForConversion+0x70>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a92:	682a      	ldr	r2, [r5, #0]
 8001a94:	0011      	movs	r1, r2
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	421c      	tst	r4, r3
 8001a9a:	d1ca      	bne.n	8001a32 <HAL_ADC_PollForConversion+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a9c:	2e00      	cmp	r6, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0xba>
 8001aa0:	f7ff fd9a 	bl	80015d8 <HAL_GetTick>
 8001aa4:	1bc0      	subs	r0, r0, r7
 8001aa6:	42b0      	cmp	r0, r6
 8001aa8:	d9f3      	bls.n	8001a92 <HAL_ADC_PollForConversion+0x8a>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001aaa:	6829      	ldr	r1, [r5, #0]
 8001aac:	680b      	ldr	r3, [r1, #0]
 8001aae:	4223      	tst	r3, r4
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_ADC_PollForConversion+0xc0>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	4223      	tst	r3, r4
 8001ab6:	d0f3      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0x98>
 8001ab8:	e7bb      	b.n	8001a32 <HAL_ADC_PollForConversion+0x2a>
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	0011      	movs	r1, r2
 8001abe:	4223      	tst	r3, r4
 8001ac0:	d1b7      	bne.n	8001a32 <HAL_ADC_PollForConversion+0x2a>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	4223      	tst	r3, r4
 8001ac6:	d1f8      	bne.n	8001aba <HAL_ADC_PollForConversion+0xb2>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac8:	2204      	movs	r2, #4
 8001aca:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	656b      	str	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2350      	movs	r3, #80	@ 0x50
 8001ad6:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8001ad8:	e7ce      	b.n	8001a78 <HAL_ADC_PollForConversion+0x70>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ada:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8001adc:	4313      	orrs	r3, r2
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ade:	2201      	movs	r2, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	656b      	str	r3, [r5, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001ae8:	e7c2      	b.n	8001a70 <HAL_ADC_PollForConversion+0x68>
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	fffffefe 	.word	0xfffffefe

08001af0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8001af4:	4770      	bx	lr
 8001af6:	46c0      	nop			@ (mov r8, r8)

08001af8 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001af8:	2350      	movs	r3, #80	@ 0x50
{
 8001afa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001afc:	5cc2      	ldrb	r2, [r0, r3]
{
 8001afe:	0004      	movs	r4, r0
 8001b00:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8001b02:	2a01      	cmp	r2, #1
 8001b04:	d055      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0xba>
 8001b06:	2201      	movs	r2, #1
 8001b08:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001b0a:	6802      	ldr	r2, [r0, #0]
 8001b0c:	6890      	ldr	r0, [r2, #8]
 8001b0e:	0740      	lsls	r0, r0, #29
 8001b10:	d42e      	bmi.n	8001b70 <HAL_ADC_ConfigChannel+0x78>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b12:	2380      	movs	r3, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001b14:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8001b16:	4e28      	ldr	r6, [pc, #160]	@ (8001bb8 <HAL_ADC_ConfigChannel+0xc0>)
 8001b18:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001b1a:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b1c:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001b1e:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b20:	402b      	ands	r3, r5
  if (sConfig->Rank != ADC_RANK_NONE)
 8001b22:	42b1      	cmp	r1, r6
 8001b24:	d02c      	beq.n	8001b80 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001b26:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b28:	4301      	orrs	r1, r0
 8001b2a:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d017      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x68>
      ADC->CCR |= ADC_CCR_TSEN;
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_ADC_ConfigChannel+0xc4>)
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	6811      	ldr	r1, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6013      	str	r3, [r2, #0]
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_ADC_ConfigChannel+0xc8>)
 8001b3e:	4921      	ldr	r1, [pc, #132]	@ (8001bc4 <HAL_ADC_ConfigChannel+0xcc>)
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	f7fe fae1 	bl	8000108 <__udivsi3>
 8001b46:	0083      	lsls	r3, r0, #2
 8001b48:	181b      	adds	r3, r3, r0
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x68>
    waitLoopIndex--;
 8001b54:	9b01      	ldr	r3, [sp, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f9      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x5c>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001b60:	03ad      	lsls	r5, r5, #14
 8001b62:	d41f      	bmi.n	8001ba4 <HAL_ADC_ConfigChannel+0xac>
  __HAL_UNLOCK(hadc);
 8001b64:	2350      	movs	r3, #80	@ 0x50
 8001b66:	2200      	movs	r2, #0
  return HAL_OK;
 8001b68:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001b6a:	54e2      	strb	r2, [r4, r3]
}
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b70:	2120      	movs	r1, #32
 8001b72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b76:	430a      	orrs	r2, r1
 8001b78:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001b7e:	e7f5      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001b80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b82:	4381      	bics	r1, r0
 8001b84:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x9c>
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_ADC_ConfigChannel+0xc4>)
 8001b8c:	490e      	ldr	r1, [pc, #56]	@ (8001bc8 <HAL_ADC_ConfigChannel+0xd0>)
 8001b8e:	6813      	ldr	r3, [r2, #0]
 8001b90:	400b      	ands	r3, r1
 8001b92:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001b94:	03ad      	lsls	r5, r5, #14
 8001b96:	d5e5      	bpl.n	8001b64 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001b98:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <HAL_ADC_ConfigChannel+0xc4>)
 8001b9a:	490c      	ldr	r1, [pc, #48]	@ (8001bcc <HAL_ADC_ConfigChannel+0xd4>)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e7df      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <HAL_ADC_ConfigChannel+0xc4>)
 8001ba8:	03db      	lsls	r3, r3, #15
 8001baa:	6811      	ldr	r1, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e7d8      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	e7da      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x74>
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	00001001 	.word	0x00001001
 8001bbc:	40012708 	.word	0x40012708
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	000f4240 	.word	0x000f4240
 8001bc8:	ff7fffff 	.word	0xff7fffff
 8001bcc:	ffbfffff 	.word	0xffbfffff

08001bd0 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd0:	22ff      	movs	r2, #255	@ 0xff
 8001bd2:	2303      	movs	r3, #3
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd4:	b510      	push	{r4, lr}
 8001bd6:	0014      	movs	r4, r2
 8001bd8:	4003      	ands	r3, r0
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bde:	0189      	lsls	r1, r1, #6
 8001be0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001be4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8001be6:	2800      	cmp	r0, #0
 8001be8:	db0b      	blt.n	8001c02 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_NVIC_SetPriority+0x4c>)
 8001bec:	21c0      	movs	r1, #192	@ 0xc0
 8001bee:	469c      	mov	ip, r3
 8001bf0:	0880      	lsrs	r0, r0, #2
 8001bf2:	0080      	lsls	r0, r0, #2
 8001bf4:	4460      	add	r0, ip
 8001bf6:	0089      	lsls	r1, r1, #2
 8001bf8:	5843      	ldr	r3, [r0, r1]
 8001bfa:	4023      	ands	r3, r4
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	5043      	str	r3, [r0, r1]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001c00:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c02:	230f      	movs	r3, #15
 8001c04:	4906      	ldr	r1, [pc, #24]	@ (8001c20 <HAL_NVIC_SetPriority+0x50>)
 8001c06:	4003      	ands	r3, r0
 8001c08:	468c      	mov	ip, r1
 8001c0a:	3b08      	subs	r3, #8
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4463      	add	r3, ip
 8001c12:	69d9      	ldr	r1, [r3, #28]
 8001c14:	400c      	ands	r4, r1
 8001c16:	4314      	orrs	r4, r2
 8001c18:	61dc      	str	r4, [r3, #28]
 8001c1a:	e7f1      	b.n	8001c00 <HAL_NVIC_SetPriority+0x30>
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c24:	2800      	cmp	r0, #0
 8001c26:	db05      	blt.n	8001c34 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c28:	221f      	movs	r2, #31
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	4002      	ands	r2, r0
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4a01      	ldr	r2, [pc, #4]	@ (8001c38 <HAL_NVIC_EnableIRQ+0x14>)
 8001c32:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c34:	4770      	bx	lr
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	2280      	movs	r2, #128	@ 0x80
 8001c3e:	1e43      	subs	r3, r0, #1
 8001c40:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d20e      	bcs.n	8001c66 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c48:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c50:	6a03      	ldr	r3, [r0, #32]
 8001c52:	0609      	lsls	r1, r1, #24
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	3307      	adds	r3, #7
 8001c64:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c66:	4770      	bx	lr
 8001c68:	e000e010 	.word	0xe000e010
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c74:	d038      	beq.n	8001ce8 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c76:	6805      	ldr	r5, [r0, #0]
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <HAL_DMA_Init+0x7c>)
 8001c7a:	2114      	movs	r1, #20
 8001c7c:	18e8      	adds	r0, r5, r3
 8001c7e:	f7fe fa43 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c84:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 8001c86:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	2325      	movs	r3, #37	@ 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c8a:	0080      	lsls	r0, r0, #2
 8001c8c:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8e:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c90:	682a      	ldr	r2, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c94:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c96:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001c98:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001c9c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	4333      	orrs	r3, r6
 8001ca0:	6966      	ldr	r6, [r4, #20]
 8001ca2:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	69a6      	ldr	r6, [r4, #24]
 8001ca6:	4333      	orrs	r3, r6
 8001ca8:	69e6      	ldr	r6, [r4, #28]
 8001caa:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cac:	6a26      	ldr	r6, [r4, #32]
 8001cae:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8001cb0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cb2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	01db      	lsls	r3, r3, #7
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	d00c      	beq.n	8001cd6 <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cbc:	211c      	movs	r1, #28
 8001cbe:	4001      	ands	r1, r0
 8001cc0:	200f      	movs	r0, #15
 8001cc2:	4088      	lsls	r0, r1
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <HAL_DMA_Init+0x88>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	4383      	bics	r3, r0
 8001cca:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ccc:	6863      	ldr	r3, [r4, #4]
 8001cce:	6810      	ldr	r0, [r2, #0]
 8001cd0:	408b      	lsls	r3, r1
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001cd8:	2225      	movs	r2, #37	@ 0x25
 8001cda:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001ce0:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	54a3      	strb	r3, [r4, r2]
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
 8001cea:	e7fc      	b.n	8001ce6 <HAL_DMA_Init+0x76>
 8001cec:	bffdfff8 	.word	0xbffdfff8
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	ffff800f 	.word	0xffff800f
 8001cf8:	400200a8 	.word	0x400200a8

08001cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	46ce      	mov	lr, r9
 8001d00:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d02:	2424      	movs	r4, #36	@ 0x24
{
 8001d04:	b580      	push	{r7, lr}
  __HAL_LOCK(hdma);
 8001d06:	5d05      	ldrb	r5, [r0, r4]
 8001d08:	2d01      	cmp	r5, #1
 8001d0a:	d008      	beq.n	8001d1e <HAL_DMA_Start_IT+0x22>
 8001d0c:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0e:	2725      	movs	r7, #37	@ 0x25
  __HAL_LOCK(hdma);
 8001d10:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d12:	5dc5      	ldrb	r5, [r0, r7]
 8001d14:	b2ee      	uxtb	r6, r5
 8001d16:	2d01      	cmp	r5, #1
 8001d18:	d006      	beq.n	8001d28 <HAL_DMA_Start_IT+0x2c>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	5503      	strb	r3, [r0, r4]
  __HAL_LOCK(hdma);
 8001d1e:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8001d20:	bcc0      	pop	{r6, r7}
 8001d22:	46b9      	mov	r9, r7
 8001d24:	46b0      	mov	r8, r6
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	3c22      	subs	r4, #34	@ 0x22
 8001d2a:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001d30:	6804      	ldr	r4, [r0, #0]
 8001d32:	6825      	ldr	r5, [r4, #0]
 8001d34:	43b5      	bics	r5, r6
 8001d36:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d38:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001d3a:	46a9      	mov	r9, r5
 8001d3c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8001d3e:	46a8      	mov	r8, r5
 8001d40:	251c      	movs	r5, #28
 8001d42:	4647      	mov	r7, r8
 8001d44:	402f      	ands	r7, r5
 8001d46:	40be      	lsls	r6, r7
 8001d48:	464d      	mov	r5, r9
 8001d4a:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d4c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d4e:	6883      	ldr	r3, [r0, #8]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Start_IT+0x76>
    if(NULL != hdma->XferHalfCpltCallback )
 8001d54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001d56:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001d58:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5e:	220e      	movs	r2, #14
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d66:	2201      	movs	r2, #1
 8001d68:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	6023      	str	r3, [r4, #0]
 8001d70:	e7d6      	b.n	8001d20 <HAL_DMA_Start_IT+0x24>
    if(NULL != hdma->XferHalfCpltCallback )
 8001d72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8001d74:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001d76:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	4393      	bics	r3, r2
 8001d82:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	3206      	adds	r2, #6
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	6023      	str	r3, [r4, #0]
 8001d8c:	e7eb      	b.n	8001d66 <HAL_DMA_Start_IT+0x6a>
 8001d8e:	46c0      	nop			@ (mov r8, r8)

08001d90 <HAL_DMA_IRQHandler>:
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d90:	221c      	movs	r2, #28
{
 8001d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d94:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d96:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d98:	4013      	ands	r3, r2
 8001d9a:	3a18      	subs	r2, #24
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	4099      	lsls	r1, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001da0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001da2:	6805      	ldr	r5, [r0, #0]
 8001da4:	682f      	ldr	r7, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001da6:	420c      	tst	r4, r1
 8001da8:	d00d      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x36>
 8001daa:	423a      	tst	r2, r7
 8001dac:	d00b      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	069b      	lsls	r3, r3, #26
 8001db2:	d402      	bmi.n	8001dba <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	4393      	bics	r3, r2
 8001db8:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001dbc:	6071      	str	r1, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d000      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001dc2:	4798      	blx	r3
}
 8001dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	0011      	movs	r1, r2
 8001dca:	4099      	lsls	r1, r3
 8001dcc:	420c      	tst	r4, r1
 8001dce:	d014      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x6a>
 8001dd0:	423a      	tst	r2, r7
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	d406      	bmi.n	8001de8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	4393      	bics	r3, r2
 8001de0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001de2:	2325      	movs	r3, #37	@ 0x25
 8001de4:	3a09      	subs	r2, #9
 8001de6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001de8:	2324      	movs	r3, #36	@ 0x24
 8001dea:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dec:	6071      	str	r1, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001dee:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8001df0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0e6      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001df6:	4798      	blx	r3
  return;
 8001df8:	e7e4      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	0011      	movs	r1, r2
 8001dfe:	4099      	lsls	r1, r3
 8001e00:	420c      	tst	r4, r1
 8001e02:	d0df      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
 8001e04:	423a      	tst	r2, r7
 8001e06:	d0dd      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e08:	210e      	movs	r1, #14
 8001e0a:	682a      	ldr	r2, [r5, #0]
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e10:	2201      	movs	r2, #1
 8001e12:	0011      	movs	r1, r2
 8001e14:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	2325      	movs	r3, #37	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e18:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e1a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	3b01      	subs	r3, #1
 8001e22:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001e24:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0cc      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001e2a:	4798      	blx	r3
  return;
 8001e2c:	e7ca      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x34>
 8001e2e:	46c0      	nop			@ (mov r8, r8)

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	46de      	mov	lr, fp
 8001e34:	4657      	mov	r7, sl
 8001e36:	464e      	mov	r6, r9
 8001e38:	4645      	mov	r5, r8
 8001e3a:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e3c:	680c      	ldr	r4, [r1, #0]
{
 8001e3e:	468b      	mov	fp, r1
  uint32_t position = 0x00U;
 8001e40:	2300      	movs	r3, #0
{
 8001e42:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d067      	beq.n	8001f18 <HAL_GPIO_Init+0xe8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	4694      	mov	ip, r2
 8001e4e:	4022      	ands	r2, r4
 8001e50:	4692      	mov	sl, r2

    if (iocurrent)
 8001e52:	4662      	mov	r2, ip
 8001e54:	4214      	tst	r4, r2
 8001e56:	d05b      	beq.n	8001f10 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e58:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e5a:	465a      	mov	r2, fp
 8001e5c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e5e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e60:	6855      	ldr	r5, [r2, #4]
 8001e62:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e64:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e66:	402a      	ands	r2, r5
 8001e68:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e6a:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e6c:	2e01      	cmp	r6, #1
 8001e6e:	d95a      	bls.n	8001f26 <HAL_GPIO_Init+0xf6>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	2a03      	cmp	r2, #3
 8001e72:	d000      	beq.n	8001e76 <HAL_GPIO_Init+0x46>
 8001e74:	e0ac      	b.n	8001fd0 <HAL_GPIO_Init+0x1a0>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e76:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001e78:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e7a:	9900      	ldr	r1, [sp, #0]
 8001e7c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8001e80:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e82:	22c0      	movs	r2, #192	@ 0xc0
 8001e84:	0292      	lsls	r2, r2, #10
 8001e86:	4215      	tst	r5, r2
 8001e88:	d042      	beq.n	8001f10 <HAL_GPIO_Init+0xe0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2601      	movs	r6, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e8c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	495d      	ldr	r1, [pc, #372]	@ (8002004 <HAL_GPIO_Init+0x1d4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e90:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e94:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	4332      	orrs	r2, r6
 8001e98:	634a      	str	r2, [r1, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9a:	495b      	ldr	r1, [pc, #364]	@ (8002008 <HAL_GPIO_Init+0x1d8>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e9c:	360e      	adds	r6, #14
 8001e9e:	468c      	mov	ip, r1
 8001ea0:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	089a      	lsrs	r2, r3, #2
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4462      	add	r2, ip
 8001ea8:	6891      	ldr	r1, [r2, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001eaa:	43b1      	bics	r1, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001eac:	26a0      	movs	r6, #160	@ 0xa0
 8001eae:	05f6      	lsls	r6, r6, #23
 8001eb0:	42b0      	cmp	r0, r6
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_GPIO_Init+0xa2>
 8001eb4:	4e55      	ldr	r6, [pc, #340]	@ (800200c <HAL_GPIO_Init+0x1dc>)
 8001eb6:	42b0      	cmp	r0, r6
 8001eb8:	d100      	bne.n	8001ebc <HAL_GPIO_Init+0x8c>
 8001eba:	e09a      	b.n	8001ff2 <HAL_GPIO_Init+0x1c2>
 8001ebc:	4e54      	ldr	r6, [pc, #336]	@ (8002010 <HAL_GPIO_Init+0x1e0>)
 8001ebe:	42b0      	cmp	r0, r6
 8001ec0:	d100      	bne.n	8001ec4 <HAL_GPIO_Init+0x94>
 8001ec2:	e09a      	b.n	8001ffa <HAL_GPIO_Init+0x1ca>
 8001ec4:	4e53      	ldr	r6, [pc, #332]	@ (8002014 <HAL_GPIO_Init+0x1e4>)
 8001ec6:	42b0      	cmp	r0, r6
 8001ec8:	d100      	bne.n	8001ecc <HAL_GPIO_Init+0x9c>
 8001eca:	e08e      	b.n	8001fea <HAL_GPIO_Init+0x1ba>
 8001ecc:	2606      	movs	r6, #6
 8001ece:	40be      	lsls	r6, r7
 8001ed0:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	2680      	movs	r6, #128	@ 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed4:	6091      	str	r1, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8002018 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eda:	0376      	lsls	r6, r6, #13
        temp &= ~((uint32_t)iocurrent);
 8001edc:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8001ede:	6892      	ldr	r2, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee0:	4235      	tst	r5, r6
 8001ee2:	d000      	beq.n	8001ee6 <HAL_GPIO_Init+0xb6>
 8001ee4:	e071      	b.n	8001fca <HAL_GPIO_Init+0x19a>
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001ee8:	4e4b      	ldr	r6, [pc, #300]	@ (8002018 <HAL_GPIO_Init+0x1e8>)
 8001eea:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001eec:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eee:	02af      	lsls	r7, r5, #10
 8001ef0:	d468      	bmi.n	8001fc4 <HAL_GPIO_Init+0x194>
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001ef4:	4e48      	ldr	r6, [pc, #288]	@ (8002018 <HAL_GPIO_Init+0x1e8>)
 8001ef6:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001ef8:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efa:	03af      	lsls	r7, r5, #14
 8001efc:	d45f      	bmi.n	8001fbe <HAL_GPIO_Init+0x18e>
        temp &= ~((uint32_t)iocurrent);
 8001efe:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001f00:	4e45      	ldr	r6, [pc, #276]	@ (8002018 <HAL_GPIO_Init+0x1e8>)
 8001f02:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f06:	03ed      	lsls	r5, r5, #15
 8001f08:	d455      	bmi.n	8001fb6 <HAL_GPIO_Init+0x186>
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001f0c:	4942      	ldr	r1, [pc, #264]	@ (8002018 <HAL_GPIO_Init+0x1e8>)
 8001f0e:	600a      	str	r2, [r1, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f10:	0022      	movs	r2, r4
      }
    }
    position++;
 8001f12:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f14:	40da      	lsrs	r2, r3
 8001f16:	d197      	bne.n	8001e48 <HAL_GPIO_Init+0x18>
  }
}
 8001f18:	b003      	add	sp, #12
 8001f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f1c:	46bb      	mov	fp, r7
 8001f1e:	46b2      	mov	sl, r6
 8001f20:	46a9      	mov	r9, r5
 8001f22:	46a0      	mov	r8, r4
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001f26:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f28:	000e      	movs	r6, r1
 8001f2a:	9900      	ldr	r1, [sp, #0]
 8001f2c:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2e:	4659      	mov	r1, fp
 8001f30:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f32:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f34:	000e      	movs	r6, r1
 8001f36:	40be      	lsls	r6, r7
 8001f38:	46b0      	mov	r8, r6
 8001f3a:	464e      	mov	r6, r9
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8001f40:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f42:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	000e      	movs	r6, r1
 8001f46:	4661      	mov	r1, ip
 8001f48:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4c:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4e:	000e      	movs	r6, r1
 8001f50:	2101      	movs	r1, #1
 8001f52:	400e      	ands	r6, r1
 8001f54:	409e      	lsls	r6, r3
 8001f56:	46b4      	mov	ip, r6
 8001f58:	4646      	mov	r6, r8
 8001f5a:	4661      	mov	r1, ip
 8001f5c:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8001f5e:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f60:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f62:	000e      	movs	r6, r1
 8001f64:	9900      	ldr	r1, [sp, #0]
 8001f66:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	4659      	mov	r1, fp
 8001f6a:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6c:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6e:	000e      	movs	r6, r1
 8001f70:	40be      	lsls	r6, r7
 8001f72:	46b4      	mov	ip, r6
 8001f74:	4646      	mov	r6, r8
 8001f76:	4661      	mov	r1, ip
 8001f78:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8001f7a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	2a02      	cmp	r2, #2
 8001f7e:	d000      	beq.n	8001f82 <HAL_GPIO_Init+0x152>
 8001f80:	e779      	b.n	8001e76 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8001f82:	08d9      	lsrs	r1, r3, #3
 8001f84:	0089      	lsls	r1, r1, #2
 8001f86:	468c      	mov	ip, r1
 8001f88:	4484      	add	ip, r0
 8001f8a:	4661      	mov	r1, ip
 8001f8c:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f8e:	2107      	movs	r1, #7
 8001f90:	4019      	ands	r1, r3
 8001f92:	0089      	lsls	r1, r1, #2
 8001f94:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3U];
 8001f96:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f98:	210f      	movs	r1, #15
 8001f9a:	4646      	mov	r6, r8
 8001f9c:	40b1      	lsls	r1, r6
 8001f9e:	9e01      	ldr	r6, [sp, #4]
 8001fa0:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001fa2:	4659      	mov	r1, fp
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001fa4:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001fa6:	4646      	mov	r6, r8
 8001fa8:	6909      	ldr	r1, [r1, #16]
 8001faa:	40b1      	lsls	r1, r6
 8001fac:	9e01      	ldr	r6, [sp, #4]
 8001fae:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001fb0:	4661      	mov	r1, ip
 8001fb2:	620e      	str	r6, [r1, #32]
 8001fb4:	e75f      	b.n	8001e76 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8001fb6:	4651      	mov	r1, sl
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	000a      	movs	r2, r1
 8001fbc:	e7a6      	b.n	8001f0c <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8001fbe:	4656      	mov	r6, sl
 8001fc0:	4332      	orrs	r2, r6
 8001fc2:	e79d      	b.n	8001f00 <HAL_GPIO_Init+0xd0>
          temp |= iocurrent;
 8001fc4:	4656      	mov	r6, sl
 8001fc6:	4332      	orrs	r2, r6
 8001fc8:	e794      	b.n	8001ef4 <HAL_GPIO_Init+0xc4>
          temp |= iocurrent;
 8001fca:	4656      	mov	r6, sl
 8001fcc:	4332      	orrs	r2, r6
 8001fce:	e78b      	b.n	8001ee8 <HAL_GPIO_Init+0xb8>
 8001fd0:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8001fd2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd4:	4031      	ands	r1, r6
 8001fd6:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	4659      	mov	r1, fp
 8001fda:	6889      	ldr	r1, [r1, #8]
 8001fdc:	40b9      	lsls	r1, r7
 8001fde:	468c      	mov	ip, r1
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	4666      	mov	r6, ip
 8001fe4:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8001fe6:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	e745      	b.n	8001e76 <HAL_GPIO_Init+0x46>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fea:	2605      	movs	r6, #5
 8001fec:	40be      	lsls	r6, r7
 8001fee:	4331      	orrs	r1, r6
 8001ff0:	e76f      	b.n	8001ed2 <HAL_GPIO_Init+0xa2>
 8001ff2:	2601      	movs	r6, #1
 8001ff4:	40be      	lsls	r6, r7
 8001ff6:	4331      	orrs	r1, r6
 8001ff8:	e76b      	b.n	8001ed2 <HAL_GPIO_Init+0xa2>
 8001ffa:	2602      	movs	r6, #2
 8001ffc:	40be      	lsls	r6, r7
 8001ffe:	4331      	orrs	r1, r6
 8002000:	e767      	b.n	8001ed2 <HAL_GPIO_Init+0xa2>
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	50000400 	.word	0x50000400
 8002010:	50000800 	.word	0x50000800
 8002014:	50001c00 	.word	0x50001c00
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201c:	6900      	ldr	r0, [r0, #16]
 800201e:	4008      	ands	r0, r1
 8002020:	1e43      	subs	r3, r0, #1
 8002022:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002024:	b2c0      	uxtb	r0, r0
}
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800202a:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	4210      	tst	r0, r2
 8002030:	d100      	bne.n	8002034 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002032:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002034:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002036:	f7ff f867 	bl	8001108 <HAL_GPIO_EXTI_Callback>
}
 800203a:	e7fa      	b.n	8002032 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	4a03      	ldr	r2, [pc, #12]	@ (8002050 <HAL_PWR_EnableBkUpAccess+0x10>)
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	6811      	ldr	r1, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	4770      	bx	lr
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002056:	4e1b      	ldr	r6, [pc, #108]	@ (80020c4 <HAL_PWR_EnterSTOPMode+0x70>)
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_PWR_EnterSTOPMode+0x74>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800205a:	6835      	ldr	r5, [r6, #0]
{
 800205c:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800205e:	2080      	movs	r0, #128	@ 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002060:	6a1f      	ldr	r7, [r3, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002062:	002c      	movs	r4, r5
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002064:	2301      	movs	r3, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002066:	0080      	lsls	r0, r0, #2
 8002068:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800206a:	403b      	ands	r3, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 800206c:	4205      	tst	r5, r0
 800206e:	d001      	beq.n	8002074 <HAL_PWR_EnterSTOPMode+0x20>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11f      	bne.n	80020b4 <HAL_PWR_EnterSTOPMode+0x60>

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002074:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8002076:	4d13      	ldr	r5, [pc, #76]	@ (80020c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8002078:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800207a:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800207c:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 800207e:	6028      	str	r0, [r5, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002080:	2504      	movs	r5, #4
 8002082:	4812      	ldr	r0, [pc, #72]	@ (80020cc <HAL_PWR_EnterSTOPMode+0x78>)
 8002084:	6902      	ldr	r2, [r0, #16]
 8002086:	432a      	orrs	r2, r5
 8002088:	6102      	str	r2, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800208a:	2901      	cmp	r1, #1
 800208c:	d017      	beq.n	80020be <HAL_PWR_EnterSTOPMode+0x6a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800208e:	bf40      	sev
    __WFE();
 8002090:	bf20      	wfe
    __WFE();
 8002092:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002094:	2004      	movs	r0, #4
 8002096:	490d      	ldr	r1, [pc, #52]	@ (80020cc <HAL_PWR_EnterSTOPMode+0x78>)
 8002098:	690a      	ldr	r2, [r1, #16]
 800209a:	4382      	bics	r2, r0
 800209c:	610a      	str	r2, [r1, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_PWR_EnterSTOPMode+0x5e>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	4a06      	ldr	r2, [pc, #24]	@ (80020c4 <HAL_PWR_EnterSTOPMode+0x70>)
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	6811      	ldr	r1, [r2, #0]
 80020ae:	430b      	orrs	r3, r1
 80020b0:	6013      	str	r3, [r2, #0]
  }
}
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80020b4:	6830      	ldr	r0, [r6, #0]
 80020b6:	4d06      	ldr	r5, [pc, #24]	@ (80020d0 <HAL_PWR_EnterSTOPMode+0x7c>)
 80020b8:	4028      	ands	r0, r5
 80020ba:	6030      	str	r0, [r6, #0]
 80020bc:	e7da      	b.n	8002074 <HAL_PWR_EnterSTOPMode+0x20>
    __WFI();
 80020be:	bf30      	wfi
 80020c0:	e7e8      	b.n	8002094 <HAL_PWR_EnterSTOPMode+0x40>
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	40007000 	.word	0x40007000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	fffffdff 	.word	0xfffffdff

080020d4 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80020d4:	2102      	movs	r1, #2
 80020d6:	4a02      	ldr	r2, [pc, #8]	@ (80020e0 <HAL_PWR_EnableSleepOnExit+0xc>)
 80020d8:	6913      	ldr	r3, [r2, #16]
 80020da:	430b      	orrs	r3, r1
 80020dc:	6113      	str	r3, [r2, #16]
}
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80020e4:	2102      	movs	r1, #2
 80020e6:	4a02      	ldr	r2, [pc, #8]	@ (80020f0 <HAL_PWR_DisableSleepOnExit+0xc>)
 80020e8:	6913      	ldr	r3, [r2, #16]
 80020ea:	438b      	bics	r3, r1
 80020ec:	6113      	str	r3, [r2, #16]
}
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80020f6:	491d      	ldr	r1, [pc, #116]	@ (800216c <HAL_RCC_GetSysClockFreq+0x78>)
{
 80020f8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80020fa:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d00b      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x26>
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d017      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x42>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d009      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800210a:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800210c:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800210e:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002114:	3301      	adds	r3, #1
 8002116:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8002118:	bd70      	pop	{r4, r5, r6, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 800211a:	4815      	ldr	r0, [pc, #84]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x7c>)
 800211c:	e7fc      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800211e:	2010      	movs	r0, #16
 8002120:	680b      	ldr	r3, [r1, #0]
 8002122:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 8002124:	4243      	negs	r3, r0
 8002126:	4158      	adcs	r0, r3
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x80>)
 800212a:	4240      	negs	r0, r0
 800212c:	4018      	ands	r0, r3
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x84>)
 8002130:	469c      	mov	ip, r3
 8002132:	4460      	add	r0, ip
 8002134:	e7f0      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002136:	0293      	lsls	r3, r2, #10
 8002138:	4810      	ldr	r0, [pc, #64]	@ (800217c <HAL_RCC_GetSysClockFreq+0x88>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800213a:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213c:	68cd      	ldr	r5, [r1, #12]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800213e:	0f1b      	lsrs	r3, r3, #28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002140:	0f94      	lsrs	r4, r2, #30
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002142:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002144:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002146:	03ed      	lsls	r5, r5, #15
 8002148:	d40c      	bmi.n	8002164 <HAL_RCC_GetSysClockFreq+0x70>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800214a:	680b      	ldr	r3, [r1, #0]
 800214c:	06db      	lsls	r3, r3, #27
 800214e:	d50b      	bpl.n	8002168 <HAL_RCC_GetSysClockFreq+0x74>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002150:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x84>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002152:	2300      	movs	r3, #0
 8002154:	2100      	movs	r1, #0
 8002156:	f7fe f96d 	bl	8000434 <__aeabi_lmul>
 800215a:	0022      	movs	r2, r4
 800215c:	2300      	movs	r3, #0
 800215e:	f7fe f949 	bl	80003f4 <__aeabi_uldivmod>
 8002162:	e7d9      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002164:	4a02      	ldr	r2, [pc, #8]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002166:	e7f4      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x5e>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002168:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x8c>)
 800216a:	e7f2      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x5e>
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	00b71b00 	.word	0x00b71b00
 8002178:	003d0900 	.word	0x003d0900
 800217c:	080035c8 	.word	0x080035c8
 8002180:	00f42400 	.word	0x00f42400

08002184 <HAL_RCC_OscConfig>:
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	46d6      	mov	lr, sl
 8002188:	464f      	mov	r7, r9
 800218a:	4646      	mov	r6, r8
 800218c:	b5c0      	push	{r6, r7, lr}
 800218e:	0004      	movs	r4, r0
 8002190:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8002192:	2800      	cmp	r0, #0
 8002194:	d100      	bne.n	8002198 <HAL_RCC_OscConfig+0x14>
 8002196:	e186      	b.n	80024a6 <HAL_RCC_OscConfig+0x322>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002198:	4bca      	ldr	r3, [pc, #808]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 800219a:	250c      	movs	r5, #12
 800219c:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219e:	68de      	ldr	r6, [r3, #12]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	025b      	lsls	r3, r3, #9
 80021a4:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a8:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	07da      	lsls	r2, r3, #31
 80021ac:	d533      	bpl.n	8002216 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ae:	2d08      	cmp	r5, #8
 80021b0:	d100      	bne.n	80021b4 <HAL_RCC_OscConfig+0x30>
 80021b2:	e16f      	b.n	8002494 <HAL_RCC_OscConfig+0x310>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b4:	2d0c      	cmp	r5, #12
 80021b6:	d100      	bne.n	80021ba <HAL_RCC_OscConfig+0x36>
 80021b8:	e169      	b.n	800248e <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	0252      	lsls	r2, r2, #9
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x42>
 80021c4:	e171      	b.n	80024aa <HAL_RCC_OscConfig+0x326>
 80021c6:	21a0      	movs	r1, #160	@ 0xa0
 80021c8:	02c9      	lsls	r1, r1, #11
 80021ca:	428b      	cmp	r3, r1
 80021cc:	d100      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c>
 80021ce:	e211      	b.n	80025f4 <HAL_RCC_OscConfig+0x470>
 80021d0:	4fbc      	ldr	r7, [pc, #752]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 80021d2:	48bd      	ldr	r0, [pc, #756]	@ (80024c8 <HAL_RCC_OscConfig+0x344>)
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4001      	ands	r1, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	9a01      	ldr	r2, [sp, #4]
 80021e2:	49ba      	ldr	r1, [pc, #744]	@ (80024cc <HAL_RCC_OscConfig+0x348>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d000      	beq.n	80021f0 <HAL_RCC_OscConfig+0x6c>
 80021ee:	e160      	b.n	80024b2 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
 80021f0:	f7ff f9f2 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80021f8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021fa:	4699      	mov	r9, r3
 80021fc:	e006      	b.n	800220c <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fe:	f7ff f9eb 	bl	80015d8 <HAL_GetTick>
 8002202:	4643      	mov	r3, r8
 8002204:	1ac0      	subs	r0, r0, r3
 8002206:	2864      	cmp	r0, #100	@ 0x64
 8002208:	d900      	bls.n	800220c <HAL_RCC_OscConfig+0x88>
 800220a:	e1b1      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220c:	464a      	mov	r2, r9
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4213      	tst	r3, r2
 8002212:	d1f4      	bne.n	80021fe <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	079a      	lsls	r2, r3, #30
 8002218:	d52b      	bpl.n	8002272 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800221a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800221c:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800221e:	421a      	tst	r2, r3
 8002220:	d000      	beq.n	8002224 <HAL_RCC_OscConfig+0xa0>
 8002222:	e0d9      	b.n	80023d8 <HAL_RCC_OscConfig+0x254>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002224:	2d04      	cmp	r5, #4
 8002226:	d100      	bne.n	800222a <HAL_RCC_OscConfig+0xa6>
 8002228:	e0de      	b.n	80023e8 <HAL_RCC_OscConfig+0x264>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800222a:	2d0c      	cmp	r5, #12
 800222c:	d100      	bne.n	8002230 <HAL_RCC_OscConfig+0xac>
 800222e:	e16f      	b.n	8002510 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002230:	4ea4      	ldr	r6, [pc, #656]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
      if(hsi_state != RCC_HSI_OFF)
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_RCC_OscConfig+0xb4>
 8002236:	e1b2      	b.n	800259e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002238:	2109      	movs	r1, #9
 800223a:	6832      	ldr	r2, [r6, #0]
 800223c:	438a      	bics	r2, r1
 800223e:	4313      	orrs	r3, r2
 8002240:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002242:	f7ff f9c9 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002246:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8002248:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224a:	4698      	mov	r8, r3
 800224c:	e005      	b.n	800225a <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff f9c3 	bl	80015d8 <HAL_GetTick>
 8002252:	1bc0      	subs	r0, r0, r7
 8002254:	2802      	cmp	r0, #2
 8002256:	d900      	bls.n	800225a <HAL_RCC_OscConfig+0xd6>
 8002258:	e18a      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225a:	4642      	mov	r2, r8
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	421a      	tst	r2, r3
 8002260:	d0f5      	beq.n	800224e <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	6872      	ldr	r2, [r6, #4]
 8002264:	6923      	ldr	r3, [r4, #16]
 8002266:	499a      	ldr	r1, [pc, #616]	@ (80024d0 <HAL_RCC_OscConfig+0x34c>)
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	400a      	ands	r2, r1
 800226c:	4313      	orrs	r3, r2
 800226e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	06da      	lsls	r2, r3, #27
 8002274:	d52b      	bpl.n	80022ce <HAL_RCC_OscConfig+0x14a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002276:	2d00      	cmp	r5, #0
 8002278:	d100      	bne.n	800227c <HAL_RCC_OscConfig+0xf8>
 800227a:	e0dd      	b.n	8002438 <HAL_RCC_OscConfig+0x2b4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800227c:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800227e:	4e91      	ldr	r6, [pc, #580]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002280:	2b00      	cmp	r3, #0
 8002282:	d100      	bne.n	8002286 <HAL_RCC_OscConfig+0x102>
 8002284:	e1a0      	b.n	80025c8 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_MSI_ENABLE();
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	6832      	ldr	r2, [r6, #0]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4313      	orrs	r3, r2
 800228e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002290:	f7ff f9a2 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8002298:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800229a:	4698      	mov	r8, r3
 800229c:	e005      	b.n	80022aa <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7ff f99b 	bl	80015d8 <HAL_GetTick>
 80022a2:	1bc0      	subs	r0, r0, r7
 80022a4:	2802      	cmp	r0, #2
 80022a6:	d900      	bls.n	80022aa <HAL_RCC_OscConfig+0x126>
 80022a8:	e162      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022aa:	4642      	mov	r2, r8
 80022ac:	6833      	ldr	r3, [r6, #0]
 80022ae:	4213      	tst	r3, r2
 80022b0:	d0f5      	beq.n	800229e <HAL_RCC_OscConfig+0x11a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	6873      	ldr	r3, [r6, #4]
 80022b4:	4a87      	ldr	r2, [pc, #540]	@ (80024d4 <HAL_RCC_OscConfig+0x350>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	6a22      	ldr	r2, [r4, #32]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	6872      	ldr	r2, [r6, #4]
 80022c0:	69e3      	ldr	r3, [r4, #28]
 80022c2:	0212      	lsls	r2, r2, #8
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	0a12      	lsrs	r2, r2, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	071a      	lsls	r2, r3, #28
 80022d0:	d519      	bpl.n	8002306 <HAL_RCC_OscConfig+0x182>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80022d4:	4e7b      	ldr	r6, [pc, #492]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <HAL_RCC_OscConfig+0x158>
 80022da:	e14b      	b.n	8002574 <HAL_RCC_OscConfig+0x3f0>
      __HAL_RCC_LSI_ENABLE();
 80022dc:	2201      	movs	r2, #1
 80022de:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80022e4:	f7ff f978 	bl	80015d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e8:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80022ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ec:	4698      	mov	r8, r3
 80022ee:	e005      	b.n	80022fc <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff f972 	bl	80015d8 <HAL_GetTick>
 80022f4:	1bc0      	subs	r0, r0, r7
 80022f6:	2802      	cmp	r0, #2
 80022f8:	d900      	bls.n	80022fc <HAL_RCC_OscConfig+0x178>
 80022fa:	e139      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022fc:	4642      	mov	r2, r8
 80022fe:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8002300:	421a      	tst	r2, r3
 8002302:	d0f5      	beq.n	80022f0 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	075b      	lsls	r3, r3, #29
 8002308:	d542      	bpl.n	8002390 <HAL_RCC_OscConfig+0x20c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800230c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4a6d      	ldr	r2, [pc, #436]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 8002310:	055b      	lsls	r3, r3, #21
 8002312:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002314:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4219      	tst	r1, r3
 8002318:	d104      	bne.n	8002324 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800231c:	430b      	orrs	r3, r1
 800231e:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	2780      	movs	r7, #128	@ 0x80
 8002326:	4e6c      	ldr	r6, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x354>)
 8002328:	007f      	lsls	r7, r7, #1
 800232a:	6833      	ldr	r3, [r6, #0]
 800232c:	423b      	tst	r3, r7
 800232e:	d100      	bne.n	8002332 <HAL_RCC_OscConfig+0x1ae>
 8002330:	e10e      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	68a3      	ldr	r3, [r4, #8]
 8002336:	0052      	lsls	r2, r2, #1
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_RCC_OscConfig+0x1ba>
 800233c:	e19c      	b.n	8002678 <HAL_RCC_OscConfig+0x4f4>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d100      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
 8002342:	e0e9      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
 8002344:	21a0      	movs	r1, #160	@ 0xa0
 8002346:	00c9      	lsls	r1, r1, #3
 8002348:	428b      	cmp	r3, r1
 800234a:	d100      	bne.n	800234e <HAL_RCC_OscConfig+0x1ca>
 800234c:	e1b5      	b.n	80026ba <HAL_RCC_OscConfig+0x536>
 800234e:	4b5d      	ldr	r3, [pc, #372]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 8002350:	4962      	ldr	r1, [pc, #392]	@ (80024dc <HAL_RCC_OscConfig+0x358>)
 8002352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002354:	400a      	ands	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	@ 0x50
 8002358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800235a:	4961      	ldr	r1, [pc, #388]	@ (80024e0 <HAL_RCC_OscConfig+0x35c>)
 800235c:	400a      	ands	r2, r1
 800235e:	651a      	str	r2, [r3, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002360:	f7ff f93a 	bl	80015d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002364:	2780      	movs	r7, #128	@ 0x80
 8002366:	4b57      	ldr	r3, [pc, #348]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
      tickstart = HAL_GetTick();
 8002368:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800236a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	4b5d      	ldr	r3, [pc, #372]	@ (80024e4 <HAL_RCC_OscConfig+0x360>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800236e:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002372:	e005      	b.n	8002380 <HAL_RCC_OscConfig+0x1fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7ff f930 	bl	80015d8 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	4548      	cmp	r0, r9
 800237c:	d900      	bls.n	8002380 <HAL_RCC_OscConfig+0x1fc>
 800237e:	e0f7      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002380:	4643      	mov	r3, r8
 8002382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002384:	423b      	tst	r3, r7
 8002386:	d0f5      	beq.n	8002374 <HAL_RCC_OscConfig+0x1f0>
    if(pwrclkchanged == SET)
 8002388:	4653      	mov	r3, sl
 800238a:	2b01      	cmp	r3, #1
 800238c:	d100      	bne.n	8002390 <HAL_RCC_OscConfig+0x20c>
 800238e:	e16d      	b.n	800266c <HAL_RCC_OscConfig+0x4e8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x246>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002396:	2d0c      	cmp	r5, #12
 8002398:	d100      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
 800239a:	e172      	b.n	8002682 <HAL_RCC_OscConfig+0x4fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	2b02      	cmp	r3, #2
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x21e>
 80023a0:	e132      	b.n	8002608 <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4c48      	ldr	r4, [pc, #288]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 80023a4:	4a50      	ldr	r2, [pc, #320]	@ (80024e8 <HAL_RCC_OscConfig+0x364>)
 80023a6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023a8:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4013      	ands	r3, r2
 80023ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023ae:	f7ff f913 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023b2:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80023b4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_OscConfig+0x240>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff f90e 	bl	80015d8 <HAL_GetTick>
 80023bc:	1b40      	subs	r0, r0, r5
 80023be:	2802      	cmp	r0, #2
 80023c0:	d900      	bls.n	80023c4 <HAL_RCC_OscConfig+0x240>
 80023c2:	e0d5      	b.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	4233      	tst	r3, r6
 80023c8:	d1f6      	bne.n	80023b8 <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 80023ca:	2000      	movs	r0, #0
}
 80023cc:	b002      	add	sp, #8
 80023ce:	bce0      	pop	{r5, r6, r7}
 80023d0:	46ba      	mov	sl, r7
 80023d2:	46b1      	mov	r9, r6
 80023d4:	46a8      	mov	r8, r5
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80023d8:	483a      	ldr	r0, [pc, #232]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80023da:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80023dc:	6801      	ldr	r1, [r0, #0]
 80023de:	4311      	orrs	r1, r2
 80023e0:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	2d04      	cmp	r5, #4
 80023e4:	d000      	beq.n	80023e8 <HAL_RCC_OscConfig+0x264>
 80023e6:	e720      	b.n	800222a <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023e8:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	0752      	lsls	r2, r2, #29
 80023ee:	d501      	bpl.n	80023f4 <HAL_RCC_OscConfig+0x270>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d058      	beq.n	80024a6 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4e33      	ldr	r6, [pc, #204]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 80023f6:	6922      	ldr	r2, [r4, #16]
 80023f8:	6871      	ldr	r1, [r6, #4]
 80023fa:	4835      	ldr	r0, [pc, #212]	@ (80024d0 <HAL_RCC_OscConfig+0x34c>)
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4001      	ands	r1, r0
 8002400:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002402:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002406:	6832      	ldr	r2, [r6, #0]
 8002408:	438a      	bics	r2, r1
 800240a:	4313      	orrs	r3, r2
 800240c:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240e:	f7ff fe71 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8002412:	68f3      	ldr	r3, [r6, #12]
 8002414:	4a35      	ldr	r2, [pc, #212]	@ (80024ec <HAL_RCC_OscConfig+0x368>)
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	0f1b      	lsrs	r3, r3, #28
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	4934      	ldr	r1, [pc, #208]	@ (80024f0 <HAL_RCC_OscConfig+0x36c>)
 800241e:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_OscConfig+0x370>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002422:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f7ff f891 	bl	800154c <HAL_InitTick>
      if(status != HAL_OK)
 800242a:	2800      	cmp	r0, #0
 800242c:	d1ce      	bne.n	80023cc <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	06da      	lsls	r2, r3, #27
 8002432:	d400      	bmi.n	8002436 <HAL_RCC_OscConfig+0x2b2>
 8002434:	e74b      	b.n	80022ce <HAL_RCC_OscConfig+0x14a>
 8002436:	e71e      	b.n	8002276 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002438:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	059b      	lsls	r3, r3, #22
 800243e:	d502      	bpl.n	8002446 <HAL_RCC_OscConfig+0x2c2>
 8002440:	69a3      	ldr	r3, [r4, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02f      	beq.n	80024a6 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 8002448:	4822      	ldr	r0, [pc, #136]	@ (80024d4 <HAL_RCC_OscConfig+0x350>)
 800244a:	6851      	ldr	r1, [r2, #4]
 800244c:	6a23      	ldr	r3, [r4, #32]
 800244e:	4001      	ands	r1, r0
 8002450:	4319      	orrs	r1, r3
 8002452:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002454:	6850      	ldr	r0, [r2, #4]
 8002456:	69e1      	ldr	r1, [r4, #28]
 8002458:	0200      	lsls	r0, r0, #8
 800245a:	0a00      	lsrs	r0, r0, #8
 800245c:	0609      	lsls	r1, r1, #24
 800245e:	4301      	orrs	r1, r0
 8002460:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002462:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	0b5b      	lsrs	r3, r3, #13
 8002468:	3301      	adds	r3, #1
 800246a:	0212      	lsls	r2, r2, #8
 800246c:	409a      	lsls	r2, r3
 800246e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002470:	481e      	ldr	r0, [pc, #120]	@ (80024ec <HAL_RCC_OscConfig+0x368>)
 8002472:	060a      	lsls	r2, r1, #24
 8002474:	0f12      	lsrs	r2, r2, #28
 8002476:	5c82      	ldrb	r2, [r0, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002478:	4e1d      	ldr	r6, [pc, #116]	@ (80024f0 <HAL_RCC_OscConfig+0x36c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800247a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800247c:	6033      	str	r3, [r6, #0]
        status = HAL_InitTick (uwTickPrio);
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_RCC_OscConfig+0x370>)
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	f7ff f863 	bl	800154c <HAL_InitTick>
        if(status != HAL_OK)
 8002486:	2800      	cmp	r0, #0
 8002488:	d1a0      	bne.n	80023cc <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	e71f      	b.n	80022ce <HAL_RCC_OscConfig+0x14a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800248e:	2e00      	cmp	r6, #0
 8002490:	d100      	bne.n	8002494 <HAL_RCC_OscConfig+0x310>
 8002492:	e692      	b.n	80021ba <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	0392      	lsls	r2, r2, #14
 800249a:	d400      	bmi.n	800249e <HAL_RCC_OscConfig+0x31a>
 800249c:	e6bb      	b.n	8002216 <HAL_RCC_OscConfig+0x92>
 800249e:	6862      	ldr	r2, [r4, #4]
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d000      	beq.n	80024a6 <HAL_RCC_OscConfig+0x322>
 80024a4:	e6b7      	b.n	8002216 <HAL_RCC_OscConfig+0x92>
    return HAL_ERROR;
 80024a6:	2001      	movs	r0, #1
 80024a8:	e790      	b.n	80023cc <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 80024ac:	680a      	ldr	r2, [r1, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80024b2:	f7ff f891 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b6:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
        tickstart = HAL_GetTick();
 80024b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ba:	4699      	mov	r9, r3
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	4698      	mov	r8, r3
 80024c2:	e01e      	b.n	8002502 <HAL_RCC_OscConfig+0x37e>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	fffeffff 	.word	0xfffeffff
 80024cc:	fffbffff 	.word	0xfffbffff
 80024d0:	ffffe0ff 	.word	0xffffe0ff
 80024d4:	ffff1fff 	.word	0xffff1fff
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffffeff 	.word	0xfffffeff
 80024e0:	fffffbff 	.word	0xfffffbff
 80024e4:	00001388 	.word	0x00001388
 80024e8:	feffffff 	.word	0xfeffffff
 80024ec:	080035d4 	.word	0x080035d4
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	20000014 	.word	0x20000014
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff f86e 	bl	80015d8 <HAL_GetTick>
 80024fc:	1bc0      	subs	r0, r0, r7
 80024fe:	2864      	cmp	r0, #100	@ 0x64
 8002500:	d836      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002502:	464b      	mov	r3, r9
 8002504:	4642      	mov	r2, r8
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4213      	tst	r3, r2
 800250a:	d0f5      	beq.n	80024f8 <HAL_RCC_OscConfig+0x374>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	e682      	b.n	8002216 <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002510:	2e00      	cmp	r6, #0
 8002512:	d000      	beq.n	8002516 <HAL_RCC_OscConfig+0x392>
 8002514:	e68c      	b.n	8002230 <HAL_RCC_OscConfig+0xac>
 8002516:	e767      	b.n	80023e8 <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	4e6d      	ldr	r6, [pc, #436]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 800251a:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_RCC_OscConfig+0x550>)
 800251c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800251e:	4013      	ands	r3, r2
 8002520:	6533      	str	r3, [r6, #80]	@ 0x50
 8002522:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8002524:	4a6c      	ldr	r2, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x554>)
 8002526:	4013      	ands	r3, r2
 8002528:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800252a:	f7ff f855 	bl	80015d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	4b69      	ldr	r3, [pc, #420]	@ (80026dc <HAL_RCC_OscConfig+0x558>)
      tickstart = HAL_GetTick();
 8002536:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800253a:	e004      	b.n	8002546 <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff f84c 	bl	80015d8 <HAL_GetTick>
 8002540:	1bc0      	subs	r0, r0, r7
 8002542:	4548      	cmp	r0, r9
 8002544:	d814      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002546:	4642      	mov	r2, r8
 8002548:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800254a:	4213      	tst	r3, r2
 800254c:	d1f6      	bne.n	800253c <HAL_RCC_OscConfig+0x3b8>
 800254e:	e71b      	b.n	8002388 <HAL_RCC_OscConfig+0x204>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	433b      	orrs	r3, r7
 8002554:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002556:	f7ff f83f 	bl	80015d8 <HAL_GetTick>
 800255a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	6833      	ldr	r3, [r6, #0]
 800255e:	423b      	tst	r3, r7
 8002560:	d000      	beq.n	8002564 <HAL_RCC_OscConfig+0x3e0>
 8002562:	e6e6      	b.n	8002332 <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002564:	f7ff f838 	bl	80015d8 <HAL_GetTick>
 8002568:	4643      	mov	r3, r8
 800256a:	1ac0      	subs	r0, r0, r3
 800256c:	2864      	cmp	r0, #100	@ 0x64
 800256e:	d9f5      	bls.n	800255c <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8002570:	2003      	movs	r0, #3
 8002572:	e72b      	b.n	80023cc <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_LSI_DISABLE();
 8002574:	2201      	movs	r2, #1
 8002576:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8002578:	4393      	bics	r3, r2
 800257a:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800257c:	f7ff f82c 	bl	80015d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002580:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002582:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002584:	4698      	mov	r8, r3
 8002586:	e004      	b.n	8002592 <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff f826 	bl	80015d8 <HAL_GetTick>
 800258c:	1bc0      	subs	r0, r0, r7
 800258e:	2802      	cmp	r0, #2
 8002590:	d8ee      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002592:	4642      	mov	r2, r8
 8002594:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8002596:	421a      	tst	r2, r3
 8002598:	d1f6      	bne.n	8002588 <HAL_RCC_OscConfig+0x404>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	e6b3      	b.n	8002306 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 800259e:	2201      	movs	r2, #1
 80025a0:	6833      	ldr	r3, [r6, #0]
 80025a2:	4393      	bics	r3, r2
 80025a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80025a6:	f7ff f817 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025aa:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80025ac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025ae:	4698      	mov	r8, r3
 80025b0:	e004      	b.n	80025bc <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff f811 	bl	80015d8 <HAL_GetTick>
 80025b6:	1bc0      	subs	r0, r0, r7
 80025b8:	2802      	cmp	r0, #2
 80025ba:	d8d9      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025bc:	4642      	mov	r2, r8
 80025be:	6833      	ldr	r3, [r6, #0]
 80025c0:	421a      	tst	r2, r3
 80025c2:	d1f6      	bne.n	80025b2 <HAL_RCC_OscConfig+0x42e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	e733      	b.n	8002430 <HAL_RCC_OscConfig+0x2ac>
        __HAL_RCC_MSI_DISABLE();
 80025c8:	6833      	ldr	r3, [r6, #0]
 80025ca:	4a42      	ldr	r2, [pc, #264]	@ (80026d4 <HAL_RCC_OscConfig+0x550>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80025d0:	f7ff f802 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80025d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025da:	4698      	mov	r8, r3
 80025dc:	e004      	b.n	80025e8 <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025de:	f7fe fffb 	bl	80015d8 <HAL_GetTick>
 80025e2:	1bc0      	subs	r0, r0, r7
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d8c3      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025e8:	4642      	mov	r2, r8
 80025ea:	6833      	ldr	r3, [r6, #0]
 80025ec:	4213      	tst	r3, r2
 80025ee:	d1f6      	bne.n	80025de <HAL_RCC_OscConfig+0x45a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	e66c      	b.n	80022ce <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 80025f8:	02c9      	lsls	r1, r1, #11
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	4301      	orrs	r1, r0
 80025fe:	6019      	str	r1, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002606:	e754      	b.n	80024b2 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8002608:	4d31      	ldr	r5, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 800260a:	4a35      	ldr	r2, [pc, #212]	@ (80026e0 <HAL_RCC_OscConfig+0x55c>)
 800260c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800260e:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002610:	4013      	ands	r3, r2
 8002612:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002614:	f7fe ffe0 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002618:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800261a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800261c:	e004      	b.n	8002628 <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe ffdb 	bl	80015d8 <HAL_GetTick>
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	2802      	cmp	r0, #2
 8002626:	d8a3      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	423b      	tst	r3, r7
 800262c:	d1f7      	bne.n	800261e <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002630:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002632:	68ea      	ldr	r2, [r5, #12]
 8002634:	430b      	orrs	r3, r1
 8002636:	492b      	ldr	r1, [pc, #172]	@ (80026e4 <HAL_RCC_OscConfig+0x560>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002638:	4e25      	ldr	r6, [pc, #148]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263a:	400a      	ands	r2, r1
 800263c:	4313      	orrs	r3, r2
 800263e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002640:	4313      	orrs	r3, r2
 8002642:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	682a      	ldr	r2, [r5, #0]
 8002648:	045b      	lsls	r3, r3, #17
 800264a:	4313      	orrs	r3, r2
 800264c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800264e:	f7fe ffc3 	bl	80015d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002652:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002654:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002656:	04ad      	lsls	r5, r5, #18
 8002658:	e004      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe ffbd 	bl	80015d8 <HAL_GetTick>
 800265e:	1b00      	subs	r0, r0, r4
 8002660:	2802      	cmp	r0, #2
 8002662:	d885      	bhi.n	8002570 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002664:	6833      	ldr	r3, [r6, #0]
 8002666:	422b      	tst	r3, r5
 8002668:	d0f7      	beq.n	800265a <HAL_RCC_OscConfig+0x4d6>
 800266a:	e6ae      	b.n	80023ca <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 800266e:	491e      	ldr	r1, [pc, #120]	@ (80026e8 <HAL_RCC_OscConfig+0x564>)
 8002670:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002672:	400b      	ands	r3, r1
 8002674:	6393      	str	r3, [r2, #56]	@ 0x38
 8002676:	e68b      	b.n	8002390 <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 800267a:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 800267c:	430b      	orrs	r3, r1
 800267e:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002680:	e66e      	b.n	8002360 <HAL_RCC_OscConfig+0x1dc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	2b01      	cmp	r3, #1
 8002684:	d100      	bne.n	8002688 <HAL_RCC_OscConfig+0x504>
 8002686:	e70e      	b.n	80024a6 <HAL_RCC_OscConfig+0x322>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002688:	2280      	movs	r2, #128	@ 0x80
        pll_config = RCC->CFGR;
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        pll_config = RCC->CFGR;
 800268e:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002690:	0252      	lsls	r2, r2, #9
 8002692:	401a      	ands	r2, r3
 8002694:	428a      	cmp	r2, r1
 8002696:	d000      	beq.n	800269a <HAL_RCC_OscConfig+0x516>
 8002698:	e705      	b.n	80024a6 <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800269a:	22f0      	movs	r2, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800269e:	0392      	lsls	r2, r2, #14
 80026a0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	428a      	cmp	r2, r1
 80026a4:	d000      	beq.n	80026a8 <HAL_RCC_OscConfig+0x524>
 80026a6:	e6fe      	b.n	80024a6 <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026a8:	22c0      	movs	r2, #192	@ 0xc0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026aa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026ac:	0412      	lsls	r2, r2, #16
 80026ae:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026b0:	1a18      	subs	r0, r3, r0
 80026b2:	1e43      	subs	r3, r0, #1
 80026b4:	4198      	sbcs	r0, r3
 80026b6:	b2c0      	uxtb	r0, r0
 80026b8:	e688      	b.n	80023cc <HAL_RCC_OscConfig+0x248>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_OscConfig+0x54c>)
 80026bc:	3901      	subs	r1, #1
 80026be:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80026c0:	39ff      	subs	r1, #255	@ 0xff
 80026c2:	4301      	orrs	r1, r0
 80026c4:	6519      	str	r1, [r3, #80]	@ 0x50
 80026c6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026c8:	430a      	orrs	r2, r1
 80026ca:	651a      	str	r2, [r3, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	e648      	b.n	8002360 <HAL_RCC_OscConfig+0x1dc>
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	40021000 	.word	0x40021000
 80026d4:	fffffeff 	.word	0xfffffeff
 80026d8:	fffffbff 	.word	0xfffffbff
 80026dc:	00001388 	.word	0x00001388
 80026e0:	feffffff 	.word	0xfeffffff
 80026e4:	ff02ffff 	.word	0xff02ffff
 80026e8:	efffffff 	.word	0xefffffff

080026ec <HAL_RCC_ClockConfig>:
{
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	46ce      	mov	lr, r9
 80026f0:	4647      	mov	r7, r8
 80026f2:	0005      	movs	r5, r0
 80026f4:	000c      	movs	r4, r1
 80026f6:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d066      	beq.n	80027ca <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	2201      	movs	r2, #1
 80026fe:	4e6a      	ldr	r6, [pc, #424]	@ (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	6833      	ldr	r3, [r6, #0]
 8002702:	4013      	ands	r3, r2
 8002704:	428b      	cmp	r3, r1
 8002706:	d362      	bcc.n	80027ce <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	079a      	lsls	r2, r3, #30
 800270c:	d506      	bpl.n	800271c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270e:	20f0      	movs	r0, #240	@ 0xf0
 8002710:	4966      	ldr	r1, [pc, #408]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	68ca      	ldr	r2, [r1, #12]
 8002714:	4382      	bics	r2, r0
 8002716:	68a8      	ldr	r0, [r5, #8]
 8002718:	4302      	orrs	r2, r0
 800271a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	07db      	lsls	r3, r3, #31
 800271e:	d52d      	bpl.n	800277c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002720:	4b62      	ldr	r3, [pc, #392]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002724:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	2a02      	cmp	r2, #2
 8002728:	d04d      	beq.n	80027c6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	2a03      	cmp	r2, #3
 800272c:	d100      	bne.n	8002730 <HAL_RCC_ClockConfig+0x44>
 800272e:	e06f      	b.n	8002810 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002730:	2a01      	cmp	r2, #1
 8002732:	d100      	bne.n	8002736 <HAL_RCC_ClockConfig+0x4a>
 8002734:	e0a3      	b.n	800287e <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002736:	059b      	lsls	r3, r3, #22
 8002738:	d547      	bpl.n	80027ca <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	2103      	movs	r1, #3
 800273c:	4e5b      	ldr	r6, [pc, #364]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	68f3      	ldr	r3, [r6, #12]
 8002740:	438b      	bics	r3, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002746:	f7fe ff47 	bl	80015d8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800274c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	2b02      	cmp	r3, #2
 8002750:	d100      	bne.n	8002754 <HAL_RCC_ClockConfig+0x68>
 8002752:	e074      	b.n	800283e <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002754:	2b03      	cmp	r3, #3
 8002756:	d100      	bne.n	800275a <HAL_RCC_ClockConfig+0x6e>
 8002758:	e081      	b.n	800285e <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800275a:	2b01      	cmp	r3, #1
 800275c:	d100      	bne.n	8002760 <HAL_RCC_ClockConfig+0x74>
 800275e:	e093      	b.n	8002888 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002760:	230c      	movs	r3, #12
 8002762:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	4b52      	ldr	r3, [pc, #328]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4699      	mov	r9, r3
 8002768:	e004      	b.n	8002774 <HAL_RCC_ClockConfig+0x88>
 800276a:	f7fe ff35 	bl	80015d8 <HAL_GetTick>
 800276e:	1bc0      	subs	r0, r0, r7
 8002770:	4548      	cmp	r0, r9
 8002772:	d842      	bhi.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002774:	4642      	mov	r2, r8
 8002776:	68f3      	ldr	r3, [r6, #12]
 8002778:	421a      	tst	r2, r3
 800277a:	d1f6      	bne.n	800276a <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	2201      	movs	r2, #1
 800277e:	4e4a      	ldr	r6, [pc, #296]	@ (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	6833      	ldr	r3, [r6, #0]
 8002782:	4013      	ands	r3, r2
 8002784:	42a3      	cmp	r3, r4
 8002786:	d847      	bhi.n	8002818 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	075a      	lsls	r2, r3, #29
 800278c:	d506      	bpl.n	800279c <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278e:	4947      	ldr	r1, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	4848      	ldr	r0, [pc, #288]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	68ca      	ldr	r2, [r1, #12]
 8002794:	4002      	ands	r2, r0
 8002796:	68e8      	ldr	r0, [r5, #12]
 8002798:	4302      	orrs	r2, r0
 800279a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	071b      	lsls	r3, r3, #28
 800279e:	d42e      	bmi.n	80027fe <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a0:	f7ff fca8 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	4a44      	ldr	r2, [pc, #272]	@ (80028b8 <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4944      	ldr	r1, [pc, #272]	@ (80028bc <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	0f1b      	lsrs	r3, r3, #28
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80027b4:	4b42      	ldr	r3, [pc, #264]	@ (80028c0 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b6:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	f7fe fec7 	bl	800154c <HAL_InitTick>
}
 80027be:	bcc0      	pop	{r6, r7}
 80027c0:	46b9      	mov	r9, r7
 80027c2:	46b0      	mov	r8, r6
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c6:	039b      	lsls	r3, r3, #14
 80027c8:	d4b7      	bmi.n	800273a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
 80027cc:	e7f7      	b.n	80027be <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	6833      	ldr	r3, [r6, #0]
 80027d0:	4393      	bics	r3, r2
 80027d2:	430b      	orrs	r3, r1
 80027d4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80027d6:	f7fe feff 	bl	80015d8 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	2301      	movs	r3, #1
 80027dc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 80027e0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e4:	4642      	mov	r2, r8
 80027e6:	6833      	ldr	r3, [r6, #0]
 80027e8:	4013      	ands	r3, r2
 80027ea:	42a3      	cmp	r3, r4
 80027ec:	d100      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x104>
 80027ee:	e78b      	b.n	8002708 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fef2 	bl	80015d8 <HAL_GetTick>
 80027f4:	1bc0      	subs	r0, r0, r7
 80027f6:	4548      	cmp	r0, r9
 80027f8:	d9f4      	bls.n	80027e4 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 80027fa:	2003      	movs	r0, #3
 80027fc:	e7df      	b.n	80027be <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	492b      	ldr	r1, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	692b      	ldr	r3, [r5, #16]
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	482f      	ldr	r0, [pc, #188]	@ (80028c4 <HAL_RCC_ClockConfig+0x1d8>)
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4002      	ands	r2, r0
 800280a:	4313      	orrs	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
 800280e:	e7c7      	b.n	80027a0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	d492      	bmi.n	800273a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
 8002816:	e7d2      	b.n	80027be <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002818:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281c:	4393      	bics	r3, r2
 800281e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002820:	f7fe feda 	bl	80015d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8002826:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	6833      	ldr	r3, [r6, #0]
 800282c:	421f      	tst	r7, r3
 800282e:	d0ab      	beq.n	8002788 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fed2 	bl	80015d8 <HAL_GetTick>
 8002834:	1b00      	subs	r0, r0, r4
 8002836:	4540      	cmp	r0, r8
 8002838:	d9f7      	bls.n	800282a <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
 800283c:	e7bf      	b.n	80027be <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800283e:	330a      	adds	r3, #10
 8002840:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002842:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	4699      	mov	r9, r3
 8002846:	e004      	b.n	8002852 <HAL_RCC_ClockConfig+0x166>
 8002848:	f7fe fec6 	bl	80015d8 <HAL_GetTick>
 800284c:	1bc0      	subs	r0, r0, r7
 800284e:	4548      	cmp	r0, r9
 8002850:	d8d3      	bhi.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002852:	4642      	mov	r2, r8
 8002854:	68f3      	ldr	r3, [r6, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b08      	cmp	r3, #8
 800285a:	d1f5      	bne.n	8002848 <HAL_RCC_ClockConfig+0x15c>
 800285c:	e78e      	b.n	800277c <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285e:	3309      	adds	r3, #9
 8002860:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	4699      	mov	r9, r3
 8002866:	e004      	b.n	8002872 <HAL_RCC_ClockConfig+0x186>
 8002868:	f7fe feb6 	bl	80015d8 <HAL_GetTick>
 800286c:	1bc0      	subs	r0, r0, r7
 800286e:	4548      	cmp	r0, r9
 8002870:	d8c3      	bhi.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	4642      	mov	r2, r8
 8002874:	68f3      	ldr	r3, [r6, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d1f5      	bne.n	8002868 <HAL_RCC_ClockConfig+0x17c>
 800287c:	e77e      	b.n	800277c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800287e:	075b      	lsls	r3, r3, #29
 8002880:	d500      	bpl.n	8002884 <HAL_RCC_ClockConfig+0x198>
 8002882:	e75a      	b.n	800273a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
 8002886:	e79a      	b.n	80027be <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002888:	330b      	adds	r3, #11
 800288a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4699      	mov	r9, r3
 8002890:	e004      	b.n	800289c <HAL_RCC_ClockConfig+0x1b0>
 8002892:	f7fe fea1 	bl	80015d8 <HAL_GetTick>
 8002896:	1bc0      	subs	r0, r0, r7
 8002898:	4548      	cmp	r0, r9
 800289a:	d8ae      	bhi.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800289c:	4642      	mov	r2, r8
 800289e:	68f3      	ldr	r3, [r6, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d1f5      	bne.n	8002892 <HAL_RCC_ClockConfig+0x1a6>
 80028a6:	e769      	b.n	800277c <HAL_RCC_ClockConfig+0x90>
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	00001388 	.word	0x00001388
 80028b4:	fffff8ff 	.word	0xfffff8ff
 80028b8:	080035d4 	.word	0x080035d4
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000014 	.word	0x20000014
 80028c4:	ffffc7ff 	.word	0xffffc7ff

080028c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	46ce      	mov	lr, r9
 80028cc:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ce:	6803      	ldr	r3, [r0, #0]
{
 80028d0:	0004      	movs	r4, r0
 80028d2:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d4:	069a      	lsls	r2, r3, #26
 80028d6:	d567      	bpl.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d8:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 80028da:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80028de:	055b      	lsls	r3, r3, #21
 80028e0:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 80028e2:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	4219      	tst	r1, r3
 80028e6:	d100      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x22>
 80028e8:	e088      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	2680      	movs	r6, #128	@ 0x80
 80028ec:	4d59      	ldr	r5, [pc, #356]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028ee:	0076      	lsls	r6, r6, #1
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	4233      	tst	r3, r6
 80028f4:	d100      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80028f6:	e08d      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80028f8:	20c0      	movs	r0, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028fa:	4955      	ldr	r1, [pc, #340]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80028fc:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028fe:	680a      	ldr	r2, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002900:	0380      	lsls	r0, r0, #14
 8002902:	405a      	eors	r2, r3
 8002904:	4202      	tst	r2, r0
 8002906:	d006      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002908:	22c0      	movs	r2, #192	@ 0xc0
 800290a:	0018      	movs	r0, r3
 800290c:	0292      	lsls	r2, r2, #10
 800290e:	4010      	ands	r0, r2
 8002910:	4290      	cmp	r0, r2
 8002912:	d100      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002914:	e096      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002916:	4d4e      	ldr	r5, [pc, #312]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002918:	22c0      	movs	r2, #192	@ 0xc0
 800291a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800291c:	0292      	lsls	r2, r2, #10
 800291e:	0006      	movs	r6, r0

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002920:	6821      	ldr	r1, [r4, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002922:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002924:	4210      	tst	r0, r2
 8002926:	d024      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002928:	401a      	ands	r2, r3
 800292a:	42b2      	cmp	r2, r6
 800292c:	d021      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800292e:	0689      	lsls	r1, r1, #26
 8002930:	d536      	bpl.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002932:	2680      	movs	r6, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002934:	6d29      	ldr	r1, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002936:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8002938:	0336      	lsls	r6, r6, #12
 800293a:	433e      	orrs	r6, r7
 800293c:	652e      	str	r6, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293e:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002940:	4845      	ldr	r0, [pc, #276]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002942:	4f46      	ldr	r7, [pc, #280]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002944:	4008      	ands	r0, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002946:	403e      	ands	r6, r7
 8002948:	652e      	str	r6, [r5, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800294a:	6528      	str	r0, [r5, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800294c:	05c9      	lsls	r1, r1, #23
 800294e:	d516      	bpl.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fe42 	bl	80015d8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002954:	2780      	movs	r7, #128	@ 0x80
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	4b42      	ldr	r3, [pc, #264]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
        tickstart = HAL_GetTick();
 8002958:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295c:	00bf      	lsls	r7, r7, #2
 800295e:	e004      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe fe3a 	bl	80015d8 <HAL_GetTick>
 8002964:	1b80      	subs	r0, r0, r6
 8002966:	4548      	cmp	r0, r9
 8002968:	d863      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800296c:	423b      	tst	r3, r7
 800296e:	d0f7      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002970:	6821      	ldr	r1, [r4, #0]
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002972:	0689      	lsls	r1, r1, #26
 8002974:	d514      	bpl.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002976:	22c0      	movs	r2, #192	@ 0xc0
 8002978:	6863      	ldr	r3, [r4, #4]
 800297a:	0292      	lsls	r2, r2, #10
 800297c:	401a      	ands	r2, r3
 800297e:	21c0      	movs	r1, #192	@ 0xc0
 8002980:	0289      	lsls	r1, r1, #10
 8002982:	428a      	cmp	r2, r1
 8002984:	d108      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002986:	4832      	ldr	r0, [pc, #200]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002988:	4d36      	ldr	r5, [pc, #216]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800298a:	6801      	ldr	r1, [r0, #0]
 800298c:	4029      	ands	r1, r5
 800298e:	25c0      	movs	r5, #192	@ 0xc0
 8002990:	03ad      	lsls	r5, r5, #14
 8002992:	402b      	ands	r3, r5
 8002994:	430b      	orrs	r3, r1
 8002996:	6003      	str	r3, [r0, #0]
 8002998:	492d      	ldr	r1, [pc, #180]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800299a:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 800299c:	4313      	orrs	r3, r2
 800299e:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a0:	4643      	mov	r3, r8
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d047      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	079a      	lsls	r2, r3, #30
 80029aa:	d506      	bpl.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ac:	200c      	movs	r0, #12
 80029ae:	4928      	ldr	r1, [pc, #160]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029b0:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80029b2:	4382      	bics	r2, r0
 80029b4:	68a0      	ldr	r0, [r4, #8]
 80029b6:	4302      	orrs	r2, r0
 80029b8:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ba:	075a      	lsls	r2, r3, #29
 80029bc:	d506      	bpl.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029be:	4924      	ldr	r1, [pc, #144]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029c0:	4829      	ldr	r0, [pc, #164]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029c2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80029c4:	4002      	ands	r2, r0
 80029c6:	68e0      	ldr	r0, [r4, #12]
 80029c8:	4302      	orrs	r2, r0
 80029ca:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029cc:	071a      	lsls	r2, r3, #28
 80029ce:	d506      	bpl.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d0:	491f      	ldr	r1, [pc, #124]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029d2:	4826      	ldr	r0, [pc, #152]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029d4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80029d6:	4002      	ands	r2, r0
 80029d8:	6920      	ldr	r0, [r4, #16]
 80029da:	4302      	orrs	r2, r0
 80029dc:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	d404      	bmi.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80029e2:	2000      	movs	r0, #0
}
 80029e4:	bcc0      	pop	{r6, r7}
 80029e6:	46b9      	mov	r9, r7
 80029e8:	46b0      	mov	r8, r6
 80029ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029ec:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029ee:	4920      	ldr	r1, [pc, #128]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029f0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80029f2:	400b      	ands	r3, r1
 80029f4:	6961      	ldr	r1, [r4, #20]
 80029f6:	430b      	orrs	r3, r1
 80029f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fa:	e7f2      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	2680      	movs	r6, #128	@ 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4d13      	ldr	r5, [pc, #76]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
      pwrclkchanged = SET;
 8002a08:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	682b      	ldr	r3, [r5, #0]
 8002a0c:	0076      	lsls	r6, r6, #1
 8002a0e:	4233      	tst	r3, r6
 8002a10:	d000      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a12:	e771      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	4333      	orrs	r3, r6
 8002a18:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fddd 	bl	80015d8 <HAL_GetTick>
 8002a1e:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	4233      	tst	r3, r6
 8002a24:	d000      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002a26:	e767      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fdd6 	bl	80015d8 <HAL_GetTick>
 8002a2c:	1bc0      	subs	r0, r0, r7
 8002a2e:	2864      	cmp	r0, #100	@ 0x64
 8002a30:	d9f6      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
 8002a34:	e7d6      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4a06      	ldr	r2, [pc, #24]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a38:	490e      	ldr	r1, [pc, #56]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	6393      	str	r3, [r2, #56]	@ 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	e7b1      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a44:	680a      	ldr	r2, [r1, #0]
 8002a46:	0392      	lsls	r2, r2, #14
 8002a48:	d400      	bmi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002a4a:	e764      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          return HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	e7c9      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
 8002a58:	fffcffff 	.word	0xfffcffff
 8002a5c:	fff7ffff 	.word	0xfff7ffff
 8002a60:	00001388 	.word	0x00001388
 8002a64:	ffcfffff 	.word	0xffcfffff
 8002a68:	fffff3ff 	.word	0xfffff3ff
 8002a6c:	ffffcfff 	.word	0xffffcfff
 8002a70:	fff3ffff 	.word	0xfff3ffff
 8002a74:	efffffff 	.word	0xefffffff

08002a78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7a:	46c6      	mov	lr, r8
 8002a7c:	0004      	movs	r4, r0
 8002a7e:	b500      	push	{lr}
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d067      	beq.n	8002b54 <HAL_RTC_Init+0xdc>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a84:	2321      	movs	r3, #33	@ 0x21
 8002a86:	5cc3      	ldrb	r3, [r0, r3]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_RTC_Init+0x32>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a8e:	2321      	movs	r3, #33	@ 0x21
 8002a90:	2202      	movs	r2, #2
 8002a92:	54e2      	strb	r2, [r4, r3]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	06d2      	lsls	r2, r2, #27
 8002a9a:	d511      	bpl.n	8002ac0 <HAL_RTC_Init+0x48>
    status = HAL_OK;
  }

  if (status == HAL_OK)
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a9c:	2321      	movs	r3, #33	@ 0x21
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	54e2      	strb	r2, [r4, r3]
  }

  return status;
}
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	46b8      	mov	r8, r7
 8002aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002aaa:	3320      	adds	r3, #32
 8002aac:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 8002aae:	f7fe fc4f 	bl	8001350 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab2:	2321      	movs	r3, #33	@ 0x21
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	54e2      	strb	r2, [r4, r3]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	06d2      	lsls	r2, r2, #27
 8002abe:	d4ed      	bmi.n	8002a9c <HAL_RTC_Init+0x24>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	22ca      	movs	r2, #202	@ 0xca
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ac4:	3a77      	subs	r2, #119	@ 0x77
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	0652      	lsls	r2, r2, #25
 8002acc:	d526      	bpl.n	8002b1c <HAL_RTC_Init+0xa4>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4930      	ldr	r1, [pc, #192]	@ (8002b94 <HAL_RTC_Init+0x11c>)
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ad2:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ad8:	6862      	ldr	r2, [r4, #4]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	4302      	orrs	r2, r0
 8002ade:	69a0      	ldr	r0, [r4, #24]
 8002ae0:	4302      	orrs	r2, r0
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ae6:	68e2      	ldr	r2, [r4, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002aea:	68a2      	ldr	r2, [r4, #8]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	0412      	lsls	r2, r2, #16
 8002af0:	430a      	orrs	r2, r1
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002af2:	2180      	movs	r1, #128	@ 0x80
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	438a      	bics	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	0692      	lsls	r2, r2, #26
 8002b00:	d52f      	bpl.n	8002b62 <HAL_RTC_Init+0xea>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002b02:	2103      	movs	r1, #3
 8002b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b06:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002b08:	438a      	bics	r2, r1
 8002b0a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b0c:	69e2      	ldr	r2, [r4, #28]
 8002b0e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002b10:	4302      	orrs	r2, r0
 8002b12:	430a      	orrs	r2, r1
 8002b14:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b16:	22ff      	movs	r2, #255	@ 0xff
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002b1a:	e7bf      	b.n	8002a9c <HAL_RTC_Init+0x24>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b1c:	2180      	movs	r1, #128	@ 0x80
 8002b1e:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2600      	movs	r6, #0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002b26:	f7fe fd57 	bl	80015d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b2a:	23fa      	movs	r3, #250	@ 0xfa
 8002b2c:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8002b2e:	0005      	movs	r5, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b30:	2740      	movs	r7, #64	@ 0x40
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b32:	4698      	mov	r8, r3
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b34:	e006      	b.n	8002b44 <HAL_RTC_Init+0xcc>
 8002b36:	2e01      	cmp	r6, #1
 8002b38:	d00a      	beq.n	8002b50 <HAL_RTC_Init+0xd8>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b3a:	f7fe fd4d 	bl	80015d8 <HAL_GetTick>
 8002b3e:	1b40      	subs	r0, r0, r5
 8002b40:	4540      	cmp	r0, r8
 8002b42:	d809      	bhi.n	8002b58 <HAL_RTC_Init+0xe0>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4217      	tst	r7, r2
 8002b4a:	d0f4      	beq.n	8002b36 <HAL_RTC_Init+0xbe>
    if (status == HAL_OK)
 8002b4c:	2e00      	cmp	r6, #0
 8002b4e:	d0be      	beq.n	8002ace <HAL_RTC_Init+0x56>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b50:	22ff      	movs	r2, #255	@ 0xff
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24
    return HAL_ERROR;
 8002b54:	2001      	movs	r0, #1
 8002b56:	e7a5      	b.n	8002aa4 <HAL_RTC_Init+0x2c>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b58:	2321      	movs	r3, #33	@ 0x21
 8002b5a:	2204      	movs	r2, #4
        status = HAL_ERROR;
 8002b5c:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5e:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 8002b60:	e7f0      	b.n	8002b44 <HAL_RTC_Init+0xcc>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b62:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_RTC_Init+0x120>)
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b64:	27fa      	movs	r7, #250	@ 0xfa
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b66:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8002b68:	f7fe fd36 	bl	80015d8 <HAL_GetTick>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b6c:	2620      	movs	r6, #32
  tickstart = HAL_GetTick();
 8002b6e:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b70:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4216      	tst	r6, r2
 8002b78:	d1c3      	bne.n	8002b02 <HAL_RTC_Init+0x8a>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b7a:	f7fe fd2d 	bl	80015d8 <HAL_GetTick>
 8002b7e:	1b40      	subs	r0, r0, r5
 8002b80:	42b8      	cmp	r0, r7
 8002b82:	d9f6      	bls.n	8002b72 <HAL_RTC_Init+0xfa>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b84:	2221      	movs	r2, #33	@ 0x21
 8002b86:	2104      	movs	r1, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b88:	6823      	ldr	r3, [r4, #0]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b8a:	54a1      	strb	r1, [r4, r2]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8c:	32de      	adds	r2, #222	@ 0xde
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002b92:	e787      	b.n	8002aa4 <HAL_RTC_Init+0x2c>
 8002b94:	ff8fffbf 	.word	0xff8fffbf
 8002b98:	0001ff5f 	.word	0x0001ff5f

08002b9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	000e      	movs	r6, r1
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ba0:	21fa      	movs	r1, #250	@ 0xfa
 8002ba2:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
{
 8002ba4:	0005      	movs	r5, r0
 8002ba6:	b083      	sub	sp, #12
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	01c9      	lsls	r1, r1, #7
{
 8002bac:	0017      	movs	r7, r2
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002bae:	f7fd faab 	bl	8000108 <__udivsi3>
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bb2:	2320      	movs	r3, #32
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002bb4:	0142      	lsls	r2, r0, #5
 8002bb6:	1a12      	subs	r2, r2, r0
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	1812      	adds	r2, r2, r0
 8002bbc:	00d2      	lsls	r2, r2, #3
 8002bbe:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hrtc);
 8002bc0:	5ce9      	ldrb	r1, [r5, r3]
 8002bc2:	2901      	cmp	r1, #1
 8002bc4:	d05e      	beq.n	8002c84 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	54e9      	strb	r1, [r5, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bca:	3301      	adds	r3, #1
 8002bcc:	3101      	adds	r1, #1
 8002bce:	54e9      	strb	r1, [r5, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd0:	682c      	ldr	r4, [r5, #0]
 8002bd2:	33a9      	adds	r3, #169	@ 0xa9
 8002bd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bd6:	3b77      	subs	r3, #119	@ 0x77
 8002bd8:	6263      	str	r3, [r4, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	055b      	lsls	r3, r3, #21
 8002bde:	d515      	bpl.n	8002c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x70>
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

        return HAL_TIMEOUT;
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002be0:	3102      	adds	r1, #2
 8002be2:	e002      	b.n	8002bea <HAL_RTCEx_SetWakeUpTimer_IT+0x4e>
 8002be4:	68e3      	ldr	r3, [r4, #12]
 8002be6:	4219      	tst	r1, r3
 8002be8:	d010      	beq.n	8002c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x70>
      count = count - 1U;
 8002bea:	9b01      	ldr	r3, [sp, #4]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8002bf0:	9b01      	ldr	r3, [sp, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f6      	bne.n	8002be4 <HAL_RTCEx_SetWakeUpTimer_IT+0x48>
    if (count == 0U)
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bf6:	2203      	movs	r2, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf8:	33ff      	adds	r3, #255	@ 0xff
 8002bfa:	6263      	str	r3, [r4, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bfc:	3bde      	subs	r3, #222	@ 0xde
 8002bfe:	54ea      	strb	r2, [r5, r3]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002c00:	2320      	movs	r3, #32
 8002c02:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
      __HAL_UNLOCK(hrtc);
 8002c06:	54ea      	strb	r2, [r5, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

  return HAL_OK;
}
 8002c08:	b003      	add	sp, #12
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c0c:	68a3      	ldr	r3, [r4, #8]
 8002c0e:	491f      	ldr	r1, [pc, #124]	@ (8002c8c <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8002c10:	400b      	ands	r3, r1
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c12:	21ff      	movs	r1, #255	@ 0xff
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c14:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c16:	68e3      	ldr	r3, [r4, #12]
 8002c18:	4019      	ands	r1, r3
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	60e3      	str	r3, [r4, #12]
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002c20:	9201      	str	r2, [sp, #4]
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002c22:	2204      	movs	r2, #4
 8002c24:	e002      	b.n	8002c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
 8002c26:	68e3      	ldr	r3, [r4, #12]
 8002c28:	421a      	tst	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
    count = count - 1U;
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002c32:	9b01      	ldr	r3, [sp, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f6      	bne.n	8002c26 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
 8002c38:	e7dd      	b.n	8002bf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	68a3      	ldr	r3, [r4, #8]
  return HAL_OK;
 8002c3e:	2000      	movs	r0, #0
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002c40:	4393      	bics	r3, r2
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c42:	2280      	movs	r2, #128	@ 0x80
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002c44:	60a3      	str	r3, [r4, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c46:	68a3      	ldr	r3, [r4, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c48:	0352      	lsls	r2, r2, #13
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c4a:	433b      	orrs	r3, r7
 8002c4c:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c50:	6166      	str	r6, [r4, #20]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	4311      	orrs	r1, r2
 8002c56:	6019      	str	r1, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002c58:	6899      	ldr	r1, [r3, #8]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	68a2      	ldr	r2, [r4, #8]
 8002c62:	01db      	lsls	r3, r3, #7
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	68a2      	ldr	r2, [r4, #8]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c72:	23ff      	movs	r3, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8002c74:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c76:	6263      	str	r3, [r4, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002c78:	3bde      	subs	r3, #222	@ 0xde
 8002c7a:	54ea      	strb	r2, [r5, r3]
  __HAL_UNLOCK(hrtc);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	54ea      	strb	r2, [r5, r3]
  return HAL_OK;
 8002c82:	e7c1      	b.n	8002c08 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  __HAL_LOCK(hrtc);
 8002c84:	2002      	movs	r0, #2
 8002c86:	e7bf      	b.n	8002c08 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
 8002c88:	2000000c 	.word	0x2000000c
 8002c8c:	fffffbff 	.word	0xfffffbff
 8002c90:	fffffb7f 	.word	0xfffffb7f
 8002c94:	40010400 	.word	0x40010400

08002c98 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	46c6      	mov	lr, r8
  uint32_t tickstart = 0U;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c9c:	2320      	movs	r3, #32
{
 8002c9e:	b500      	push	{lr}
  __HAL_LOCK(hrtc);
 8002ca0:	5cc2      	ldrb	r2, [r0, r3]
{
 8002ca2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	d03a      	beq.n	8002d1e <HAL_RTCEx_DeactivateWakeUpTimer+0x86>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cac:	3301      	adds	r3, #1
 8002cae:	3201      	adds	r2, #1
 8002cb0:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	32c8      	adds	r2, #200	@ 0xc8
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cb8:	3a77      	subs	r2, #119	@ 0x77
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	4919      	ldr	r1, [pc, #100]	@ (8002d24 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>)

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002cc0:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4917      	ldr	r1, [pc, #92]	@ (8002d28 <HAL_RTCEx_DeactivateWakeUpTimer+0x90>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8002cce:	f7fe fc83 	bl	80015d8 <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cd2:	23fa      	movs	r3, #250	@ 0xfa
 8002cd4:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8002cd6:	0006      	movs	r6, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cd8:	4698      	mov	r8, r3
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002cda:	e004      	b.n	8002ce6 <HAL_RTCEx_DeactivateWakeUpTimer+0x4e>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cdc:	f7fe fc7c 	bl	80015d8 <HAL_GetTick>
 8002ce0:	1b80      	subs	r0, r0, r6
 8002ce2:	4540      	cmp	r0, r8
 8002ce4:	d811      	bhi.n	8002d0a <HAL_RTCEx_DeactivateWakeUpTimer+0x72>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ce6:	002f      	movs	r7, r5
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	68d3      	ldr	r3, [r2, #12]
 8002cec:	401f      	ands	r7, r3
 8002cee:	421d      	tst	r5, r3
 8002cf0:	d0f4      	beq.n	8002cdc <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf2:	23ff      	movs	r3, #255	@ 0xff
 8002cf4:	6253      	str	r3, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	3bde      	subs	r3, #222	@ 0xde
 8002cfa:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cfc:	2200      	movs	r2, #0

  return HAL_OK;
 8002cfe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hrtc);
 8002d00:	3b01      	subs	r3, #1
 8002d02:	54e2      	strb	r2, [r4, r3]
}
 8002d04:	bc80      	pop	{r7}
 8002d06:	46b8      	mov	r8, r7
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0a:	22ff      	movs	r2, #255	@ 0xff
 8002d0c:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 8002d0e:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d12:	2321      	movs	r3, #33	@ 0x21
 8002d14:	3afc      	subs	r2, #252	@ 0xfc
 8002d16:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hrtc);
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	54e7      	strb	r7, [r4, r3]
      return HAL_TIMEOUT;
 8002d1c:	e7f2      	b.n	8002d04 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>
  __HAL_LOCK(hrtc);
 8002d1e:	2002      	movs	r0, #2
 8002d20:	e7f0      	b.n	8002d04 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	fffffbff 	.word	0xfffffbff
 8002d28:	ffffbfff 	.word	0xffffbfff

08002d2c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 8002d30:	0352      	lsls	r2, r2, #13
{
 8002d32:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d34:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002d36:	6802      	ldr	r2, [r0, #0]
{
 8002d38:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002d3a:	6893      	ldr	r3, [r2, #8]
 8002d3c:	045b      	lsls	r3, r3, #17
 8002d3e:	d502      	bpl.n	8002d46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1a>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002d40:	68d3      	ldr	r3, [r2, #12]
 8002d42:	055b      	lsls	r3, r3, #21
 8002d44:	d403      	bmi.n	8002d4e <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d46:	2321      	movs	r3, #33	@ 0x21
 8002d48:	2201      	movs	r2, #1
 8002d4a:	54e2      	strb	r2, [r4, r3]
}
 8002d4c:	bd10      	pop	{r4, pc}
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d4e:	21ff      	movs	r1, #255	@ 0xff
 8002d50:	68d3      	ldr	r3, [r2, #12]
 8002d52:	4019      	ands	r1, r3
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8002d56:	430b      	orrs	r3, r1
 8002d58:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d5a:	f7fe fa69 	bl	8001230 <HAL_RTCEx_WakeUpTimerEventCallback>
 8002d5e:	e7f2      	b.n	8002d46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1a>
 8002d60:	40010400 	.word	0x40010400
 8002d64:	fffffb7f 	.word	0xfffffb7f

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	46d6      	mov	lr, sl
 8002d6c:	464f      	mov	r7, r9
 8002d6e:	4646      	mov	r6, r8
 8002d70:	0004      	movs	r4, r0
 8002d72:	b5c0      	push	{r6, r7, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d100      	bne.n	8002d7a <HAL_SPI_Init+0x12>
 8002d78:	e070      	b.n	8002e5c <HAL_SPI_Init+0xf4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d055      	beq.n	8002e2c <HAL_SPI_Init+0xc4>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d84:	6163      	str	r3, [r4, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8a:	3351      	adds	r3, #81	@ 0x51
 8002d8c:	5ce3      	ldrb	r3, [r4, r3]
 8002d8e:	2600      	movs	r6, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d058      	beq.n	8002e46 <HAL_SPI_Init+0xde>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d94:	2351      	movs	r3, #81	@ 0x51
 8002d96:	4699      	mov	r9, r3
 8002d98:	464a      	mov	r2, r9

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9a:	2140      	movs	r1, #64	@ 0x40

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d9c:	2782      	movs	r7, #130	@ 0x82
 8002d9e:	2584      	movs	r5, #132	@ 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8002da0:	3b4f      	subs	r3, #79	@ 0x4f
 8002da2:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 8002da4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002da6:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8002da8:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002daa:	007f      	lsls	r7, r7, #1
  __HAL_SPI_DISABLE(hspi);
 8002dac:	438b      	bics	r3, r1
 8002dae:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	022d      	lsls	r5, r5, #8
 8002db4:	403b      	ands	r3, r7
 8002db6:	68a7      	ldr	r7, [r4, #8]
 8002db8:	69a1      	ldr	r1, [r4, #24]
 8002dba:	402f      	ands	r7, r5
 8002dbc:	2580      	movs	r5, #128	@ 0x80
 8002dbe:	433b      	orrs	r3, r7
 8002dc0:	68e7      	ldr	r7, [r4, #12]
 8002dc2:	012d      	lsls	r5, r5, #4
 8002dc4:	402f      	ands	r7, r5
 8002dc6:	4665      	mov	r5, ip
 8002dc8:	433b      	orrs	r3, r7
 8002dca:	6927      	ldr	r7, [r4, #16]
 8002dcc:	402f      	ands	r7, r5
 8002dce:	3d01      	subs	r5, #1
 8002dd0:	46aa      	mov	sl, r5
 8002dd2:	433b      	orrs	r3, r7
 8002dd4:	4657      	mov	r7, sl
 8002dd6:	6965      	ldr	r5, [r4, #20]
 8002dd8:	403d      	ands	r5, r7
 8002dda:	432b      	orrs	r3, r5
 8002ddc:	2580      	movs	r5, #128	@ 0x80
 8002dde:	00ad      	lsls	r5, r5, #2
 8002de0:	400d      	ands	r5, r1
 8002de2:	432b      	orrs	r3, r5
 8002de4:	69e5      	ldr	r5, [r4, #28]
 8002de6:	46ac      	mov	ip, r5
 8002de8:	2538      	movs	r5, #56	@ 0x38
 8002dea:	46a8      	mov	r8, r5
 8002dec:	4665      	mov	r5, ip
 8002dee:	4647      	mov	r7, r8
 8002df0:	403d      	ands	r5, r7
 8002df2:	432b      	orrs	r3, r5
 8002df4:	6a25      	ldr	r5, [r4, #32]
 8002df6:	46ac      	mov	ip, r5
 8002df8:	2580      	movs	r5, #128	@ 0x80
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	4665      	mov	r5, ip
 8002dfe:	4647      	mov	r7, r8
 8002e00:	403d      	ands	r5, r7
 8002e02:	432b      	orrs	r3, r5
 8002e04:	4333      	orrs	r3, r6
 8002e06:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e08:	0c0b      	lsrs	r3, r1, #16
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4019      	ands	r1, r3
 8002e0e:	2310      	movs	r3, #16
 8002e10:	4003      	ands	r3, r0
 8002e12:	4319      	orrs	r1, r3
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e14:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e16:	6051      	str	r1, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e18:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1a:	4652      	mov	r2, sl
 8002e1c:	464b      	mov	r3, r9

  return HAL_OK;
 8002e1e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002e20:	54e2      	strb	r2, [r4, r3]
}
 8002e22:	bce0      	pop	{r5, r6, r7}
 8002e24:	46ba      	mov	sl, r7
 8002e26:	46b1      	mov	r9, r6
 8002e28:	46a8      	mov	r8, r5
 8002e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2c:	2382      	movs	r3, #130	@ 0x82
 8002e2e:	6862      	ldr	r2, [r4, #4]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d0a7      	beq.n	8002d86 <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e36:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e38:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e3c:	3351      	adds	r3, #81	@ 0x51
 8002e3e:	5ce3      	ldrb	r3, [r4, r3]
 8002e40:	2600      	movs	r6, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1a6      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8002e46:	3350      	adds	r3, #80	@ 0x50
 8002e48:	54e6      	strb	r6, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f7fe fa9a 	bl	8001384 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002e54:	019b      	lsls	r3, r3, #6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e56:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e58:	401e      	ands	r6, r3
 8002e5a:	e79b      	b.n	8002d94 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7e0      	b.n	8002e22 <HAL_SPI_Init+0xba>

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b510      	push	{r4, lr}
 8002e62:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	d039      	beq.n	8002eda <HAL_TIM_Base_Init+0x7a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	2339      	movs	r3, #57	@ 0x39
 8002e68:	5cc3      	ldrb	r3, [r0, r3]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02f      	beq.n	8002ed0 <HAL_TIM_Base_Init+0x70>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	2339      	movs	r3, #57	@ 0x39
 8002e72:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	2180      	movs	r1, #128	@ 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8002e76:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7a:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 8002e7c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7e:	428a      	cmp	r2, r1
 8002e80:	d005      	beq.n	8002e8e <HAL_TIM_Base_Init+0x2e>
 8002e82:	4917      	ldr	r1, [pc, #92]	@ (8002ee0 <HAL_TIM_Base_Init+0x80>)
 8002e84:	428a      	cmp	r2, r1
 8002e86:	d002      	beq.n	8002e8e <HAL_TIM_Base_Init+0x2e>
 8002e88:	4916      	ldr	r1, [pc, #88]	@ (8002ee4 <HAL_TIM_Base_Init+0x84>)
 8002e8a:	428a      	cmp	r2, r1
 8002e8c:	d107      	bne.n	8002e9e <HAL_TIM_Base_Init+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8e:	2170      	movs	r1, #112	@ 0x70
 8002e90:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002e92:	68a1      	ldr	r1, [r4, #8]
 8002e94:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	4914      	ldr	r1, [pc, #80]	@ (8002ee8 <HAL_TIM_Base_Init+0x88>)
 8002e98:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	6921      	ldr	r1, [r4, #16]
 8002e9c:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	438b      	bics	r3, r1
 8002ea2:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 8002ea4:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea6:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eaa:	68e3      	ldr	r3, [r4, #12]
 8002eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eae:	6863      	ldr	r3, [r4, #4]
 8002eb0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb6:	223e      	movs	r2, #62	@ 0x3e
 8002eb8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	3a04      	subs	r2, #4
 8002ebc:	54a3      	strb	r3, [r4, r2]
 8002ebe:	3201      	adds	r2, #1
 8002ec0:	54a3      	strb	r3, [r4, r2]
 8002ec2:	3201      	adds	r2, #1
 8002ec4:	54a3      	strb	r3, [r4, r2]
 8002ec6:	3201      	adds	r2, #1
 8002ec8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002eca:	3a04      	subs	r2, #4
 8002ecc:	54a3      	strb	r3, [r4, r2]
}
 8002ece:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ed0:	3338      	adds	r3, #56	@ 0x38
 8002ed2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002ed4:	f7fe fa82 	bl	80013dc <HAL_TIM_Base_MspInit>
 8002ed8:	e7ca      	b.n	8002e70 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
 8002edc:	e7f7      	b.n	8002ece <HAL_TIM_Base_Init+0x6e>
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40011400 	.word	0x40011400
 8002ee8:	fffffcff 	.word	0xfffffcff

08002eec <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002eec:	4770      	bx	lr
 8002eee:	46c0      	nop			@ (mov r8, r8)

08002ef0 <HAL_TIM_PWM_Init>:
{
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002ef4:	d039      	beq.n	8002f6a <HAL_TIM_PWM_Init+0x7a>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	2339      	movs	r3, #57	@ 0x39
 8002ef8:	5cc3      	ldrb	r3, [r0, r3]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02f      	beq.n	8002f60 <HAL_TIM_PWM_Init+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	2339      	movs	r3, #57	@ 0x39
 8002f02:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	2180      	movs	r1, #128	@ 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f0a:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 8002f0c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f0e:	428a      	cmp	r2, r1
 8002f10:	d005      	beq.n	8002f1e <HAL_TIM_PWM_Init+0x2e>
 8002f12:	4917      	ldr	r1, [pc, #92]	@ (8002f70 <HAL_TIM_PWM_Init+0x80>)
 8002f14:	428a      	cmp	r2, r1
 8002f16:	d002      	beq.n	8002f1e <HAL_TIM_PWM_Init+0x2e>
 8002f18:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <HAL_TIM_PWM_Init+0x84>)
 8002f1a:	428a      	cmp	r2, r1
 8002f1c:	d107      	bne.n	8002f2e <HAL_TIM_PWM_Init+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1e:	2170      	movs	r1, #112	@ 0x70
 8002f20:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002f22:	68a1      	ldr	r1, [r4, #8]
 8002f24:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	4914      	ldr	r1, [pc, #80]	@ (8002f78 <HAL_TIM_PWM_Init+0x88>)
 8002f28:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	6921      	ldr	r1, [r4, #16]
 8002f2c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2e:	2180      	movs	r1, #128	@ 0x80
 8002f30:	438b      	bics	r3, r1
 8002f32:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 8002f34:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f36:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002f38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	6293      	str	r3, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002f42:	2301      	movs	r3, #1
 8002f44:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	223e      	movs	r2, #62	@ 0x3e
 8002f48:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	3a04      	subs	r2, #4
 8002f4c:	54a3      	strb	r3, [r4, r2]
 8002f4e:	3201      	adds	r2, #1
 8002f50:	54a3      	strb	r3, [r4, r2]
 8002f52:	3201      	adds	r2, #1
 8002f54:	54a3      	strb	r3, [r4, r2]
 8002f56:	3201      	adds	r2, #1
 8002f58:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	3a04      	subs	r2, #4
 8002f5c:	54a3      	strb	r3, [r4, r2]
}
 8002f5e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f60:	3338      	adds	r3, #56	@ 0x38
 8002f62:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002f64:	f7ff ffc2 	bl	8002eec <HAL_TIM_PWM_MspInit>
 8002f68:	e7ca      	b.n	8002f00 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7f7      	b.n	8002f5e <HAL_TIM_PWM_Init+0x6e>
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	40010800 	.word	0x40010800
 8002f74:	40011400 	.word	0x40011400
 8002f78:	fffffcff 	.word	0xfffffcff

08002f7c <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	000d      	movs	r5, r1
 8002f80:	0004      	movs	r4, r0
 8002f82:	0011      	movs	r1, r2
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	d13b      	bne.n	8003000 <HAL_TIM_PWM_Start_DMA+0x84>
 8002f88:	263a      	movs	r6, #58	@ 0x3a
 8002f8a:	5d82      	ldrb	r2, [r0, r6]
 8002f8c:	b2d0      	uxtb	r0, r2
 8002f8e:	2a02      	cmp	r2, #2
 8002f90:	d035      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 8002f92:	5da2      	ldrb	r2, [r4, r6]
 8002f94:	2a01      	cmp	r2, #1
 8002f96:	d147      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d045      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d043      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	55a2      	strb	r2, [r4, r6]
 8002fa4:	6a20      	ldr	r0, [r4, #32]
 8002fa6:	4a53      	ldr	r2, [pc, #332]	@ (80030f4 <HAL_TIM_PWM_Start_DMA+0x178>)
 8002fa8:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8002faa:	4a53      	ldr	r2, [pc, #332]	@ (80030f8 <HAL_TIM_PWM_Start_DMA+0x17c>)
 8002fac:	6302      	str	r2, [r0, #48]	@ 0x30
 8002fae:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_TIM_PWM_Start_DMA+0x180>)
 8002fb0:	6342      	str	r2, [r0, #52]	@ 0x34
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	3234      	adds	r2, #52	@ 0x34
 8002fb6:	f7fe fea1 	bl	8001cfc <HAL_DMA_Start_IT>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d134      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	68d9      	ldr	r1, [r3, #12]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	2001      	movs	r0, #1
 8002fcc:	221f      	movs	r2, #31
 8002fce:	0001      	movs	r1, r0
 8002fd0:	402a      	ands	r2, r5
 8002fd2:	4091      	lsls	r1, r2
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	6a19      	ldr	r1, [r3, #32]
 8002fd8:	4391      	bics	r1, r2
 8002fda:	6219      	str	r1, [r3, #32]
 8002fdc:	6a19      	ldr	r1, [r3, #32]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	621a      	str	r2, [r3, #32]
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	05d2      	lsls	r2, r2, #23
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d042      	beq.n	8003070 <HAL_TIM_PWM_Start_DMA+0xf4>
 8002fea:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_TIM_PWM_Start_DMA+0x184>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03f      	beq.n	8003070 <HAL_TIM_PWM_Start_DMA+0xf4>
 8002ff0:	4a44      	ldr	r2, [pc, #272]	@ (8003104 <HAL_TIM_PWM_Start_DMA+0x188>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d03c      	beq.n	8003070 <HAL_TIM_PWM_Start_DMA+0xf4>
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4302      	orrs	r2, r0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	2d04      	cmp	r5, #4
 8003002:	d013      	beq.n	800302c <HAL_TIM_PWM_Start_DMA+0xb0>
 8003004:	2d08      	cmp	r5, #8
 8003006:	d03e      	beq.n	8003086 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003008:	223d      	movs	r2, #61	@ 0x3d
 800300a:	5c86      	ldrb	r6, [r0, r2]
 800300c:	b2f0      	uxtb	r0, r6
 800300e:	2e02      	cmp	r6, #2
 8003010:	d0f5      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 8003012:	5ca0      	ldrb	r0, [r4, r2]
 8003014:	2801      	cmp	r0, #1
 8003016:	d107      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003018:	2900      	cmp	r1, #0
 800301a:	d005      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003020:	2002      	movs	r0, #2
 8003022:	54a0      	strb	r0, [r4, r2]
 8003024:	2d0c      	cmp	r5, #12
 8003026:	d050      	beq.n	80030ca <HAL_TIM_PWM_Start_DMA+0x14e>
 8003028:	2001      	movs	r0, #1
 800302a:	e7e8      	b.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 800302c:	223b      	movs	r2, #59	@ 0x3b
 800302e:	5c86      	ldrb	r6, [r0, r2]
 8003030:	b2f0      	uxtb	r0, r6
 8003032:	2e02      	cmp	r6, #2
 8003034:	d0e3      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 8003036:	5ca0      	ldrb	r0, [r4, r2]
 8003038:	2801      	cmp	r0, #1
 800303a:	d1f5      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 800303c:	2900      	cmp	r1, #0
 800303e:	d0f3      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f1      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003044:	2002      	movs	r0, #2
 8003046:	54a0      	strb	r0, [r4, r2]
 8003048:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800304a:	4a2a      	ldr	r2, [pc, #168]	@ (80030f4 <HAL_TIM_PWM_Start_DMA+0x178>)
 800304c:	62c2      	str	r2, [r0, #44]	@ 0x2c
 800304e:	4a2a      	ldr	r2, [pc, #168]	@ (80030f8 <HAL_TIM_PWM_Start_DMA+0x17c>)
 8003050:	6302      	str	r2, [r0, #48]	@ 0x30
 8003052:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_TIM_PWM_Start_DMA+0x180>)
 8003054:	6342      	str	r2, [r0, #52]	@ 0x34
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	3238      	adds	r2, #56	@ 0x38
 800305a:	f7fe fe4f 	bl	8001cfc <HAL_DMA_Start_IT>
 800305e:	2800      	cmp	r0, #0
 8003060:	d1e2      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003062:	2280      	movs	r2, #128	@ 0x80
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	00d2      	lsls	r2, r2, #3
 8003068:	68d9      	ldr	r1, [r3, #12]
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e7ac      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x4e>
 8003070:	2207      	movs	r2, #7
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	400a      	ands	r2, r1
 8003076:	2a06      	cmp	r2, #6
 8003078:	d0c0      	beq.n	8002ffc <HAL_TIM_PWM_Start_DMA+0x80>
 800307a:	2101      	movs	r1, #1
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2000      	movs	r0, #0
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e7bb      	b.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 8003086:	223c      	movs	r2, #60	@ 0x3c
 8003088:	5c86      	ldrb	r6, [r0, r2]
 800308a:	b2f0      	uxtb	r0, r6
 800308c:	2e02      	cmp	r6, #2
 800308e:	d0b6      	beq.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x82>
 8003090:	5ca0      	ldrb	r0, [r4, r2]
 8003092:	2801      	cmp	r0, #1
 8003094:	d1c8      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 8003096:	2900      	cmp	r1, #0
 8003098:	d0c6      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0c4      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 800309e:	2002      	movs	r0, #2
 80030a0:	54a0      	strb	r0, [r4, r2]
 80030a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80030a4:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <HAL_TIM_PWM_Start_DMA+0x178>)
 80030a6:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80030a8:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <HAL_TIM_PWM_Start_DMA+0x17c>)
 80030aa:	6302      	str	r2, [r0, #48]	@ 0x30
 80030ac:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <HAL_TIM_PWM_Start_DMA+0x180>)
 80030ae:	6342      	str	r2, [r0, #52]	@ 0x34
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	323c      	adds	r2, #60	@ 0x3c
 80030b4:	f7fe fe22 	bl	8001cfc <HAL_DMA_Start_IT>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d1b5      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	68d9      	ldr	r1, [r3, #12]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	e77f      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x4e>
 80030ca:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80030cc:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_TIM_PWM_Start_DMA+0x178>)
 80030ce:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80030d0:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_TIM_PWM_Start_DMA+0x17c>)
 80030d2:	6302      	str	r2, [r0, #48]	@ 0x30
 80030d4:	4a09      	ldr	r2, [pc, #36]	@ (80030fc <HAL_TIM_PWM_Start_DMA+0x180>)
 80030d6:	6342      	str	r2, [r0, #52]	@ 0x34
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	3240      	adds	r2, #64	@ 0x40
 80030dc:	f7fe fe0e 	bl	8001cfc <HAL_DMA_Start_IT>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1a1      	bne.n	8003028 <HAL_TIM_PWM_Start_DMA+0xac>
 80030e4:	2280      	movs	r2, #128	@ 0x80
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	0152      	lsls	r2, r2, #5
 80030ea:	68d9      	ldr	r1, [r3, #12]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	e76b      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x4e>
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	080033e9 	.word	0x080033e9
 80030f8:	0800345d 	.word	0x0800345d
 80030fc:	080034a1 	.word	0x080034a1
 8003100:	40010800 	.word	0x40010800
 8003104:	40011400 	.word	0x40011400

08003108 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003108:	2338      	movs	r3, #56	@ 0x38
{
 800310a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800310c:	5cc4      	ldrb	r4, [r0, r3]
{
 800310e:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8003110:	2c01      	cmp	r4, #1
 8003112:	d100      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0xe>
 8003114:	e0a2      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x154>
 8003116:	2001      	movs	r0, #1
 8003118:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 800311a:	2a08      	cmp	r2, #8
 800311c:	d059      	beq.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0xca>
 800311e:	d82e      	bhi.n	800317e <HAL_TIM_PWM_ConfigChannel+0x76>
 8003120:	2a00      	cmp	r2, #0
 8003122:	d100      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003124:	e078      	b.n	8003218 <HAL_TIM_PWM_ConfigChannel+0x110>
 8003126:	2a04      	cmp	r2, #4
 8003128:	d125      	bne.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x6e>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312a:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800312c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	4382      	bics	r2, r0
 8003132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003134:	6a1c      	ldr	r4, [r3, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003136:	484a      	ldr	r0, [pc, #296]	@ (8003260 <HAL_TIM_PWM_ConfigChannel+0x158>)
  tmpcr2 =  TIMx->CR2;
 8003138:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800313a:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800313c:	4002      	ands	r2, r0

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313e:	6808      	ldr	r0, [r1, #0]
 8003140:	0200      	lsls	r0, r0, #8
 8003142:	4310      	orrs	r0, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003144:	2220      	movs	r2, #32
 8003146:	4394      	bics	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003148:	688a      	ldr	r2, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314c:	0112      	lsls	r2, r2, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314e:	6198      	str	r0, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003150:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003152:	4322      	orrs	r2, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8003154:	6398      	str	r0, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003158:	2280      	movs	r2, #128	@ 0x80
 800315a:	6998      	ldr	r0, [r3, #24]
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	4302      	orrs	r2, r0
 8003160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	483f      	ldr	r0, [pc, #252]	@ (8003264 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8003166:	4002      	ands	r2, r0
 8003168:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800316a:	68ca      	ldr	r2, [r1, #12]
 800316c:	6998      	ldr	r0, [r3, #24]
 800316e:	0212      	lsls	r2, r2, #8
 8003170:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003174:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003176:	2338      	movs	r3, #56	@ 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	54ea      	strb	r2, [r5, r3]
}
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 800317e:	2001      	movs	r0, #1
 8003180:	2a0c      	cmp	r2, #12
 8003182:	d1f8      	bne.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003184:	682b      	ldr	r3, [r5, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003186:	4838      	ldr	r0, [pc, #224]	@ (8003268 <HAL_TIM_PWM_ConfigChannel+0x160>)
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	4002      	ands	r2, r0
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	6a1c      	ldr	r4, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003190:	4833      	ldr	r0, [pc, #204]	@ (8003260 <HAL_TIM_PWM_ConfigChannel+0x158>)
  tmpcr2 =  TIMx->CR2;
 8003192:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003194:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003196:	4002      	ands	r2, r0

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	6808      	ldr	r0, [r1, #0]
 800319a:	0200      	lsls	r0, r0, #8
 800319c:	4310      	orrs	r0, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800319e:	4a33      	ldr	r2, [pc, #204]	@ (800326c <HAL_TIM_PWM_ConfigChannel+0x164>)
 80031a0:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031a2:	688a      	ldr	r2, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a4:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031a6:	0312      	lsls	r2, r2, #12

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031aa:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031ac:	4322      	orrs	r2, r4
  TIMx->CCR4 = OC_Config->Pulse;
 80031ae:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	69d8      	ldr	r0, [r3, #28]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	4302      	orrs	r2, r0
 80031ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	4829      	ldr	r0, [pc, #164]	@ (8003264 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80031c0:	4002      	ands	r2, r0
 80031c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c4:	68ca      	ldr	r2, [r1, #12]
 80031c6:	69d8      	ldr	r0, [r3, #28]
 80031c8:	0212      	lsls	r2, r2, #8
 80031ca:	4302      	orrs	r2, r0
 80031cc:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2000      	movs	r0, #0
 80031d0:	e7d1      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d2:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031d4:	4c26      	ldr	r4, [pc, #152]	@ (8003270 <HAL_TIM_PWM_ConfigChannel+0x168>)
 80031d6:	6a18      	ldr	r0, [r3, #32]
 80031d8:	4020      	ands	r0, r4
 80031da:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031dc:	2073      	movs	r0, #115	@ 0x73
  tmpccer = TIMx->CCER;
 80031de:	6a1e      	ldr	r6, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80031e0:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80031e2:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031e4:	4384      	bics	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 80031e6:	6808      	ldr	r0, [r1, #0]
 80031e8:	4304      	orrs	r4, r0
  tmpccer &= ~TIM_CCER_CC3P;
 80031ea:	4822      	ldr	r0, [pc, #136]	@ (8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80031ec:	4006      	ands	r6, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ee:	6888      	ldr	r0, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80031f0:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f2:	0200      	lsls	r0, r0, #8
  TIMx->CCMR2 = tmpccmrx;
 80031f4:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80031f6:	684c      	ldr	r4, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f8:	4330      	orrs	r0, r6
  TIMx->CCR3 = OC_Config->Pulse;
 80031fa:	63dc      	str	r4, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80031fc:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003200:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003202:	4302      	orrs	r2, r0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003204:	2004      	movs	r0, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003206:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4382      	bics	r2, r0
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320e:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003212:	430a      	orrs	r2, r1
 8003214:	61da      	str	r2, [r3, #28]
      break;
 8003216:	e7ae      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x6e>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003218:	2673      	movs	r6, #115	@ 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800321a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321c:	6a1a      	ldr	r2, [r3, #32]
 800321e:	4382      	bics	r2, r0
 8003220:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003222:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003224:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003226:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003228:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 800322a:	680e      	ldr	r6, [r1, #0]
 800322c:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 800322e:	2602      	movs	r6, #2
 8003230:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8003232:	688e      	ldr	r6, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8003234:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003236:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003238:	6848      	ldr	r0, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 800323a:	4332      	orrs	r2, r6
  TIMx->CCR1 = OC_Config->Pulse;
 800323c:	6358      	str	r0, [r3, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800323e:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 8003240:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003242:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003244:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003246:	4302      	orrs	r2, r0
 8003248:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	3804      	subs	r0, #4
 800324e:	4382      	bics	r2, r0
 8003250:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003252:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003256:	430a      	orrs	r2, r1
 8003258:	619a      	str	r2, [r3, #24]
      break;
 800325a:	e78c      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_LOCK(htim);
 800325c:	2002      	movs	r0, #2
 800325e:	e78d      	b.n	800317c <HAL_TIM_PWM_ConfigChannel+0x74>
 8003260:	ffff8cff 	.word	0xffff8cff
 8003264:	fffffbff 	.word	0xfffffbff
 8003268:	ffffefff 	.word	0xffffefff
 800326c:	ffffdfff 	.word	0xffffdfff
 8003270:	fffffeff 	.word	0xfffffeff
 8003274:	fffffdff 	.word	0xfffffdff

08003278 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003278:	2338      	movs	r3, #56	@ 0x38
{
 800327a:	b570      	push	{r4, r5, r6, lr}
 800327c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800327e:	5cc0      	ldrb	r0, [r0, r3]
 8003280:	2801      	cmp	r0, #1
 8003282:	d100      	bne.n	8003286 <HAL_TIM_ConfigClockSource+0xe>
 8003284:	e073      	b.n	800336e <HAL_TIM_ConfigClockSource+0xf6>
 8003286:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800328a:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	3301      	adds	r3, #1
 800328e:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003290:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003292:	4d51      	ldr	r5, [pc, #324]	@ (80033d8 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8003294:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003296:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003298:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800329a:	680b      	ldr	r3, [r1, #0]
 800329c:	2b60      	cmp	r3, #96	@ 0x60
 800329e:	d100      	bne.n	80032a2 <HAL_TIM_ConfigClockSource+0x2a>
 80032a0:	e067      	b.n	8003372 <HAL_TIM_ConfigClockSource+0xfa>
 80032a2:	d81d      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x68>
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d100      	bne.n	80032aa <HAL_TIM_ConfigClockSource+0x32>
 80032a8:	e07d      	b.n	80033a6 <HAL_TIM_ConfigClockSource+0x12e>
 80032aa:	d93f      	bls.n	800332c <HAL_TIM_ConfigClockSource+0xb4>
 80032ac:	2b50      	cmp	r3, #80	@ 0x50
 80032ae:	d135      	bne.n	800331c <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 80032b0:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80032b2:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b6:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	43a6      	bics	r6, r4
 80032bc:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032be:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80032c0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c6:	240a      	movs	r4, #10
 80032c8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80032ca:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032ce:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d0:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80032d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d4:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d6:	3919      	subs	r1, #25
 80032d8:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032da:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2000      	movs	r0, #0
 80032de:	e01e      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80032e0:	2480      	movs	r4, #128	@ 0x80
 80032e2:	0164      	lsls	r4, r4, #5
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	d0f9      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x64>
 80032e8:	2480      	movs	r4, #128	@ 0x80
 80032ea:	01a4      	lsls	r4, r4, #6
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d12b      	bne.n	8003348 <HAL_TIM_ConfigClockSource+0xd0>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <HAL_TIM_ConfigClockSource+0x164>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f6:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f8:	688b      	ldr	r3, [r1, #8]
 80032fa:	68c9      	ldr	r1, [r1, #12]
 80032fc:	432b      	orrs	r3, r5
 80032fe:	0209      	lsls	r1, r1, #8
 8003300:	430b      	orrs	r3, r1
 8003302:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003304:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	6881      	ldr	r1, [r0, #8]
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	430b      	orrs	r3, r1
 800330e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2000      	movs	r0, #0
 8003312:	e004      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003314:	2110      	movs	r1, #16
 8003316:	001c      	movs	r4, r3
 8003318:	438c      	bics	r4, r1
 800331a:	d00c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800331c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800331e:	2339      	movs	r3, #57	@ 0x39
 8003320:	2101      	movs	r1, #1
 8003322:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003324:	2100      	movs	r1, #0
 8003326:	3b01      	subs	r3, #1
 8003328:	54d1      	strb	r1, [r2, r3]
}
 800332a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800332c:	2b20      	cmp	r3, #32
 800332e:	d002      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xbe>
 8003330:	d9f0      	bls.n	8003314 <HAL_TIM_ConfigClockSource+0x9c>
 8003332:	2b30      	cmp	r3, #48	@ 0x30
 8003334:	d1f2      	bne.n	800331c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003336:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8003338:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800333a:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333c:	430b      	orrs	r3, r1
 800333e:	2107      	movs	r1, #7
 8003340:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003342:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2000      	movs	r0, #0
 8003346:	e7ea      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003348:	2b70      	cmp	r3, #112	@ 0x70
 800334a:	d1e7      	bne.n	800331c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 800334c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334e:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003350:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003352:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003354:	688b      	ldr	r3, [r1, #8]
 8003356:	68c9      	ldr	r1, [r1, #12]
 8003358:	432b      	orrs	r3, r5
 800335a:	0209      	lsls	r1, r1, #8
 800335c:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800335e:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003360:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8003362:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003364:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003366:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003368:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2000      	movs	r0, #0
 800336c:	e7d7      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 800336e:	2002      	movs	r0, #2
 8003370:	e7db      	b.n	800332a <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	2510      	movs	r5, #16
 8003374:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003376:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003378:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 800337a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003380:	4e17      	ldr	r6, [pc, #92]	@ (80033e0 <HAL_TIM_ConfigClockSource+0x168>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003382:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003384:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003386:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003388:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 800338a:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800338c:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800338e:	2170      	movs	r1, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003390:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8003396:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003398:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800339a:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800339c:	3909      	subs	r1, #9
 800339e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80033a0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7bb      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 80033a6:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80033a8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80033aa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ac:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ae:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b0:	43a6      	bics	r6, r4
 80033b2:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b4:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b8:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ba:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033bc:	240a      	movs	r4, #10
 80033be:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80033c0:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80033c2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80033c4:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c6:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80033c8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ca:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033cc:	3929      	subs	r1, #41	@ 0x29
 80033ce:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80033d0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2000      	movs	r0, #0
 80033d4:	e7a3      	b.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	ffff0088 	.word	0xffff0088
 80033dc:	ffff00ff 	.word	0xffff00ff
 80033e0:	ffff0fff 	.word	0xffff0fff

080033e4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80033e4:	4770      	bx	lr
 80033e6:	46c0      	nop			@ (mov r8, r8)

080033e8 <TIM_DMADelayPulseCplt>:
{
 80033e8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ea:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033ec:	6a23      	ldr	r3, [r4, #32]
 80033ee:	4283      	cmp	r3, r0
 80033f0:	d017      	beq.n	8003422 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033f4:	4283      	cmp	r3, r0
 80033f6:	d00b      	beq.n	8003410 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033fa:	4283      	cmp	r3, r0
 80033fc:	d019      	beq.n	8003432 <TIM_DMADelayPulseCplt+0x4a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80033fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003400:	4283      	cmp	r3, r0
 8003402:	d01f      	beq.n	8003444 <TIM_DMADelayPulseCplt+0x5c>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	0020      	movs	r0, r4
 8003406:	f7ff ffed 	bl	80033e4 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	2300      	movs	r3, #0
 800340c:	7623      	strb	r3, [r4, #24]
}
 800340e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003410:	2202      	movs	r2, #2
 8003412:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f4      	bne.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	333b      	adds	r3, #59	@ 0x3b
 800341c:	3a01      	subs	r2, #1
 800341e:	54e2      	strb	r2, [r4, r3]
 8003420:	e7f0      	b.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003422:	2201      	movs	r2, #1
 8003424:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1eb      	bne.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	333a      	adds	r3, #58	@ 0x3a
 800342e:	54e2      	strb	r2, [r4, r3]
 8003430:	e7e8      	b.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	2204      	movs	r2, #4
 8003434:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e3      	bne.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	333c      	adds	r3, #60	@ 0x3c
 800343e:	3a03      	subs	r2, #3
 8003440:	54e2      	strb	r2, [r4, r3]
 8003442:	e7df      	b.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003444:	2208      	movs	r2, #8
 8003446:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1da      	bne.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	333d      	adds	r3, #61	@ 0x3d
 8003450:	3a07      	subs	r2, #7
 8003452:	54e2      	strb	r2, [r4, r3]
 8003454:	e7d6      	b.n	8003404 <TIM_DMADelayPulseCplt+0x1c>
 8003456:	46c0      	nop			@ (mov r8, r8)

08003458 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003458:	4770      	bx	lr
 800345a:	46c0      	nop			@ (mov r8, r8)

0800345c <TIM_DMADelayPulseHalfCplt>:
{
 800345c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003460:	6a23      	ldr	r3, [r4, #32]
 8003462:	4283      	cmp	r3, r0
 8003464:	d011      	beq.n	800348a <TIM_DMADelayPulseHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003466:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003468:	4283      	cmp	r3, r0
 800346a:	d00b      	beq.n	8003484 <TIM_DMADelayPulseHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800346c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800346e:	4283      	cmp	r3, r0
 8003470:	d00e      	beq.n	8003490 <TIM_DMADelayPulseHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003472:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003474:	4283      	cmp	r3, r0
 8003476:	d00e      	beq.n	8003496 <TIM_DMADelayPulseHalfCplt+0x3a>
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003478:	0020      	movs	r0, r4
 800347a:	f7ff ffed 	bl	8003458 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	2300      	movs	r3, #0
 8003480:	7623      	strb	r3, [r4, #24]
}
 8003482:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003484:	2302      	movs	r3, #2
 8003486:	7623      	strb	r3, [r4, #24]
 8003488:	e7f6      	b.n	8003478 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348a:	2301      	movs	r3, #1
 800348c:	7623      	strb	r3, [r4, #24]
 800348e:	e7f3      	b.n	8003478 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003490:	2304      	movs	r3, #4
 8003492:	7623      	strb	r3, [r4, #24]
 8003494:	e7f0      	b.n	8003478 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	2308      	movs	r3, #8
 8003498:	7623      	strb	r3, [r4, #24]
 800349a:	e7ed      	b.n	8003478 <TIM_DMADelayPulseHalfCplt+0x1c>

0800349c <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 800349c:	4770      	bx	lr
 800349e:	46c0      	nop			@ (mov r8, r8)

080034a0 <TIM_DMAError>:
{
 80034a0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034a4:	6a23      	ldr	r3, [r4, #32]
 80034a6:	4283      	cmp	r3, r0
 80034a8:	d017      	beq.n	80034da <TIM_DMAError+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034ac:	4283      	cmp	r3, r0
 80034ae:	d00e      	beq.n	80034ce <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80034b2:	4283      	cmp	r3, r0
 80034b4:	d016      	beq.n	80034e4 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80034b8:	4283      	cmp	r3, r0
 80034ba:	d019      	beq.n	80034f0 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 80034bc:	2339      	movs	r3, #57	@ 0x39
 80034be:	2201      	movs	r2, #1
 80034c0:	54e2      	strb	r2, [r4, r3]
  HAL_TIM_ErrorCallback(htim);
 80034c2:	0020      	movs	r0, r4
 80034c4:	f7ff ffea 	bl	800349c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c8:	2300      	movs	r3, #0
 80034ca:	7623      	strb	r3, [r4, #24]
}
 80034cc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ce:	2302      	movs	r3, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d2:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	3339      	adds	r3, #57	@ 0x39
 80034d6:	54e2      	strb	r2, [r4, r3]
 80034d8:	e7f3      	b.n	80034c2 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	223a      	movs	r2, #58	@ 0x3a
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034de:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	54a3      	strb	r3, [r4, r2]
 80034e2:	e7ee      	b.n	80034c2 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e4:	2304      	movs	r3, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e8:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	3338      	adds	r3, #56	@ 0x38
 80034ec:	54e2      	strb	r2, [r4, r3]
 80034ee:	e7e8      	b.n	80034c2 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f0:	2308      	movs	r3, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f4:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	3335      	adds	r3, #53	@ 0x35
 80034f8:	54e2      	strb	r2, [r4, r3]
 80034fa:	e7e2      	b.n	80034c2 <TIM_DMAError+0x22>

080034fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fc:	2338      	movs	r3, #56	@ 0x38
{
 80034fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003500:	5cc3      	ldrb	r3, [r0, r3]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d021      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003506:	2339      	movs	r3, #57	@ 0x39
 8003508:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800350a:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003512:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003514:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003516:	680d      	ldr	r5, [r1, #0]
 8003518:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800351a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351c:	2280      	movs	r2, #128	@ 0x80
 800351e:	05d2      	lsls	r2, r2, #23
 8003520:	4293      	cmp	r3, r2
 8003522:	d005      	beq.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003524:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d002      	beq.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d104      	bne.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003530:	2280      	movs	r2, #128	@ 0x80
 8003532:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003534:	684a      	ldr	r2, [r1, #4]
 8003536:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003538:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800353a:	2339      	movs	r3, #57	@ 0x39
 800353c:	2201      	movs	r2, #1
 800353e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003540:	2200      	movs	r2, #0
 8003542:	3b01      	subs	r3, #1
 8003544:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003546:	2000      	movs	r0, #0
}
 8003548:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800354a:	2002      	movs	r0, #2
 800354c:	e7fc      	b.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	40010800 	.word	0x40010800
 8003554:	40011400 	.word	0x40011400

08003558 <memset>:
 8003558:	0003      	movs	r3, r0
 800355a:	1882      	adds	r2, r0, r2
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	7019      	strb	r1, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	2600      	movs	r6, #0
 800356c:	4c0c      	ldr	r4, [pc, #48]	@ (80035a0 <__libc_init_array+0x38>)
 800356e:	4d0d      	ldr	r5, [pc, #52]	@ (80035a4 <__libc_init_array+0x3c>)
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	2600      	movs	r6, #0
 800357a:	f000 f819 	bl	80035b0 <_init>
 800357e:	4c0a      	ldr	r4, [pc, #40]	@ (80035a8 <__libc_init_array+0x40>)
 8003580:	4d0a      	ldr	r5, [pc, #40]	@ (80035ac <__libc_init_array+0x44>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	00b3      	lsls	r3, r6, #2
 800358e:	58eb      	ldr	r3, [r5, r3]
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	00b3      	lsls	r3, r6, #2
 8003598:	58eb      	ldr	r3, [r5, r3]
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	080035ec 	.word	0x080035ec
 80035a4:	080035ec 	.word	0x080035ec
 80035a8:	080035f0 	.word	0x080035f0
 80035ac:	080035ec 	.word	0x080035ec

080035b0 <_init>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b6:	bc08      	pop	{r3}
 80035b8:	469e      	mov	lr, r3
 80035ba:	4770      	bx	lr

080035bc <_fini>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c2:	bc08      	pop	{r3}
 80035c4:	469e      	mov	lr, r3
 80035c6:	4770      	bx	lr
