
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003970  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a60  08003a60  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000010  08003a78  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08003a78  00005474  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5e9  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  0000f621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00011318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008da  00000000  00000000  00011e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001222c  00000000  00000000  00012772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb87  00000000  00000000  0002499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ea58  00000000  00000000  00031525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ff7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  0009ffc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000a2934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a18 	.word	0x08003a18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003a18 	.word	0x08003a18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <turn_spec_LEDs>:
			}
		}
	}
}

void turn_spec_LEDs(LEDs* leds, rgb_color* colors) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 12; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
 800068a:	e0bf      	b.n	800080c <turn_spec_LEDs+0x190>
		int r = decToBinary(colors[i].r);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8c2 	bl	8000820 <decToBinary>
 800069c:	0003      	movs	r3, r0
 800069e:	61bb      	str	r3, [r7, #24]
		int g = decToBinary(colors[i].g);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	18d3      	adds	r3, r2, r3
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f8b8 	bl	8000820 <decToBinary>
 80006b0:	0003      	movs	r3, r0
 80006b2:	617b      	str	r3, [r7, #20]
		int b = decToBinary(colors[i].b);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	18d3      	adds	r3, r2, r3
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f8ae 	bl	8000820 <decToBinary>
 80006c4:	0003      	movs	r3, r0
 80006c6:	613b      	str	r3, [r7, #16]
		int a = decToBinary(colors[i].a);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	18d3      	adds	r3, r2, r3
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8a4 	bl	8000820 <decToBinary>
 80006d8:	0003      	movs	r3, r0
 80006da:	60bb      	str	r3, [r7, #8]
		for (int j = 0; j < 8; j++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e08d      	b.n	80007fe <turn_spec_LEDs+0x182>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	210a      	movs	r1, #10
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff fe7e 	bl	80003e8 <__aeabi_idivmod>
 80006ec:	1e0b      	subs	r3, r1, #0
 80006ee:	d101      	bne.n	80006f4 <turn_spec_LEDs+0x78>
 80006f0:	2107      	movs	r1, #7
 80006f2:	e000      	b.n	80006f6 <turn_spec_LEDs+0x7a>
 80006f4:	2112      	movs	r1, #18
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	0013      	movs	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	001a      	movs	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	189b      	adds	r3, r3, r2
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	3208      	adds	r2, #8
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	52d1      	strh	r1, [r2, r3]
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	210a      	movs	r1, #10
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fe68 	bl	80003e8 <__aeabi_idivmod>
 8000718:	1e0b      	subs	r3, r1, #0
 800071a:	d101      	bne.n	8000720 <turn_spec_LEDs+0xa4>
 800071c:	2107      	movs	r1, #7
 800071e:	e000      	b.n	8000722 <turn_spec_LEDs+0xa6>
 8000720:	2112      	movs	r1, #18
 8000722:	69fa      	ldr	r2, [r7, #28]
 8000724:	0013      	movs	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	001a      	movs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	189b      	adds	r3, r3, r2
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	52d1      	strh	r1, [r2, r3]
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	210a      	movs	r1, #10
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fe53 	bl	80003e8 <__aeabi_idivmod>
 8000742:	1e0b      	subs	r3, r1, #0
 8000744:	d101      	bne.n	800074a <turn_spec_LEDs+0xce>
 8000746:	2107      	movs	r1, #7
 8000748:	e000      	b.n	800074c <turn_spec_LEDs+0xd0>
 800074a:	2112      	movs	r1, #18
 800074c:	69fa      	ldr	r2, [r7, #28]
 800074e:	0013      	movs	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	189b      	adds	r3, r3, r2
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	001a      	movs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	189b      	adds	r3, r3, r2
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	3210      	adds	r2, #16
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	52d1      	strh	r1, [r2, r3]
			r = r/10;
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	210a      	movs	r1, #10
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fd57 	bl	800021c <__divsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	61bb      	str	r3, [r7, #24]
			g = g/10;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	210a      	movs	r1, #10
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fd50 	bl	800021c <__divsi3>
 800077c:	0003      	movs	r3, r0
 800077e:	617b      	str	r3, [r7, #20]
			b = b/10;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	210a      	movs	r1, #10
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fd49 	bl	800021c <__divsi3>
 800078a:	0003      	movs	r3, r0
 800078c:	613b      	str	r3, [r7, #16]
			if (i >= 0 && i <= 2) {
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db31      	blt.n	80007f8 <turn_spec_LEDs+0x17c>
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	2b02      	cmp	r3, #2
 8000798:	dc2e      	bgt.n	80007f8 <turn_spec_LEDs+0x17c>
				(leds + 12 + i) ->r[j] = 0;
 800079a:	69fa      	ldr	r2, [r7, #28]
 800079c:	0013      	movs	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	189b      	adds	r3, r3, r2
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	2290      	movs	r2, #144	@ 0x90
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	4694      	mov	ip, r2
 80007aa:	4463      	add	r3, ip
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	18d3      	adds	r3, r2, r3
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	3208      	adds	r2, #8
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	2100      	movs	r1, #0
 80007b8:	52d1      	strh	r1, [r2, r3]
				(leds + 12 + i) ->g[j] = 0;
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	0013      	movs	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	189b      	adds	r3, r3, r2
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	2290      	movs	r2, #144	@ 0x90
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	4694      	mov	ip, r2
 80007ca:	4463      	add	r3, ip
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	18d3      	adds	r3, r2, r3
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	2100      	movs	r1, #0
 80007d6:	52d1      	strh	r1, [r2, r3]
				(leds + 12 + i) ->b[j] = 0;
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	0013      	movs	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	189b      	adds	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	2290      	movs	r2, #144	@ 0x90
 80007e4:	0092      	lsls	r2, r2, #2
 80007e6:	4694      	mov	ip, r2
 80007e8:	4463      	add	r3, ip
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	3210      	adds	r2, #16
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	2100      	movs	r1, #0
 80007f6:	52d1      	strh	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	dc00      	bgt.n	8000806 <turn_spec_LEDs+0x18a>
 8000804:	e76d      	b.n	80006e2 <turn_spec_LEDs+0x66>
	for (int i = 0; i < 12; i++) {
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	2b0b      	cmp	r3, #11
 8000810:	dc00      	bgt.n	8000814 <turn_spec_LEDs+0x198>
 8000812:	e73b      	b.n	800068c <turn_spec_LEDs+0x10>
			}
		}

	}
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b008      	add	sp, #32
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <decToBinary>:
			}
		}
	}
}

static int decToBinary(int n) {
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	4c30      	ldr	r4, [pc, #192]	@ (80008e4 <decToBinary+0xc4>)
 8000824:	44a5      	add	sp, r4
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	// array to store binary number
	int result = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	4a2e      	ldr	r2, [pc, #184]	@ (80008e8 <decToBinary+0xc8>)
 800082e:	18ba      	adds	r2, r7, r2
 8000830:	6013      	str	r3, [r2, #0]
	int binaryNum[1000];

	// counter for binary array
	int i = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	22fb      	movs	r2, #251	@ 0xfb
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	18ba      	adds	r2, r7, r2
 800083a:	6013      	str	r3, [r2, #0]
	while (n > 0) {
 800083c:	e020      	b.n	8000880 <decToBinary+0x60>

		// storing remainder in binary array
		binaryNum[i] = n % 2;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <decToBinary+0xcc>)
 8000842:	4013      	ands	r3, r2
 8000844:	d504      	bpl.n	8000850 <decToBinary+0x30>
 8000846:	3b01      	subs	r3, #1
 8000848:	2202      	movs	r2, #2
 800084a:	4252      	negs	r2, r2
 800084c:	4313      	orrs	r3, r2
 800084e:	3301      	adds	r3, #1
 8000850:	0019      	movs	r1, r3
 8000852:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <decToBinary+0xd0>)
 8000854:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <decToBinary+0xd4>)
 8000856:	189b      	adds	r3, r3, r2
 8000858:	19db      	adds	r3, r3, r7
 800085a:	22fb      	movs	r2, #251	@ 0xfb
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	18ba      	adds	r2, r7, r2
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	50d1      	str	r1, [r2, r3]
		n = n / 2;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	da00      	bge.n	800086e <decToBinary+0x4e>
 800086c:	3301      	adds	r3, #1
 800086e:	105b      	asrs	r3, r3, #1
 8000870:	607b      	str	r3, [r7, #4]
		i++;
 8000872:	22fb      	movs	r2, #251	@ 0xfb
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	18bb      	adds	r3, r7, r2
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	6013      	str	r3, [r2, #0]
	while (n > 0) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dcdb      	bgt.n	800083e <decToBinary+0x1e>
	}

	// printing binary array in reverse order
	for (int j = i - 1; j >= 0; j--)
 8000886:	23fb      	movs	r3, #251	@ 0xfb
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <decToBinary+0xd8>)
 8000892:	18ba      	adds	r2, r7, r2
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e018      	b.n	80008ca <decToBinary+0xaa>
		result = result*10 + binaryNum[j];
 8000898:	4c13      	ldr	r4, [pc, #76]	@ (80008e8 <decToBinary+0xc8>)
 800089a:	193b      	adds	r3, r7, r4
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	0013      	movs	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	189b      	adds	r3, r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	0019      	movs	r1, r3
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <decToBinary+0xd0>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <decToBinary+0xd4>)
 80008ac:	189b      	adds	r3, r3, r2
 80008ae:	19db      	adds	r3, r3, r7
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <decToBinary+0xd8>)
 80008b2:	183a      	adds	r2, r7, r0
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	58d3      	ldr	r3, [r2, r3]
 80008ba:	18cb      	adds	r3, r1, r3
 80008bc:	193a      	adds	r2, r7, r4
 80008be:	6013      	str	r3, [r2, #0]
	for (int j = i - 1; j >= 0; j--)
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	183a      	adds	r2, r7, r0
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <decToBinary+0xd8>)
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dae1      	bge.n	8000898 <decToBinary+0x78>
	return result;
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <decToBinary+0xc8>)
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	681b      	ldr	r3, [r3, #0]
}
 80008da:	0018      	movs	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <decToBinary+0xdc>)
 80008e0:	449d      	add	sp, r3
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	fffff044 	.word	0xfffff044
 80008e8:	00000fb4 	.word	0x00000fb4
 80008ec:	80000001 	.word	0x80000001
 80008f0:	fffff054 	.word	0xfffff054
 80008f4:	00000fb8 	.word	0x00000fb8
 80008f8:	00000fac 	.word	0x00000fac
 80008fc:	00000fbc 	.word	0x00000fbc

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rgb_color hour_color = {125, 20, 0, 4};
 8000906:	230c      	movs	r3, #12
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	4a8b      	ldr	r2, [pc, #556]	@ (8000b38 <main+0x238>)
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	601a      	str	r2, [r3, #0]
	rgb_color minut_color = {0, 100, 100, 4};
 8000910:	2308      	movs	r3, #8
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	4a89      	ldr	r2, [pc, #548]	@ (8000b3c <main+0x23c>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	601a      	str	r2, [r3, #0]
	rgb_color red = {250, 0, 10, 4};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4a88      	ldr	r2, [pc, #544]	@ (8000b40 <main+0x240>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	601a      	str	r2, [r3, #0]
	rgb_color none = {0, 0, 0, 0};
 8000922:	003b      	movs	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fc7e 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f918 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 faac 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000934:	f000 fa8c 	bl	8000e50 <MX_DMA_Init>
  MX_SPI1_Init();
 8000938:	f000 f9d4 	bl	8000ce4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800093c:	f000 fa0a 	bl	8000d54 <MX_TIM2_Init>
  MX_ADC_Init();
 8000940:	f000 f96a 	bl	8000c18 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 12; i++) {
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e02c      	b.n	80009a4 <main+0xa4>
		  led_pattern[i] = none;
 800094a:	4a7e      	ldr	r2, [pc, #504]	@ (8000b44 <main+0x244>)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	0099      	lsls	r1, r3, #2
 8000950:	003b      	movs	r3, r7
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	508b      	str	r3, [r1, r2]
		  if (i%3==0) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2103      	movs	r1, #3
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fd44 	bl	80003e8 <__aeabi_idivmod>
 8000960:	1e0b      	subs	r3, r1, #0
 8000962:	d107      	bne.n	8000974 <main+0x74>
			  led_pattern[i] = hour_color;
 8000964:	4a77      	ldr	r2, [pc, #476]	@ (8000b44 <main+0x244>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	0099      	lsls	r1, r3, #2
 800096a:	230c      	movs	r3, #12
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	508b      	str	r3, [r1, r2]
 8000972:	e014      	b.n	800099e <main+0x9e>
		  } else if (i%3==1) {
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	2103      	movs	r1, #3
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fd35 	bl	80003e8 <__aeabi_idivmod>
 800097e:	000b      	movs	r3, r1
 8000980:	2b01      	cmp	r3, #1
 8000982:	d106      	bne.n	8000992 <main+0x92>
			  led_pattern[i] = none;
 8000984:	4a6f      	ldr	r2, [pc, #444]	@ (8000b44 <main+0x244>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	0099      	lsls	r1, r3, #2
 800098a:	003b      	movs	r3, r7
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	508b      	str	r3, [r1, r2]
 8000990:	e005      	b.n	800099e <main+0x9e>
		  } else {
			  led_pattern[i] = red;
 8000992:	4a6c      	ldr	r2, [pc, #432]	@ (8000b44 <main+0x244>)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	0099      	lsls	r1, r3, #2
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	508b      	str	r3, [r1, r2]
	  for (int i = 0; i < 12; i++) {
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2b0b      	cmp	r3, #11
 80009a8:	ddcf      	ble.n	800094a <main+0x4a>
		  }

	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {
 80009aa:	2380      	movs	r3, #128	@ 0x80
 80009ac:	00da      	lsls	r2, r3, #3
 80009ae:	23a0      	movs	r3, #160	@ 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 faeb 	bl	8001f90 <HAL_GPIO_ReadPin>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d100      	bne.n	80009c0 <main+0xc0>
 80009be:	e070      	b.n	8000aa2 <main+0x1a2>
		  shifted_hours = (hours<6) ? hours+6 : hours-6;
 80009c0:	4b61      	ldr	r3, [pc, #388]	@ (8000b48 <main+0x248>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d804      	bhi.n	80009d2 <main+0xd2>
 80009c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000b48 <main+0x248>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	3306      	adds	r3, #6
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	e003      	b.n	80009da <main+0xda>
 80009d2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b48 <main+0x248>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	3b06      	subs	r3, #6
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4a5c      	ldr	r2, [pc, #368]	@ (8000b4c <main+0x24c>)
 80009dc:	8013      	strh	r3, [r2, #0]

		  led_pattern[shifted_hours] = hour_color;
 80009de:	4b5b      	ldr	r3, [pc, #364]	@ (8000b4c <main+0x24c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	4a58      	ldr	r2, [pc, #352]	@ (8000b44 <main+0x244>)
 80009e4:	0099      	lsls	r1, r3, #2
 80009e6:	230c      	movs	r3, #12
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	508b      	str	r3, [r1, r2]
		  led_pattern[shifted_minutes] = minut_color;
 80009ee:	4b58      	ldr	r3, [pc, #352]	@ (8000b50 <main+0x250>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	4a54      	ldr	r2, [pc, #336]	@ (8000b44 <main+0x244>)
 80009f4:	0099      	lsls	r1, r3, #2
 80009f6:	2308      	movs	r3, #8
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	508b      	str	r3, [r1, r2]
		  if (shifted_hours==shifted_minutes) {
 80009fe:	4b53      	ldr	r3, [pc, #332]	@ (8000b4c <main+0x24c>)
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	4b53      	ldr	r3, [pc, #332]	@ (8000b50 <main+0x250>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d13e      	bne.n	8000a88 <main+0x188>
			  for (int i = 0; i < 4; i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	e037      	b.n	8000a80 <main+0x180>
				  if (i%2==0) {
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	d10f      	bne.n	8000a38 <main+0x138>
					  led_pattern[shifted_hours] = hour_color;
 8000a18:	4b4c      	ldr	r3, [pc, #304]	@ (8000b4c <main+0x24c>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	4a49      	ldr	r2, [pc, #292]	@ (8000b44 <main+0x244>)
 8000a1e:	0099      	lsls	r1, r3, #2
 8000a20:	230c      	movs	r3, #12
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	508b      	str	r3, [r1, r2]
					  led_pattern[shifted_minutes] = none;
 8000a28:	4b49      	ldr	r3, [pc, #292]	@ (8000b50 <main+0x250>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	4a45      	ldr	r2, [pc, #276]	@ (8000b44 <main+0x244>)
 8000a2e:	0099      	lsls	r1, r3, #2
 8000a30:	003b      	movs	r3, r7
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	508b      	str	r3, [r1, r2]
 8000a36:	e00e      	b.n	8000a56 <main+0x156>
				  } else {
					  led_pattern[shifted_minutes] = minut_color;
 8000a38:	4b45      	ldr	r3, [pc, #276]	@ (8000b50 <main+0x250>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4a41      	ldr	r2, [pc, #260]	@ (8000b44 <main+0x244>)
 8000a3e:	0099      	lsls	r1, r3, #2
 8000a40:	2308      	movs	r3, #8
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	508b      	str	r3, [r1, r2]
					  led_pattern[shifted_hours] = none;
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <main+0x24c>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8000b44 <main+0x244>)
 8000a4e:	0099      	lsls	r1, r3, #2
 8000a50:	003b      	movs	r3, r7
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	508b      	str	r3, [r1, r2]
				  }
				  turn_spec_LEDs(leds, led_pattern);
 8000a56:	4a3b      	ldr	r2, [pc, #236]	@ (8000b44 <main+0x244>)
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <main+0x254>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fe0d 	bl	800067c <turn_spec_LEDs>
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000a62:	23b4      	movs	r3, #180	@ 0xb4
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4a3b      	ldr	r2, [pc, #236]	@ (8000b54 <main+0x254>)
 8000a68:	483b      	ldr	r0, [pc, #236]	@ (8000b58 <main+0x258>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 f92a 	bl	8002cc4 <HAL_TIM_PWM_Start_DMA>
				  HAL_Delay(1000);
 8000a70:	23fa      	movs	r3, #250	@ 0xfa
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fc47 	bl	8001308 <HAL_Delay>
			  for (int i = 0; i < 4; i++) {
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	ddc4      	ble.n	8000a10 <main+0x110>
 8000a86:	e00c      	b.n	8000aa2 <main+0x1a2>
			  }
		  } else {
			  turn_spec_LEDs(leds, led_pattern);
 8000a88:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <main+0x244>)
 8000a8a:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <main+0x254>)
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fdf4 	bl	800067c <turn_spec_LEDs>
			  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000a94:	23b4      	movs	r3, #180	@ 0xb4
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4a2e      	ldr	r2, [pc, #184]	@ (8000b54 <main+0x254>)
 8000a9a:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <main+0x258>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f002 f911 	bl	8002cc4 <HAL_TIM_PWM_Start_DMA>
		  clear_LEDs(leds, MAX_LED);
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
	  }
	  **/

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 8000aa2:	23a0      	movs	r3, #160	@ 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fa71 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d03d      	beq.n	8000b2e <main+0x22e>
		  hours++;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <main+0x248>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <main+0x248>)
 8000abc:	801a      	strh	r2, [r3, #0]
		  if (hours >= 12) {
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <main+0x248>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	2b0b      	cmp	r3, #11
 8000ac4:	d902      	bls.n	8000acc <main+0x1cc>
			  hours = 0;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <main+0x248>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
		  }
		  minutes++;
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <main+0x25c>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <main+0x25c>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		  if (minutes >= 60) {
 8000ad8:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <main+0x25c>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ade:	d902      	bls.n	8000ae6 <main+0x1e6>
			  minutes = 0;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <main+0x25c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
		  }
		  if (minutes%10==2 || minutes%10==7) {
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <main+0x25c>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	210a      	movs	r1, #10
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fb91 	bl	8000214 <__aeabi_uidivmod>
 8000af2:	000b      	movs	r3, r1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d009      	beq.n	8000b0e <main+0x20e>
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <main+0x25c>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	210a      	movs	r1, #10
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fb87 	bl	8000214 <__aeabi_uidivmod>
 8000b06:	000b      	movs	r3, r1
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d10c      	bne.n	8000b28 <main+0x228>
			  shifted_minutes ++;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <main+0x250>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <main+0x250>)
 8000b18:	801a      	strh	r2, [r3, #0]
			  if (shifted_minutes >= 12) {
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <main+0x250>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	2b0b      	cmp	r3, #11
 8000b20:	d902      	bls.n	8000b28 <main+0x228>
				  shifted_minutes = 0;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <main+0x250>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  HAL_Delay(200);
 8000b28:	20c8      	movs	r0, #200	@ 0xc8
 8000b2a:	f000 fbed 	bl	8001308 <HAL_Delay>
		  isPressed = true;
	  } else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
		  isPressed = false;
	  }
	  */
	  HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 fbea 	bl	8001308 <HAL_Delay>
	  for (int i = 0; i < 12; i++) {
 8000b34:	e706      	b.n	8000944 <main+0x44>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	08003a30 	.word	0x08003a30
 8000b3c:	08003a34 	.word	0x08003a34
 8000b40:	08003a38 	.word	0x08003a38
 8000b44:	20000438 	.word	0x20000438
 8000b48:	2000046a 	.word	0x2000046a
 8000b4c:	2000046c 	.word	0x2000046c
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000168 	.word	0x20000168
 8000b58:	200000e0 	.word	0x200000e0
 8000b5c:	20000468 	.word	0x20000468

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b093      	sub	sp, #76	@ 0x4c
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	2414      	movs	r4, #20
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2334      	movs	r3, #52	@ 0x34
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f002 ff25 	bl	80039c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	003b      	movs	r3, r7
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f002 ff1e 	bl	80039c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <SystemClock_Config+0xb0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <SystemClock_Config+0xb4>)
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <SystemClock_Config+0xb0>)
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	0109      	lsls	r1, r1, #4
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	02d2      	lsls	r2, r2, #11
 8000bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	03d2      	lsls	r2, r2, #15
 8000bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 f9ff 	bl	8001fcc <HAL_RCC_OscConfig>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bd2:	f000 f9b5 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	220f      	movs	r2, #15
 8000bda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2203      	movs	r2, #3
 8000be0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 fd63 	bl	80026c4 <HAL_RCC_ClockConfig>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c02:	f000 f99d 	bl	8000f40 <Error_Handler>
  }
}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b013      	add	sp, #76	@ 0x4c
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	40007000 	.word	0x40007000
 8000c14:	ffffe7ff 	.word	0xffffe7ff

08000c18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	003b      	movs	r3, r7
 8000c20:	0018      	movs	r0, r3
 8000c22:	2308      	movs	r3, #8
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f002 feca 	bl	80039c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <MX_ADC_Init+0xc4>)
 8000c30:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c3a:	2280      	movs	r2, #128	@ 0x80
 8000c3c:	05d2      	lsls	r2, r2, #23
 8000c3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c40:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c62:	2221      	movs	r2, #33	@ 0x21
 8000c64:	2100      	movs	r1, #0
 8000c66:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c70:	22c2      	movs	r2, #194	@ 0xc2
 8000c72:	32ff      	adds	r2, #255	@ 0xff
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c78:	222c      	movs	r2, #44	@ 0x2c
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fb56 	bl	8001350 <HAL_ADC_Init>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ca8:	f000 f94a 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cac:	003b      	movs	r3, r7
 8000cae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <MX_ADC_Init+0xc8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	0152      	lsls	r2, r2, #5
 8000cb8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cba:	003a      	movs	r2, r7
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_ADC_Init+0xc0>)
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fcb9 	bl	8001638 <HAL_ADC_ConfigChannel>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000cca:	f000 f939 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	2000002c 	.word	0x2000002c
 8000cdc:	40012400 	.word	0x40012400
 8000ce0:	24000200 	.word	0x24000200

08000ce4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000cea:	4a19      	ldr	r2, [pc, #100]	@ (8000d50 <MX_SPI1_Init+0x6c>)
 8000cec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000cf0:	2282      	movs	r2, #130	@ 0x82
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	02d2      	lsls	r2, r2, #11
 8000d14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <MX_SPI1_Init+0x68>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 feb2 	bl	8002aa0 <HAL_SPI_Init>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d40:	f000 f8fe 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	20000088 	.word	0x20000088
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2310      	movs	r3, #16
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f002 fe2b 	bl	80039c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2308      	movs	r3, #8
 8000d72:	001a      	movs	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	f002 fe23 	bl	80039c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2310      	movs	r3, #16
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f002 fe1c 	bl	80039c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b30      	ldr	r3, [pc, #192]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	05d2      	lsls	r2, r2, #23
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000d9e:	2228      	movs	r2, #40	@ 0x28
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fefe 	bl	8002bb2 <HAL_TIM_Base_Init>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dba:	f000 f8c1 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	2118      	movs	r1, #24
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	0152      	lsls	r2, r2, #5
 8000dc6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc8:	187a      	adds	r2, r7, r1
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 f9c8 	bl	8003164 <HAL_TIM_ConfigClockSource>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000dd8:	f000 f8b2 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 ff27 	bl	8002c32 <HAL_TIM_PWM_Init>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000de8:	f000 f8aa 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2110      	movs	r1, #16
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfa:	187a      	adds	r2, r7, r1
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f002 fd85 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e0a:	f000 f899 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2260      	movs	r2, #96	@ 0x60
 8000e12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2204      	movs	r2, #4
 8000e24:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e26:	0039      	movs	r1, r7
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 f8d3 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e36:	f000 f883 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e3a:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <MX_TIM2_Init+0xf8>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 f961 	bl	8001104 <HAL_TIM_MspPostInit>

}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b00a      	add	sp, #40	@ 0x28
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	200000e0 	.word	0x200000e0

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_DMA_Init+0x38>)
 8000e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_DMA_Init+0x38>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_DMA_Init+0x38>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	2201      	movs	r2, #1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	200b      	movs	r0, #11
 8000e74:	f000 fd32 	bl	80018dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000e78:	200b      	movs	r0, #11
 8000e7a:	f000 fd44 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	40021000 	.word	0x40021000

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	240c      	movs	r4, #12
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	0018      	movs	r0, r3
 8000e98:	2314      	movs	r3, #20
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f002 fd8f 	bl	80039c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ed8:	2102      	movs	r1, #2
 8000eda:	430a      	orrs	r2, r1
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_GPIO_Init+0xac>)
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Button_LT_Pin Button_LB_Pin CHRG_Pin DONE_Pin
                           Button_R_Pin */
  GPIO_InitStruct.Pin = Button_LT_Pin|Button_LB_Pin|CHRG_Pin|DONE_Pin
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <MX_GPIO_Init+0xb0>)
 8000eee:	601a      	str	r2, [r3, #0]
                          |Button_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	193a      	adds	r2, r7, r4
 8000efe:	23a0      	movs	r3, #160	@ 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fed5 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2208      	movs	r2, #8
 8000f10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2288      	movs	r2, #136	@ 0x88
 8000f16:	0352      	lsls	r2, r2, #13
 8000f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f20:	187a      	adds	r2, r7, r1
 8000f22:	23a0      	movs	r3, #160	@ 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fec3 	bl	8001cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b009      	add	sp, #36	@ 0x24
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	00000703 	.word	0x00000703

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <HAL_MspInit+0x24>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x24>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <HAL_MspInit+0x24>)
 8000f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_MspInit+0x24>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0549      	lsls	r1, r1, #21
 8000f66:	430a      	orrs	r2, r1
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	240c      	movs	r4, #12
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f002 fd1a 	bl	80039c0 <memset>
  if(hadc->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <HAL_ADC_MspInit+0x70>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d121      	bne.n	8000fda <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0089      	lsls	r1, r1, #2
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000faa:	2102      	movs	r1, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_ADC_MspInit+0x78>)
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	f000 fe6d 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b009      	add	sp, #36	@ 0x24
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	50000400 	.word	0x50000400

08000ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	240c      	movs	r4, #12
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2314      	movs	r3, #20
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f002 fcdc 	bl	80039c0 <memset>
  if(hspi->Instance==SPI1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <HAL_SPI_MspInit+0x80>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d129      	bne.n	8001066 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_SPI_MspInit+0x84>)
 8001014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_SPI_MspInit+0x84>)
 8001018:	2180      	movs	r1, #128	@ 0x80
 800101a:	0149      	lsls	r1, r1, #5
 800101c:	430a      	orrs	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_SPI_MspInit+0x84>)
 8001022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_SPI_MspInit+0x84>)
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_SPI_MspInit+0x84>)
 800102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001030:	2201      	movs	r2, #1
 8001032:	4013      	ands	r3, r2
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001038:	0021      	movs	r1, r4
 800103a:	187b      	adds	r3, r7, r1
 800103c:	22f0      	movs	r2, #240	@ 0xf0
 800103e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2202      	movs	r2, #2
 8001044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	187a      	adds	r2, r7, r1
 800105a:	23a0      	movs	r3, #160	@ 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fe27 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b009      	add	sp, #36	@ 0x24
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	40013000 	.word	0x40013000
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	429a      	cmp	r2, r3
 800108a:	d131      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_TIM_Base_MspInit+0x80>)
 800108e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_TIM_Base_MspInit+0x80>)
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_TIM_Base_MspInit+0x88>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010a6:	2210      	movs	r2, #16
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010b8:	2280      	movs	r2, #128	@ 0x80
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010c0:	2280      	movs	r2, #128	@ 0x80
 80010c2:	00d2      	lsls	r2, r2, #3
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010c8:	2220      	movs	r2, #32
 80010ca:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010ce:	22c0      	movs	r2, #192	@ 0xc0
 80010d0:	0192      	lsls	r2, r2, #6
 80010d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fc32 	bl	8001940 <HAL_DMA_Init>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d001      	beq.n	80010e4 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 80010e0:	f7ff ff2e 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010e8:	621a      	str	r2, [r3, #32]
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <HAL_TIM_Base_MspInit+0x84>)
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000120 	.word	0x20000120
 8001100:	40020058 	.word	0x40020058

08001104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	240c      	movs	r4, #12
 800110e:	193b      	adds	r3, r7, r4
 8001110:	0018      	movs	r0, r3
 8001112:	2314      	movs	r3, #20
 8001114:	001a      	movs	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	f002 fc52 	bl	80039c0 <memset>
  if(htim->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	429a      	cmp	r2, r3
 8001126:	d123      	bne.n	8001170 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <HAL_TIM_MspPostInit+0x74>)
 800112a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_TIM_MspPostInit+0x74>)
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001134:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_TIM_MspPostInit+0x74>)
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	2201      	movs	r2, #1
 800113a:	4013      	ands	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	0212      	lsls	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	0021      	movs	r1, r4
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2205      	movs	r2, #5
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001162:	187a      	adds	r2, r7, r1
 8001164:	23a0      	movs	r3, #160	@ 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f000 fda2 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b009      	add	sp, #36	@ 0x24
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f894 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fca0 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	20000120 	.word	0x20000120

080011c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d8:	f7ff fff6 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 fbe5 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fb7b 	bl	8000900 <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
   ldr   r0, =_estack
 800120c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001218:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 800121c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001220:	20000474 	.word	0x20000474

08001224 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_COMP_IRQHandler>
	...

08001228 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_Init+0x3c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Init+0x3c>)
 800123a:	2140      	movs	r1, #64	@ 0x40
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f811 	bl	8001268 <HAL_InitTick>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d003      	beq.n	8001252 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e001      	b.n	8001256 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001252:	f7ff fe7b 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_InitTick+0x5c>)
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	0019      	movs	r1, r3
 800127a:	23fa      	movs	r3, #250	@ 0xfa
 800127c:	0098      	lsls	r0, r3, #2
 800127e:	f7fe ff43 	bl	8000108 <__udivsi3>
 8001282:	0003      	movs	r3, r0
 8001284:	0019      	movs	r1, r3
 8001286:	0020      	movs	r0, r4
 8001288:	f7fe ff3e 	bl	8000108 <__udivsi3>
 800128c:	0003      	movs	r3, r0
 800128e:	0018      	movs	r0, r3
 8001290:	f000 fb49 	bl	8001926 <HAL_SYSTICK_Config>
 8001294:	1e03      	subs	r3, r0, #0
 8001296:	d001      	beq.n	800129c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e00f      	b.n	80012bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d80b      	bhi.n	80012ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2301      	movs	r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	2200      	movs	r2, #0
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fb16 	bl	80018dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_InitTick+0x64>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b003      	add	sp, #12
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	20000004 	.word	0x20000004
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	20000008 	.word	0x20000008

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	001a      	movs	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	18d2      	adds	r2, r2, r3
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_IncTick+0x20>)
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	20000470 	.word	0x20000470

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	@ (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	20000470 	.word	0x20000470

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fff0 	bl	80012f4 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	001a      	movs	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	189b      	adds	r3, r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	f7ff ffe0 	bl	80012f4 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	2000000c 	.word	0x2000000c

08001350 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e159      	b.n	8001616 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10a      	bne.n	8001380 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2250      	movs	r2, #80	@ 0x50
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fdfa 	bl	8000f74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001384:	2210      	movs	r2, #16
 8001386:	4013      	ands	r3, r2
 8001388:	2b10      	cmp	r3, #16
 800138a:	d005      	beq.n	8001398 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2204      	movs	r2, #4
 8001394:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001396:	d00b      	beq.n	80013b0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139c:	2210      	movs	r2, #16
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2250      	movs	r2, #80	@ 0x50
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e132      	b.n	8001616 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b4:	4a9a      	ldr	r2, [pc, #616]	@ (8001620 <HAL_ADC_Init+0x2d0>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	2202      	movs	r2, #2
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <HAL_ADC_Init+0x90>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_Init+0x90>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_ADC_Init+0x92>
 80013e0:	2300      	movs	r3, #0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d149      	bne.n	800147a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	23c0      	movs	r3, #192	@ 0xc0
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d00b      	beq.n	800140a <HAL_ADC_Init+0xba>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d005      	beq.n	800140a <HAL_ADC_Init+0xba>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	429a      	cmp	r2, r3
 8001408:	d111      	bne.n	800142e <HAL_ADC_Init+0xde>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	0892      	lsrs	r2, r2, #2
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6919      	ldr	r1, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	e014      	b.n	8001458 <HAL_ADC_Init+0x108>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	0892      	lsrs	r2, r2, #2
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	4b79      	ldr	r3, [pc, #484]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001444:	4978      	ldr	r1, [pc, #480]	@ (8001628 <HAL_ADC_Init+0x2d8>)
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	4b76      	ldr	r3, [pc, #472]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4b74      	ldr	r3, [pc, #464]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2118      	movs	r1, #24
 8001464:	438a      	bics	r2, r1
 8001466:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b69      	ldr	r3, [pc, #420]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001480:	496a      	ldr	r1, [pc, #424]	@ (800162c <HAL_ADC_Init+0x2dc>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001486:	4b67      	ldr	r3, [pc, #412]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800148e:	065a      	lsls	r2, r3, #25
 8001490:	4b64      	ldr	r3, [pc, #400]	@ (8001624 <HAL_ADC_Init+0x2d4>)
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	4013      	ands	r3, r2
 80014a2:	d108      	bne.n	80014b6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2180      	movs	r1, #128	@ 0x80
 80014b0:	0549      	lsls	r1, r1, #21
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	495b      	ldr	r1, [pc, #364]	@ (8001630 <HAL_ADC_Init+0x2e0>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68d9      	ldr	r1, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_Init+0x18c>
 80014d8:	2304      	movs	r3, #4
 80014da:	e000      	b.n	80014de <HAL_ADC_Init+0x18e>
 80014dc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014de:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2020      	movs	r0, #32
 80014e4:	5c1b      	ldrb	r3, [r3, r0]
 80014e6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014e8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	202c      	movs	r0, #44	@ 0x2c
 80014ee:	5c1b      	ldrb	r3, [r3, r0]
 80014f0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014f2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001500:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001508:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001516:	23c2      	movs	r3, #194	@ 0xc2
 8001518:	33ff      	adds	r3, #255	@ 0xff
 800151a:	429a      	cmp	r2, r3
 800151c:	d00b      	beq.n	8001536 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68d9      	ldr	r1, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2221      	movs	r2, #33	@ 0x21
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11a      	bne.n	8001576 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2220      	movs	r2, #32
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2180      	movs	r1, #128	@ 0x80
 8001556:	0249      	lsls	r1, r1, #9
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	e00b      	b.n	8001576 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001562:	2220      	movs	r2, #32
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	2201      	movs	r2, #1
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11f      	bne.n	80015be <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	492a      	ldr	r1, [pc, #168]	@ (8001634 <HAL_ADC_Init+0x2e4>)
 800158a:	400a      	ands	r2, r1
 800158c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6919      	ldr	r1, [r3, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800159c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80015a2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	e00e      	b.n	80015dc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	438a      	bics	r2, r1
 80015da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2107      	movs	r1, #7
 80015e8:	438a      	bics	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6959      	ldr	r1, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	2203      	movs	r2, #3
 800160a:	4393      	bics	r3, r2
 800160c:	2201      	movs	r2, #1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	fffffefd 	.word	0xfffffefd
 8001624:	40012708 	.word	0x40012708
 8001628:	ffc3ffff 	.word	0xffc3ffff
 800162c:	fdffffff 	.word	0xfdffffff
 8001630:	fffe0219 	.word	0xfffe0219
 8001634:	fffffc03 	.word	0xfffffc03

08001638 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2250      	movs	r2, #80	@ 0x50
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x18>
 800164c:	2302      	movs	r3, #2
 800164e:	e06c      	b.n	800172a <HAL_ADC_ConfigChannel+0xf2>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2250      	movs	r2, #80	@ 0x50
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d00b      	beq.n	800167c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	2220      	movs	r2, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2250      	movs	r2, #80	@ 0x50
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e056      	b.n	800172a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <HAL_ADC_ConfigChannel+0xfc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d028      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	035b      	lsls	r3, r3, #13
 8001692:	0b5a      	lsrs	r2, r3, #13
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	02db      	lsls	r3, r3, #11
 80016a4:	4013      	ands	r3, r2
 80016a6:	d009      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0409      	lsls	r1, r1, #16
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f000 f844 	bl	8001744 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	4013      	ands	r3, r2
 80016c6:	d02b      	beq.n	8001720 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	03c9      	lsls	r1, r1, #15
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e023      	b.n	8001720 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	035b      	lsls	r3, r3, #13
 80016e4:	0b5b      	lsrs	r3, r3, #13
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	02db      	lsls	r3, r3, #11
 80016f8:	4013      	ands	r3, r2
 80016fa:	d005      	beq.n	8001708 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 8001702:	490e      	ldr	r1, [pc, #56]	@ (800173c <HAL_ADC_ConfigChannel+0x104>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	4013      	ands	r3, r2
 8001712:	d005      	beq.n	8001720 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <HAL_ADC_ConfigChannel+0x100>)
 800171a:	4909      	ldr	r1, [pc, #36]	@ (8001740 <HAL_ADC_ConfigChannel+0x108>)
 800171c:	400a      	ands	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2250      	movs	r2, #80	@ 0x50
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	00001001 	.word	0x00001001
 8001738:	40012708 	.word	0x40012708
 800173c:	ff7fffff 	.word	0xff7fffff
 8001740:	ffbfffff 	.word	0xffbfffff

08001744 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <ADC_DelayMicroSecond+0x38>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	490b      	ldr	r1, [pc, #44]	@ (8001780 <ADC_DelayMicroSecond+0x3c>)
 8001752:	0018      	movs	r0, r3
 8001754:	f7fe fcd8 	bl	8000108 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4353      	muls	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001762:	e002      	b.n	800176a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <ADC_DelayMicroSecond+0x20>
  }
}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	20000004 	.word	0x20000004
 8001780:	000f4240 	.word	0x000f4240

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b7f      	cmp	r3, #127	@ 0x7f
 8001796:	d809      	bhi.n	80017ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	001a      	movs	r2, r3
 800179e:	231f      	movs	r3, #31
 80017a0:	401a      	ands	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__NVIC_EnableIRQ+0x30>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	4091      	lsls	r1, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
  }
}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80017cc:	d828      	bhi.n	8001820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	4a2f      	ldr	r2, [pc, #188]	@ (800188c <__NVIC_SetPriority+0xd4>)
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	33c0      	adds	r3, #192	@ 0xc0
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	589b      	ldr	r3, [r3, r2]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	@ 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	@ 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	481f      	ldr	r0, [pc, #124]	@ (800188c <__NVIC_SetPriority+0xd4>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	430a      	orrs	r2, r1
 8001818:	33c0      	adds	r3, #192	@ 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181e:	e031      	b.n	8001884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0019      	movs	r1, r3
 8001828:	230f      	movs	r3, #15
 800182a:	400b      	ands	r3, r1
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	2203      	movs	r2, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	21ff      	movs	r1, #255	@ 0xff
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	43d2      	mvns	r2, r2
 800184e:	401a      	ands	r2, r3
 8001850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	22ff      	movs	r2, #255	@ 0xff
 8001858:	401a      	ands	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0018      	movs	r0, r3
 8001860:	2303      	movs	r3, #3
 8001862:	4003      	ands	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4809      	ldr	r0, [pc, #36]	@ (8001890 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001c      	movs	r4, r3
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	3306      	adds	r3, #6
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18c3      	adds	r3, r0, r3
 8001880:	3304      	adds	r3, #4
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b003      	add	sp, #12
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	045b      	lsls	r3, r3, #17
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d301      	bcc.n	80018ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a8:	2301      	movs	r3, #1
 80018aa:	e010      	b.n	80018ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <SysTick_Config+0x44>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3a01      	subs	r2, #1
 80018b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b4:	2301      	movs	r3, #1
 80018b6:	425b      	negs	r3, r3
 80018b8:	2103      	movs	r1, #3
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff7c 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x44>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x44>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	0002      	movs	r2, r0
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff33 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffaf 	bl	8001894 <SysTick_Config>
 8001936:	0003      	movs	r3, r0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e061      	b.n	8001a16 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a32      	ldr	r2, [pc, #200]	@ (8001a20 <HAL_DMA_Init+0xe0>)
 8001958:	4694      	mov	ip, r2
 800195a:	4463      	add	r3, ip
 800195c:	2114      	movs	r1, #20
 800195e:	0018      	movs	r0, r3
 8001960:	f7fe fbd2 	bl	8000108 <__udivsi3>
 8001964:	0003      	movs	r3, r0
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <HAL_DMA_Init+0xe4>)
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2225      	movs	r2, #37	@ 0x25
 8001976:	2102      	movs	r1, #2
 8001978:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a28      	ldr	r2, [pc, #160]	@ (8001a28 <HAL_DMA_Init+0xe8>)
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	01db      	lsls	r3, r3, #7
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d018      	beq.n	80019fe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_DMA_Init+0xec>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	211c      	movs	r1, #28
 80019d6:	400b      	ands	r3, r1
 80019d8:	210f      	movs	r1, #15
 80019da:	4099      	lsls	r1, r3
 80019dc:	000b      	movs	r3, r1
 80019de:	43d9      	mvns	r1, r3
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_DMA_Init+0xec>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_DMA_Init+0xec>)
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	201c      	movs	r0, #28
 80019f4:	4003      	ands	r3, r0
 80019f6:	409a      	lsls	r2, r3
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_DMA_Init+0xec>)
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2225      	movs	r2, #37	@ 0x25
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	@ 0x24
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	bffdfff8 	.word	0xbffdfff8
 8001a24:	40020000 	.word	0x40020000
 8001a28:	ffff800f 	.word	0xffff800f
 8001a2c:	400200a8 	.word	0x400200a8

08001a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2317      	movs	r3, #23
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2224      	movs	r2, #36	@ 0x24
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_DMA_Start_IT+0x24>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e04f      	b.n	8001af4 <HAL_DMA_Start_IT+0xc4>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2224      	movs	r2, #36	@ 0x24
 8001a58:	2101      	movs	r1, #1
 8001a5a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2225      	movs	r2, #37	@ 0x25
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d13a      	bne.n	8001ade <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2225      	movs	r2, #37	@ 0x25
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	438a      	bics	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f8e3 	bl	8001c58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	210e      	movs	r1, #14
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00f      	b.n	8001acc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	210a      	movs	r1, #10
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e007      	b.n	8001aee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2224      	movs	r2, #36	@ 0x24
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001aee:	2317      	movs	r3, #23
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b006      	add	sp, #24
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	221c      	movs	r2, #28
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	d026      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x7a>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2220      	movs	r2, #32
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2104      	movs	r1, #4
 8001b48:	438a      	bics	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	221c      	movs	r2, #28
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4091      	lsls	r1, r2
 8001b5c:	000a      	movs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x6e>
 8001b68:	e071      	b.n	8001c4e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	0010      	movs	r0, r2
 8001b72:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001b74:	e06b      	b.n	8001c4e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	221c      	movs	r2, #28
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2202      	movs	r2, #2
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	d02d      	beq.n	8001be6 <HAL_DMA_IRQHandler+0xea>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d029      	beq.n	8001be6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	210a      	movs	r1, #10
 8001baa:	438a      	bics	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2225      	movs	r2, #37	@ 0x25
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	221c      	movs	r2, #28
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2224      	movs	r2, #36	@ 0x24
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d039      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	0010      	movs	r0, r2
 8001be2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001be4:	e033      	b.n	8001c4e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	221c      	movs	r2, #28
 8001bec:	4013      	ands	r3, r2
 8001bee:	2208      	movs	r2, #8
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d02a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x154>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d026      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	210e      	movs	r1, #14
 8001c0e:	438a      	bics	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	221c      	movs	r2, #28
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2225      	movs	r2, #37	@ 0x25
 8001c30:	2101      	movs	r1, #1
 8001c32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	@ 0x24
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	46c0      	nop			@ (mov r8, r8)
}
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	221c      	movs	r2, #28
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	2101      	movs	r1, #1
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d108      	bne.n	8001c9c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c9a:	e007      	b.n	8001cac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b004      	add	sp, #16
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cca:	e149      	b.n	8001f60 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4091      	lsls	r1, r2
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d100      	bne.n	8001ce4 <HAL_GPIO_Init+0x30>
 8001ce2:	e13a      	b.n	8001f5a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	2201      	movs	r2, #1
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	58d3      	ldr	r3, [r2, r3]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2207      	movs	r2, #7
 8001db8:	4013      	ands	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2107      	movs	r1, #7
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	6939      	ldr	r1, [r7, #16]
 8001dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	23c0      	movs	r3, #192	@ 0xc0
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_GPIO_Init+0x17c>
 8001e2e:	e094      	b.n	8001f5a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e34:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	589b      	ldr	r3, [r3, r2]
 8001e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	23a0      	movs	r3, #160	@ 0xa0
 8001e64:	05db      	lsls	r3, r3, #23
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x1de>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a44      	ldr	r2, [pc, #272]	@ (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x1da>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a43      	ldr	r2, [pc, #268]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x1d6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	@ (8001f88 <HAL_GPIO_Init+0x2d4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x1d2>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e92:	2300      	movs	r3, #0
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	2103      	movs	r1, #3
 8001e98:	400a      	ands	r2, r1
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	035b      	lsls	r3, r3, #13
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	039b      	lsls	r3, r3, #14
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	1e13      	subs	r3, r2, #0
 8001f6a:	d000      	beq.n	8001f6e <HAL_GPIO_Init+0x2ba>
 8001f6c:	e6ae      	b.n	8001ccc <HAL_GPIO_Init+0x18>
  }
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	50000400 	.word	0x50000400
 8001f84:	50000800 	.word	0x50000800
 8001f88:	50001c00 	.word	0x50001c00
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	000a      	movs	r2, r1
 8001f9a:	1cbb      	adds	r3, r7, #2
 8001f9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	1cba      	adds	r2, r7, #2
 8001fa4:	8812      	ldrh	r2, [r2, #0]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e003      	b.n	8001fbc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f000 fb6c 	bl	80026b8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe0:	4bc8      	ldr	r3, [pc, #800]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fea:	4bc6      	ldr	r3, [pc, #792]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x36>
 8002000:	e07d      	b.n	80020fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d007      	beq.n	8002018 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x68>
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	429a      	cmp	r2, r3
 8002016:	d10d      	bne.n	8002034 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4bba      	ldr	r3, [pc, #744]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <HAL_RCC_OscConfig+0x5a>
 8002024:	e06a      	b.n	80020fc <HAL_RCC_OscConfig+0x130>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d166      	bne.n	80020fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f000 fb42 	bl	80026b8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x84>
 8002040:	4bb0      	ldr	r3, [pc, #704]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4baf      	ldr	r3, [pc, #700]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002046:	2180      	movs	r1, #128	@ 0x80
 8002048:	0249      	lsls	r1, r1, #9
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e027      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	23a0      	movs	r3, #160	@ 0xa0
 8002056:	02db      	lsls	r3, r3, #11
 8002058:	429a      	cmp	r2, r3
 800205a:	d10e      	bne.n	800207a <HAL_RCC_OscConfig+0xae>
 800205c:	4ba9      	ldr	r3, [pc, #676]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4ba8      	ldr	r3, [pc, #672]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	02c9      	lsls	r1, r1, #11
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	4ba6      	ldr	r3, [pc, #664]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4ba5      	ldr	r3, [pc, #660]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	0249      	lsls	r1, r1, #9
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e012      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 800207a:	4ba2      	ldr	r3, [pc, #648]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4ba1      	ldr	r3, [pc, #644]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002080:	49a1      	ldr	r1, [pc, #644]	@ (8002308 <HAL_RCC_OscConfig+0x33c>)
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b9f      	ldr	r3, [pc, #636]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4b9b      	ldr	r3, [pc, #620]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b9a      	ldr	r3, [pc, #616]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800209a:	499c      	ldr	r1, [pc, #624]	@ (800230c <HAL_RCC_OscConfig+0x340>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f924 	bl	80012f4 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b2:	f7ff f91f 	bl	80012f4 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	@ 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2f9      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0xe6>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff f90f 	bl	80012f4 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f90a 	bl	80012f4 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2e4      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ee:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x110>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x13e>
 8002108:	e099      	b.n	800223e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	2220      	movs	r2, #32
 8002114:	4013      	ands	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002118:	4b7a      	ldr	r3, [pc, #488]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b79      	ldr	r3, [pc, #484]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800211e:	2120      	movs	r1, #32
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	2220      	movs	r2, #32
 8002128:	4393      	bics	r3, r2
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d13e      	bne.n	80021b6 <HAL_RCC_OscConfig+0x1ea>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d13b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800213e:	4b71      	ldr	r3, [pc, #452]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2204      	movs	r2, #4
 8002144:	4013      	ands	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_RCC_OscConfig+0x186>
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e2b2      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b6c      	ldr	r3, [pc, #432]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <HAL_RCC_OscConfig+0x344>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	4b68      	ldr	r3, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2209      	movs	r2, #9
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217a:	f000 fbeb 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800217e:	0001      	movs	r1, r0
 8002180:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	220f      	movs	r2, #15
 8002188:	4013      	ands	r3, r2
 800218a:	4a62      	ldr	r2, [pc, #392]	@ (8002314 <HAL_RCC_OscConfig+0x348>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	000a      	movs	r2, r1
 8002190:	40da      	lsrs	r2, r3
 8002192:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <HAL_RCC_OscConfig+0x34c>)
 8002194:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002196:	4b61      	ldr	r3, [pc, #388]	@ (800231c <HAL_RCC_OscConfig+0x350>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2513      	movs	r5, #19
 800219c:	197c      	adds	r4, r7, r5
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff f862 	bl	8001268 <HAL_InitTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021a8:	197b      	adds	r3, r7, r5
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d046      	beq.n	800223e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80021b0:	197b      	adds	r3, r7, r5
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	e280      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d027      	beq.n	800220c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021bc:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2209      	movs	r2, #9
 80021c2:	4393      	bics	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80021c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff f891 	bl	80012f4 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff f88c 	bl	80012f4 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e266      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ea:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d0f1      	beq.n	80021d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a45      	ldr	r2, [pc, #276]	@ (8002310 <HAL_RCC_OscConfig+0x344>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	021a      	lsls	r2, r3, #8
 8002204:	4b3f      	ldr	r3, [pc, #252]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e018      	b.n	800223e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220c:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f86c 	bl	80012f4 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff f867 	bl	80012f4 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e241      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d1f1      	bne.n	8002222 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2210      	movs	r2, #16
 8002244:	4013      	ands	r3, r2
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x27e>
 8002248:	e0a1      	b.n	800238e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d140      	bne.n	80022d2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d005      	beq.n	8002268 <HAL_RCC_OscConfig+0x29c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e227      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002268:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a2c      	ldr	r2, [pc, #176]	@ (8002320 <HAL_RCC_OscConfig+0x354>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227c:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	0a19      	lsrs	r1, r3, #8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	061a      	lsls	r2, r3, #24
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	0b5b      	lsrs	r3, r3, #13
 8002296:	3301      	adds	r3, #1
 8002298:	2280      	movs	r2, #128	@ 0x80
 800229a:	0212      	lsls	r2, r2, #8
 800229c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800229e:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	210f      	movs	r1, #15
 80022a6:	400b      	ands	r3, r1
 80022a8:	491a      	ldr	r1, [pc, #104]	@ (8002314 <HAL_RCC_OscConfig+0x348>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_RCC_OscConfig+0x34c>)
 80022b0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_RCC_OscConfig+0x350>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2513      	movs	r5, #19
 80022b8:	197c      	adds	r4, r7, r5
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fe ffd4 	bl	8001268 <HAL_InitTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d060      	beq.n	800238e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	e1f2      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03f      	beq.n	800235a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_RCC_OscConfig+0x338>)
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	0049      	lsls	r1, r1, #1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff f804 	bl	80012f4 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022f0:	e018      	b.n	8002324 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f2:	f7fe ffff 	bl	80012f4 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d911      	bls.n	8002324 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1d9      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
 8002304:	40021000 	.word	0x40021000
 8002308:	fffeffff 	.word	0xfffeffff
 800230c:	fffbffff 	.word	0xfffbffff
 8002310:	ffffe0ff 	.word	0xffffe0ff
 8002314:	08003a3c 	.word	0x08003a3c
 8002318:	20000004 	.word	0x20000004
 800231c:	20000008 	.word	0x20000008
 8002320:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002324:	4bc9      	ldr	r3, [pc, #804]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d0e0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002330:	4bc6      	ldr	r3, [pc, #792]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4ac6      	ldr	r2, [pc, #792]	@ (8002650 <HAL_RCC_OscConfig+0x684>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	4bc3      	ldr	r3, [pc, #780]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002344:	4bc1      	ldr	r3, [pc, #772]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	0a19      	lsrs	r1, r3, #8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	061a      	lsls	r2, r3, #24
 8002352:	4bbe      	ldr	r3, [pc, #760]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	e019      	b.n	800238e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800235a:	4bbc      	ldr	r3, [pc, #752]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4bbb      	ldr	r3, [pc, #748]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002360:	49bc      	ldr	r1, [pc, #752]	@ (8002654 <HAL_RCC_OscConfig+0x688>)
 8002362:	400a      	ands	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe ffc5 	bl	80012f4 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002370:	f7fe ffc0 	bl	80012f4 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e19a      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002382:	4bb2      	ldr	r3, [pc, #712]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d019      	beq.n	80023d4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a0:	4baa      	ldr	r3, [pc, #680]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a4:	4ba9      	ldr	r3, [pc, #676]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe ffa2 	bl	80012f4 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe ff9d 	bl	80012f4 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e177      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023c8:	4ba0      	ldr	r3, [pc, #640]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d0f1      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3ea>
 80023d2:	e018      	b.n	8002406 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b9d      	ldr	r3, [pc, #628]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d8:	4b9c      	ldr	r3, [pc, #624]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe ff88 	bl	80012f4 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe ff83 	bl	80012f4 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e15d      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023fc:	4b93      	ldr	r3, [pc, #588]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d1f1      	bne.n	80023ea <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2204      	movs	r2, #4
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x446>
 8002410:	e0ae      	b.n	8002570 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2023      	movs	r0, #35	@ 0x23
 8002414:	183b      	adds	r3, r7, r0
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b8c      	ldr	r3, [pc, #560]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800241c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	055b      	lsls	r3, r3, #21
 8002422:	4013      	ands	r3, r2
 8002424:	d109      	bne.n	800243a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b89      	ldr	r3, [pc, #548]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800242a:	4b88      	ldr	r3, [pc, #544]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800242c:	2180      	movs	r1, #128	@ 0x80
 800242e:	0549      	lsls	r1, r1, #21
 8002430:	430a      	orrs	r2, r1
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002434:	183b      	adds	r3, r7, r0
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b87      	ldr	r3, [pc, #540]	@ (8002658 <HAL_RCC_OscConfig+0x68c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4013      	ands	r3, r2
 8002444:	d11a      	bne.n	800247c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b84      	ldr	r3, [pc, #528]	@ (8002658 <HAL_RCC_OscConfig+0x68c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b83      	ldr	r3, [pc, #524]	@ (8002658 <HAL_RCC_OscConfig+0x68c>)
 800244c:	2180      	movs	r1, #128	@ 0x80
 800244e:	0049      	lsls	r1, r1, #1
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002454:	f7fe ff4e 	bl	80012f4 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe ff49 	bl	80012f4 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	@ 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e123      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_OscConfig+0x68c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4013      	ands	r3, r2
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4cc>
 8002488:	4b70      	ldr	r3, [pc, #448]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800248a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800248c:	4b6f      	ldr	r3, [pc, #444]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800248e:	2180      	movs	r1, #128	@ 0x80
 8002490:	0049      	lsls	r1, r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	651a      	str	r2, [r3, #80]	@ 0x50
 8002496:	e031      	b.n	80024fc <HAL_RCC_OscConfig+0x530>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x4ee>
 80024a0:	4b6a      	ldr	r3, [pc, #424]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024a4:	4b69      	ldr	r3, [pc, #420]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024a6:	496b      	ldr	r1, [pc, #428]	@ (8002654 <HAL_RCC_OscConfig+0x688>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ac:	4b67      	ldr	r3, [pc, #412]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024b2:	496a      	ldr	r1, [pc, #424]	@ (800265c <HAL_RCC_OscConfig+0x690>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80024b8:	e020      	b.n	80024fc <HAL_RCC_OscConfig+0x530>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	23a0      	movs	r3, #160	@ 0xa0
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10e      	bne.n	80024e4 <HAL_RCC_OscConfig+0x518>
 80024c6:	4b61      	ldr	r3, [pc, #388]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024ca:	4b60      	ldr	r3, [pc, #384]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024cc:	2180      	movs	r1, #128	@ 0x80
 80024ce:	00c9      	lsls	r1, r1, #3
 80024d0:	430a      	orrs	r2, r1
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80024d4:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024d8:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	0049      	lsls	r1, r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x530>
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024ea:	495a      	ldr	r1, [pc, #360]	@ (8002654 <HAL_RCC_OscConfig+0x688>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f4:	4b55      	ldr	r3, [pc, #340]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80024f6:	4959      	ldr	r1, [pc, #356]	@ (800265c <HAL_RCC_OscConfig+0x690>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe fef6 	bl	80012f4 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800250c:	e009      	b.n	8002522 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fef1 	bl	80012f4 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	4a51      	ldr	r2, [pc, #324]	@ (8002660 <HAL_RCC_OscConfig+0x694>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0ca      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d0ef      	beq.n	800250e <HAL_RCC_OscConfig+0x542>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fee0 	bl	80012f4 <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002538:	e009      	b.n	800254e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fedb 	bl	80012f4 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_RCC_OscConfig+0x694>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0b4      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800254e:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800255a:	2323      	movs	r3, #35	@ 0x23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002568:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800256a:	493e      	ldr	r1, [pc, #248]	@ (8002664 <HAL_RCC_OscConfig+0x698>)
 800256c:	400a      	ands	r2, r1
 800256e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x5ae>
 8002578:	e09d      	b.n	80026b6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x5b6>
 8002580:	e076      	b.n	8002670 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	2b02      	cmp	r3, #2
 8002588:	d145      	bne.n	8002616 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b30      	ldr	r3, [pc, #192]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002590:	4935      	ldr	r1, [pc, #212]	@ (8002668 <HAL_RCC_OscConfig+0x69c>)
 8002592:	400a      	ands	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fead 	bl	80012f4 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fea8 	bl	80012f4 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e082      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025b2:	4b26      	ldr	r3, [pc, #152]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	049b      	lsls	r3, r3, #18
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x6a0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	431a      	orrs	r2, r3
 80025d8:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	0449      	lsls	r1, r1, #17
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe82 	bl	80012f4 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fe7d 	bl	80012f4 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e057      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	049b      	lsls	r3, r3, #18
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x62a>
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 800261c:	4912      	ldr	r1, [pc, #72]	@ (8002668 <HAL_RCC_OscConfig+0x69c>)
 800261e:	400a      	ands	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fe67 	bl	80012f4 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fe62 	bl	80012f4 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e03c      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800263e:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_RCC_OscConfig+0x680>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	049b      	lsls	r3, r3, #18
 8002646:	4013      	ands	r3, r2
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x660>
 800264a:	e034      	b.n	80026b6 <HAL_RCC_OscConfig+0x6ea>
 800264c:	40021000 	.word	0x40021000
 8002650:	ffff1fff 	.word	0xffff1fff
 8002654:	fffffeff 	.word	0xfffffeff
 8002658:	40007000 	.word	0x40007000
 800265c:	fffffbff 	.word	0xfffffbff
 8002660:	00001388 	.word	0x00001388
 8002664:	efffffff 	.word	0xefffffff
 8002668:	feffffff 	.word	0xfeffffff
 800266c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <HAL_RCC_OscConfig+0x6f4>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	429a      	cmp	r2, r3
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	23f0      	movs	r3, #240	@ 0xf0
 8002696:	039b      	lsls	r3, r3, #14
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	23c0      	movs	r3, #192	@ 0xc0
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	401a      	ands	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b00a      	add	sp, #40	@ 0x28
 80026be:	bdb0      	pop	{r4, r5, r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e128      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b96      	ldr	r3, [pc, #600]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d91e      	bls.n	8002724 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b93      	ldr	r3, [pc, #588]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4393      	bics	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	4b90      	ldr	r3, [pc, #576]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fdfc 	bl	80012f4 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	e009      	b.n	8002716 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002702:	f7fe fdf7 	bl	80012f4 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	4a8a      	ldr	r2, [pc, #552]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e109      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b87      	ldr	r3, [pc, #540]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	4013      	ands	r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2202      	movs	r2, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272e:	4b83      	ldr	r3, [pc, #524]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	22f0      	movs	r2, #240	@ 0xf0
 8002734:	4393      	bics	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b7f      	ldr	r3, [pc, #508]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 800273e:	430a      	orrs	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_ClockConfig+0x8a>
 800274c:	e089      	b.n	8002862 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002756:	4b79      	ldr	r3, [pc, #484]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	4013      	ands	r3, r2
 8002760:	d120      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0e1      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800276e:	4b73      	ldr	r3, [pc, #460]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	049b      	lsls	r3, r3, #18
 8002776:	4013      	ands	r3, r2
 8002778:	d114      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0d5      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d106      	bne.n	8002794 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2204      	movs	r2, #4
 800278c:	4013      	ands	r3, r2
 800278e:	d109      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0ca      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002794:	4b69      	ldr	r3, [pc, #420]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4013      	ands	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0c2      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a4:	4b65      	ldr	r3, [pc, #404]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2203      	movs	r2, #3
 80027aa:	4393      	bics	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4b62      	ldr	r3, [pc, #392]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fd9c 	bl	80012f4 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d111      	bne.n	80027ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c8:	e009      	b.n	80027de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ca:	f7fe fd93 	bl	80012f4 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	4a58      	ldr	r2, [pc, #352]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0a5      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027de:	4b57      	ldr	r3, [pc, #348]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	220c      	movs	r2, #12
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d1ef      	bne.n	80027ca <HAL_RCC_ClockConfig+0x106>
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d111      	bne.n	8002818 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f4:	e009      	b.n	800280a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fd7d 	bl	80012f4 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	4a4d      	ldr	r2, [pc, #308]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e08f      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280a:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	220c      	movs	r2, #12
 8002810:	4013      	ands	r3, r2
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d1ef      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x132>
 8002816:	e024      	b.n	8002862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11b      	bne.n	8002858 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002820:	e009      	b.n	8002836 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe fd67 	bl	80012f4 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a42      	ldr	r2, [pc, #264]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e079      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002836:	4b41      	ldr	r3, [pc, #260]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	220c      	movs	r2, #12
 800283c:	4013      	ands	r3, r2
 800283e:	2b04      	cmp	r3, #4
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_ClockConfig+0x15e>
 8002842:	e00e      	b.n	8002862 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe fd56 	bl	80012f4 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e068      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002858:	4b38      	ldr	r3, [pc, #224]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	220c      	movs	r2, #12
 800285e:	4013      	ands	r3, r2
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002862:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	4013      	ands	r3, r2
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d21e      	bcs.n	80028ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002870:	4b30      	ldr	r3, [pc, #192]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	4393      	bics	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	4b2e      	ldr	r3, [pc, #184]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002882:	f7fe fd37 	bl	80012f4 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	e009      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fd32 	bl	80012f4 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4a28      	ldr	r2, [pc, #160]	@ (8002938 <HAL_RCC_ClockConfig+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e044      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_ClockConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1ee      	bne.n	800288c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2204      	movs	r2, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a20      	ldr	r2, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x27c>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00a      	beq.n	80028ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a1a      	ldr	r2, [pc, #104]	@ (8002944 <HAL_RCC_ClockConfig+0x280>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	00da      	lsls	r2, r3, #3
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ec:	f000 f832 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80028f0:	0001      	movs	r1, r0
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_RCC_ClockConfig+0x278>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	220f      	movs	r2, #15
 80028fa:	4013      	ands	r3, r2
 80028fc:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <HAL_RCC_ClockConfig+0x284>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	000a      	movs	r2, r1
 8002902:	40da      	lsrs	r2, r3
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_ClockConfig+0x288>)
 8002906:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_RCC_ClockConfig+0x28c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	250b      	movs	r5, #11
 800290e:	197c      	adds	r4, r7, r5
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe fca9 	bl	8001268 <HAL_InitTick>
 8002916:	0003      	movs	r3, r0
 8002918:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800291a:	197b      	adds	r3, r7, r5
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002922:	197b      	adds	r3, r7, r5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	e000      	b.n	800292a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bdb0      	pop	{r4, r5, r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40022000 	.word	0x40022000
 8002938:	00001388 	.word	0x00001388
 800293c:	40021000 	.word	0x40021000
 8002940:	fffff8ff 	.word	0xfffff8ff
 8002944:	ffffc7ff 	.word	0xffffc7ff
 8002948:	08003a3c 	.word	0x08003a3c
 800294c:	20000004 	.word	0x20000004
 8002950:	20000008 	.word	0x20000008

08002954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800295a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x138>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002962:	230c      	movs	r3, #12
 8002964:	4013      	ands	r3, r2
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d014      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 800296a:	d900      	bls.n	800296e <HAL_RCC_GetSysClockFreq+0x1a>
 800296c:	e07b      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x112>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x24>
 8002972:	2b08      	cmp	r3, #8
 8002974:	d00b      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 8002976:	e076      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002978:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x138>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2210      	movs	r2, #16
 800297e:	4013      	ands	r3, r2
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002982:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002984:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002986:	e07c      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002988:	4b42      	ldr	r3, [pc, #264]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x140>)
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800298c:	e079      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x144>)
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002992:	e076      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	0c9a      	lsrs	r2, r3, #18
 8002998:	230f      	movs	r3, #15
 800299a:	401a      	ands	r2, r3
 800299c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x148>)
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	0d9a      	lsrs	r2, r3, #22
 80029a6:	2303      	movs	r3, #3
 80029a8:	4013      	ands	r3, r2
 80029aa:	3301      	adds	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ae:	4b37      	ldr	r3, [pc, #220]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	4013      	ands	r3, r2
 80029b8:	d01a      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	4a35      	ldr	r2, [pc, #212]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x144>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	69b8      	ldr	r0, [r7, #24]
 80029c8:	69f9      	ldr	r1, [r7, #28]
 80029ca:	f7fd fd33 	bl	8000434 <__aeabi_lmul>
 80029ce:	0002      	movs	r2, r0
 80029d0:	000b      	movs	r3, r1
 80029d2:	0010      	movs	r0, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f7fd fd07 	bl	80003f4 <__aeabi_uldivmod>
 80029e6:	0002      	movs	r2, r0
 80029e8:	000b      	movs	r3, r1
 80029ea:	0013      	movs	r3, r2
 80029ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ee:	e037      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029f0:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2210      	movs	r2, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d01a      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4a23      	ldr	r2, [pc, #140]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a04:	2300      	movs	r3, #0
 8002a06:	68b8      	ldr	r0, [r7, #8]
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	f7fd fd13 	bl	8000434 <__aeabi_lmul>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	000b      	movs	r3, r1
 8002a12:	0010      	movs	r0, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f7fd fce7 	bl	80003f4 <__aeabi_uldivmod>
 8002a26:	0002      	movs	r2, r0
 8002a28:	000b      	movs	r3, r1
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a2e:	e017      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	0018      	movs	r0, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	0019      	movs	r1, r3
 8002a38:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f7fd fcfa 	bl	8000434 <__aeabi_lmul>
 8002a40:	0002      	movs	r2, r0
 8002a42:	000b      	movs	r3, r1
 8002a44:	0010      	movs	r0, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	001c      	movs	r4, r3
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	001d      	movs	r5, r3
 8002a50:	0022      	movs	r2, r4
 8002a52:	002b      	movs	r3, r5
 8002a54:	f7fd fcce 	bl	80003f4 <__aeabi_uldivmod>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a64:	e00d      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0b5b      	lsrs	r3, r3, #13
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	4013      	ands	r3, r2
 8002a70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	3301      	adds	r3, #1
 8002a76:	2280      	movs	r2, #128	@ 0x80
 8002a78:	0212      	lsls	r2, r2, #8
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a80:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b00e      	add	sp, #56	@ 0x38
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	003d0900 	.word	0x003d0900
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	08003a4c 	.word	0x08003a4c

08002aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07b      	b.n	8002baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	2382      	movs	r3, #130	@ 0x82
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d009      	beq.n	8002ada <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
 8002acc:	e005      	b.n	8002ada <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2251      	movs	r2, #81	@ 0x51
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2250      	movs	r2, #80	@ 0x50
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fe fa7a 	bl	8000ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2251      	movs	r2, #81	@ 0x51
 8002b00:	2102      	movs	r1, #2
 8002b02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2140      	movs	r1, #64	@ 0x40
 8002b10:	438a      	bics	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2382      	movs	r3, #130	@ 0x82
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	2384      	movs	r3, #132	@ 0x84
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	400b      	ands	r3, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	400b      	ands	r3, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2101      	movs	r1, #1
 8002b46:	400b      	ands	r3, r1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	400b      	ands	r3, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2138      	movs	r1, #56	@ 0x38
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	2180      	movs	r1, #128	@ 0x80
 8002b66:	400b      	ands	r3, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	019b      	lsls	r3, r3, #6
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	2204      	movs	r2, #4
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	2210      	movs	r2, #16
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2251      	movs	r2, #81	@ 0x51
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b002      	add	sp, #8
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2239      	movs	r2, #57	@ 0x39
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2238      	movs	r2, #56	@ 0x38
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fe fa4c 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2239      	movs	r2, #57	@ 0x39
 8002be4:	2102      	movs	r1, #2
 8002be6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	f000 fc76 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	223e      	movs	r2, #62	@ 0x3e
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223a      	movs	r2, #58	@ 0x3a
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223b      	movs	r2, #59	@ 0x3b
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223c      	movs	r2, #60	@ 0x3c
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223d      	movs	r2, #61	@ 0x3d
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2239      	movs	r2, #57	@ 0x39
 8002c24:	2101      	movs	r1, #1
 8002c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2239      	movs	r2, #57	@ 0x39
 8002c48:	5c9b      	ldrb	r3, [r3, r2]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2238      	movs	r2, #56	@ 0x38
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f829 	bl	8002cb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2239      	movs	r2, #57	@ 0x39
 8002c64:	2102      	movs	r1, #2
 8002c66:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	0019      	movs	r1, r3
 8002c72:	0010      	movs	r0, r2
 8002c74:	f000 fc36 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223e      	movs	r2, #62	@ 0x3e
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	223a      	movs	r2, #58	@ 0x3a
 8002c84:	2101      	movs	r1, #1
 8002c86:	5499      	strb	r1, [r3, r2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	223b      	movs	r2, #59	@ 0x3b
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5499      	strb	r1, [r3, r2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223c      	movs	r2, #60	@ 0x3c
 8002c94:	2101      	movs	r1, #1
 8002c96:	5499      	strb	r1, [r3, r2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	223d      	movs	r2, #61	@ 0x3d
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2239      	movs	r2, #57	@ 0x39
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	1cbb      	adds	r3, r7, #2
 8002cd4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2317      	movs	r3, #23
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d108      	bne.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0x32>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	223a      	movs	r2, #58	@ 0x3a
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3b02      	subs	r3, #2
 8002cee:	425a      	negs	r2, r3
 8002cf0:	4153      	adcs	r3, r2
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e01f      	b.n	8002d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIM_PWM_Start_DMA+0x4a>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	223b      	movs	r2, #59	@ 0x3b
 8002d00:	5c9b      	ldrb	r3, [r3, r2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3b02      	subs	r3, #2
 8002d06:	425a      	negs	r2, r3
 8002d08:	4153      	adcs	r3, r2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d108      	bne.n	8002d26 <HAL_TIM_PWM_Start_DMA+0x62>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	223c      	movs	r2, #60	@ 0x3c
 8002d18:	5c9b      	ldrb	r3, [r3, r2]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3b02      	subs	r3, #2
 8002d1e:	425a      	negs	r2, r3
 8002d20:	4153      	adcs	r3, r2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e007      	b.n	8002d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	223d      	movs	r2, #61	@ 0x3d
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3b02      	subs	r3, #2
 8002d30:	425a      	negs	r2, r3
 8002d32:	4153      	adcs	r3, r2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e13d      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x92>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	223a      	movs	r2, #58	@ 0x3a
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	425a      	negs	r2, r3
 8002d50:	4153      	adcs	r3, r2
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e01f      	b.n	8002d96 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d108      	bne.n	8002d6e <HAL_TIM_PWM_Start_DMA+0xaa>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	223b      	movs	r2, #59	@ 0x3b
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	425a      	negs	r2, r3
 8002d68:	4153      	adcs	r3, r2
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	e013      	b.n	8002d96 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d108      	bne.n	8002d86 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	223c      	movs	r2, #60	@ 0x3c
 8002d78:	5c9b      	ldrb	r3, [r3, r2]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	425a      	negs	r2, r3
 8002d80:	4153      	adcs	r3, r2
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e007      	b.n	8002d96 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	223d      	movs	r2, #61	@ 0x3d
 8002d8a:	5c9b      	ldrb	r3, [r3, r2]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	425a      	negs	r2, r3
 8002d92:	4153      	adcs	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d025      	beq.n	8002de6 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_TIM_PWM_Start_DMA+0xe4>
 8002da0:	1cbb      	adds	r3, r7, #2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e106      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <HAL_TIM_PWM_Start_DMA+0xf8>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	223a      	movs	r2, #58	@ 0x3a
 8002db6:	2102      	movs	r1, #2
 8002db8:	5499      	strb	r1, [r3, r2]
 8002dba:	e016      	b.n	8002dea <HAL_TIM_PWM_Start_DMA+0x126>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d104      	bne.n	8002dcc <HAL_TIM_PWM_Start_DMA+0x108>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	223b      	movs	r2, #59	@ 0x3b
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	5499      	strb	r1, [r3, r2]
 8002dca:	e00e      	b.n	8002dea <HAL_TIM_PWM_Start_DMA+0x126>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d104      	bne.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x118>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	223c      	movs	r2, #60	@ 0x3c
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	5499      	strb	r1, [r3, r2]
 8002dda:	e006      	b.n	8002dea <HAL_TIM_PWM_Start_DMA+0x126>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	223d      	movs	r2, #61	@ 0x3d
 8002de0:	2102      	movs	r1, #2
 8002de2:	5499      	strb	r1, [r3, r2]
 8002de4:	e001      	b.n	8002dea <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0e7      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d100      	bne.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x12e>
 8002df0:	e080      	b.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x230>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d900      	bls.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x136>
 8002df8:	e0a1      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x27a>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d054      	beq.n	8002eaa <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d900      	bls.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x144>
 8002e06:	e09a      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x27a>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_PWM_Start_DMA+0x152>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d025      	beq.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x19c>
 8002e14:	e093      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a68      	ldr	r2, [pc, #416]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x308>)
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a18      	ldr	r0, [r3, #32]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3334      	adds	r3, #52	@ 0x34
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	1cbb      	adds	r3, r7, #2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	f7fe fdf6 	bl	8001a30 <HAL_DMA_Start_IT>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b6      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	0089      	lsls	r1, r1, #2
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
      break;
 8002e5e:	e073      	b.n	8002f48 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	4a55      	ldr	r2, [pc, #340]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x308>)
 8002e76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3338      	adds	r3, #56	@ 0x38
 8002e84:	001a      	movs	r2, r3
 8002e86:	1cbb      	adds	r3, r7, #2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f7fe fdd1 	bl	8001a30 <HAL_DMA_Start_IT>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e091      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	00c9      	lsls	r1, r1, #3
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]
      break;
 8002ea8:	e04e      	b.n	8002f48 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	4a44      	ldr	r2, [pc, #272]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	4a43      	ldr	r2, [pc, #268]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x308>)
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	333c      	adds	r3, #60	@ 0x3c
 8002ece:	001a      	movs	r2, r3
 8002ed0:	1cbb      	adds	r3, r7, #2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	f7fe fdac 	bl	8001a30 <HAL_DMA_Start_IT>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e06c      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	0109      	lsls	r1, r1, #4
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	60da      	str	r2, [r3, #12]
      break;
 8002ef2:	e029      	b.n	8002f48 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x304>)
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x308>)
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3340      	adds	r3, #64	@ 0x40
 8002f18:	001a      	movs	r2, r3
 8002f1a:	1cbb      	adds	r3, r7, #2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	f7fe fd87 	bl	8001a30 <HAL_DMA_Start_IT>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e047      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2180      	movs	r1, #128	@ 0x80
 8002f36:	0149      	lsls	r1, r1, #5
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]
      break;
 8002f3c:	e004      	b.n	8002f48 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002f3e:	2317      	movs	r3, #23
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d130      	bne.n	8002fb4 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fcb4 	bl	80038c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x310>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2207      	movs	r2, #7
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d010      	beq.n	8002fb4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	e007      	b.n	8002fb4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fb4:	2317      	movs	r3, #23
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	080033d1 	.word	0x080033d1
 8002fc8:	0800347b 	.word	0x0800347b
 8002fcc:	0800333d 	.word	0x0800333d
 8002fd0:	40010800 	.word	0x40010800
 8002fd4:	40011400 	.word	0x40011400

08002fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2317      	movs	r3, #23
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2238      	movs	r2, #56	@ 0x38
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0ad      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2238      	movs	r2, #56	@ 0x38
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d100      	bne.n	800300a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003008:	e076      	b.n	80030f8 <HAL_TIM_PWM_ConfigChannel+0x120>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d900      	bls.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003010:	e095      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d04e      	beq.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d900      	bls.n	8003020 <HAL_TIM_PWM_ConfigChannel+0x48>
 800301e:	e08e      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d021      	beq.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x98>
 800302c:	e087      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f000 faa8 	bl	800358c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2108      	movs	r1, #8
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2104      	movs	r1, #4
 8003058:	438a      	bics	r2, r1
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	619a      	str	r2, [r3, #24]
      break;
 800306e:	e06b      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fac3 	bl	8003604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	0109      	lsls	r1, r1, #4
 800308c:	430a      	orrs	r2, r1
 800308e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4931      	ldr	r1, [pc, #196]	@ (8003160 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800309c:	400a      	ands	r2, r1
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	619a      	str	r2, [r3, #24]
      break;
 80030b4:	e048      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	0011      	movs	r1, r2
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fae2 	bl	8003688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2108      	movs	r1, #8
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2104      	movs	r1, #4
 80030e0:	438a      	bics	r2, r1
 80030e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69d9      	ldr	r1, [r3, #28]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	61da      	str	r2, [r3, #28]
      break;
 80030f6:	e027      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f000 fb01 	bl	8003708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2180      	movs	r1, #128	@ 0x80
 8003112:	0109      	lsls	r1, r1, #4
 8003114:	430a      	orrs	r2, r1
 8003116:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	490f      	ldr	r1, [pc, #60]	@ (8003160 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003124:	400a      	ands	r2, r1
 8003126:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69d9      	ldr	r1, [r3, #28]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	021a      	lsls	r2, r3, #8
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
      break;
 800313c:	e004      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
      break;
 8003146:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2238      	movs	r2, #56	@ 0x38
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]

  return status;
 8003150:	2317      	movs	r3, #23
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	781b      	ldrb	r3, [r3, #0]
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b006      	add	sp, #24
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	fffffbff 	.word	0xfffffbff

08003164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2238      	movs	r2, #56	@ 0x38
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIM_ConfigClockSource+0x20>
 8003180:	2302      	movs	r3, #2
 8003182:	e0bc      	b.n	80032fe <HAL_TIM_ConfigClockSource+0x19a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2238      	movs	r2, #56	@ 0x38
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2239      	movs	r2, #57	@ 0x39
 8003190:	2102      	movs	r1, #2
 8003192:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2277      	movs	r2, #119	@ 0x77
 80031a0:	4393      	bics	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	0192      	lsls	r2, r2, #6
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xde>
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	0192      	lsls	r2, r2, #6
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d900      	bls.n	80031ca <HAL_TIM_ConfigClockSource+0x66>
 80031c8:	e088      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	0152      	lsls	r2, r2, #5
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d100      	bne.n	80031d4 <HAL_TIM_ConfigClockSource+0x70>
 80031d2:	e088      	b.n	80032e6 <HAL_TIM_ConfigClockSource+0x182>
 80031d4:	2280      	movs	r2, #128	@ 0x80
 80031d6:	0152      	lsls	r2, r2, #5
 80031d8:	4293      	cmp	r3, r2
 80031da:	d900      	bls.n	80031de <HAL_TIM_ConfigClockSource+0x7a>
 80031dc:	e07e      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031de:	2b70      	cmp	r3, #112	@ 0x70
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xb0>
 80031e2:	d900      	bls.n	80031e6 <HAL_TIM_ConfigClockSource+0x82>
 80031e4:	e07a      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031e6:	2b60      	cmp	r3, #96	@ 0x60
 80031e8:	d04f      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x126>
 80031ea:	d900      	bls.n	80031ee <HAL_TIM_ConfigClockSource+0x8a>
 80031ec:	e076      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031ee:	2b50      	cmp	r3, #80	@ 0x50
 80031f0:	d03b      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x106>
 80031f2:	d900      	bls.n	80031f6 <HAL_TIM_ConfigClockSource+0x92>
 80031f4:	e072      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d057      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x146>
 80031fa:	d900      	bls.n	80031fe <HAL_TIM_ConfigClockSource+0x9a>
 80031fc:	e06e      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 80031fe:	2b30      	cmp	r3, #48	@ 0x30
 8003200:	d063      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x166>
 8003202:	d86b      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 8003204:	2b20      	cmp	r3, #32
 8003206:	d060      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x166>
 8003208:	d868      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d05d      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x166>
 800320e:	2b10      	cmp	r3, #16
 8003210:	d05b      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x166>
 8003212:	e063      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	f000 fb30 	bl	8003888 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2277      	movs	r2, #119	@ 0x77
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e052      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	f000 fb19 	bl	8003888 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2180      	movs	r1, #128	@ 0x80
 8003262:	01c9      	lsls	r1, r1, #7
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
      break;
 8003268:	e03e      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	001a      	movs	r2, r3
 8003278:	f000 fa8c 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2150      	movs	r1, #80	@ 0x50
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fae6 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 8003288:	e02e      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003296:	001a      	movs	r2, r3
 8003298:	f000 faaa 	bl	80037f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2160      	movs	r1, #96	@ 0x60
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fad6 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e01e      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	001a      	movs	r2, r3
 80032b8:	f000 fa6c 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2140      	movs	r1, #64	@ 0x40
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fac6 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 80032c8:	e00e      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0019      	movs	r1, r3
 80032d4:	0010      	movs	r0, r2
 80032d6:	f000 fabd 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 80032da:	e005      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032dc:	230f      	movs	r3, #15
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032e6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2239      	movs	r2, #57	@ 0x39
 80032ec:	2101      	movs	r1, #1
 80032ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2238      	movs	r2, #56	@ 0x38
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

  return status;
 80032f8:	230f      	movs	r3, #15
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	ffff00ff 	.word	0xffff00ff

0800330c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	223a      	movs	r2, #58	@ 0x3a
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	e02a      	b.n	80033ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d107      	bne.n	800337e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2202      	movs	r2, #2
 8003372:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	223b      	movs	r2, #59	@ 0x3b
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]
 800337c:	e01d      	b.n	80033ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2204      	movs	r2, #4
 800338c:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	223c      	movs	r2, #60	@ 0x3c
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	e010      	b.n	80033ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2208      	movs	r2, #8
 80033a6:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	223d      	movs	r2, #61	@ 0x3d
 80033ac:	2101      	movs	r1, #1
 80033ae:	5499      	strb	r1, [r3, r2]
 80033b0:	e003      	b.n	80033ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2239      	movs	r2, #57	@ 0x39
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff ffb5 	bl	800332c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10b      	bne.n	8003400 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d136      	bne.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	223a      	movs	r2, #58	@ 0x3a
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	e031      	b.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d10b      	bne.n	8003422 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2202      	movs	r2, #2
 800340e:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d125      	bne.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	223b      	movs	r2, #59	@ 0x3b
 800341c:	2101      	movs	r1, #1
 800341e:	5499      	strb	r1, [r3, r2]
 8003420:	e020      	b.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d10b      	bne.n	8003444 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2204      	movs	r2, #4
 8003430:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d114      	bne.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	223c      	movs	r2, #60	@ 0x3c
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	e00f      	b.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d10a      	bne.n	8003464 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2208      	movs	r2, #8
 8003452:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	223d      	movs	r2, #61	@ 0x3d
 8003460:	2101      	movs	r1, #1
 8003462:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff ff50 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	761a      	strb	r2, [r3, #24]
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d103      	bne.n	800349a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	761a      	strb	r2, [r3, #24]
 8003498:	e019      	b.n	80034ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d103      	bne.n	80034ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2202      	movs	r2, #2
 80034a8:	761a      	strb	r2, [r3, #24]
 80034aa:	e010      	b.n	80034ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d103      	bne.n	80034be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2204      	movs	r2, #4
 80034ba:	761a      	strb	r2, [r3, #24]
 80034bc:	e007      	b.n	80034ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d102      	bne.n	80034ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2208      	movs	r2, #8
 80034cc:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff23 	bl	800331c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	05db      	lsls	r3, r3, #23
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x2a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <TIM_Base_SetConfig+0x9c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x2a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <TIM_Base_SetConfig+0xa0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2270      	movs	r2, #112	@ 0x70
 8003512:	4393      	bics	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	429a      	cmp	r2, r3
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x56>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a14      	ldr	r2, [pc, #80]	@ (8003580 <TIM_Base_SetConfig+0x9c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x56>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <TIM_Base_SetConfig+0xa0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <TIM_Base_SetConfig+0xa4>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	4393      	bics	r3, r2
 8003552:	001a      	movs	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	615a      	str	r2, [r3, #20]
}
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b004      	add	sp, #16
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40010800 	.word	0x40010800
 8003584:	40011400 	.word	0x40011400
 8003588:	fffffcff 	.word	0xfffffcff

0800358c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	2201      	movs	r2, #1
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2270      	movs	r2, #112	@ 0x70
 80035ba:	4393      	bics	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	4393      	bics	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2202      	movs	r2, #2
 80035d4:	4393      	bics	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b006      	add	sp, #24
 8003602:	bd80      	pop	{r7, pc}

08003604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	2210      	movs	r2, #16
 8003614:	4393      	bics	r3, r2
 8003616:	001a      	movs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <TIM_OC2_SetConfig+0x7c>)
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a12      	ldr	r2, [pc, #72]	@ (8003684 <TIM_OC2_SetConfig+0x80>)
 800363a:	4013      	ands	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2220      	movs	r2, #32
 800364e:	4393      	bics	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b006      	add	sp, #24
 800367e:	bd80      	pop	{r7, pc}
 8003680:	ffff8fff 	.word	0xffff8fff
 8003684:	fffffcff 	.word	0xfffffcff

08003688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <TIM_OC3_SetConfig+0x78>)
 8003698:	401a      	ands	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2270      	movs	r2, #112	@ 0x70
 80036b4:	4393      	bics	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2203      	movs	r2, #3
 80036bc:	4393      	bics	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <TIM_OC3_SetConfig+0x7c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b006      	add	sp, #24
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	fffffeff 	.word	0xfffffeff
 8003704:	fffffdff 	.word	0xfffffdff

08003708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <TIM_OC4_SetConfig+0x7c>)
 8003718:	401a      	ands	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <TIM_OC4_SetConfig+0x80>)
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a14      	ldr	r2, [pc, #80]	@ (800378c <TIM_OC4_SetConfig+0x84>)
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4a10      	ldr	r2, [pc, #64]	@ (8003790 <TIM_OC4_SetConfig+0x88>)
 8003750:	4013      	ands	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b006      	add	sp, #24
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	ffffefff 	.word	0xffffefff
 8003788:	ffff8fff 	.word	0xffff8fff
 800378c:	fffffcff 	.word	0xfffffcff
 8003790:	ffffdfff 	.word	0xffffdfff

08003794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4393      	bics	r3, r2
 80037ae:	001a      	movs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	22f0      	movs	r2, #240	@ 0xf0
 80037be:	4393      	bics	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	220a      	movs	r2, #10
 80037d0:	4393      	bics	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2210      	movs	r2, #16
 8003802:	4393      	bics	r3, r2
 8003804:	001a      	movs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <TIM_TI2_ConfigInputStage+0x60>)
 800381a:	4013      	ands	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	22a0      	movs	r2, #160	@ 0xa0
 800382c:	4393      	bics	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	ffff0fff 	.word	0xffff0fff

08003854 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2270      	movs	r2, #112	@ 0x70
 8003868:	4393      	bics	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	2207      	movs	r2, #7
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4a09      	ldr	r2, [pc, #36]	@ (80038c4 <TIM_ETR_SetConfig+0x3c>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	ffff00ff 	.word	0xffff00ff

080038c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	221f      	movs	r2, #31
 80038d8:	4013      	ands	r3, r2
 80038da:	2201      	movs	r2, #1
 80038dc:	409a      	lsls	r2, r3
 80038de:	0013      	movs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	43d2      	mvns	r2, r2
 80038ea:	401a      	ands	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	211f      	movs	r1, #31
 80038f8:	400b      	ands	r3, r1
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4099      	lsls	r1, r3
 80038fe:	000b      	movs	r3, r1
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b006      	add	sp, #24
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2238      	movs	r2, #56	@ 0x38
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e042      	b.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2238      	movs	r2, #56	@ 0x38
 800392c:	2101      	movs	r1, #1
 800392e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2239      	movs	r2, #57	@ 0x39
 8003934:	2102      	movs	r1, #2
 8003936:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2270      	movs	r2, #112	@ 0x70
 800394c:	4393      	bics	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	2380      	movs	r3, #128	@ 0x80
 8003968:	05db      	lsls	r3, r3, #23
 800396a:	429a      	cmp	r2, r3
 800396c:	d009      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a11      	ldr	r2, [pc, #68]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0f      	ldr	r2, [pc, #60]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10c      	bne.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2280      	movs	r2, #128	@ 0x80
 8003986:	4393      	bics	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4313      	orrs	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2239      	movs	r2, #57	@ 0x39
 80039a0:	2101      	movs	r1, #1
 80039a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2238      	movs	r2, #56	@ 0x38
 80039a8:	2100      	movs	r1, #0
 80039aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	40010800 	.word	0x40010800
 80039bc:	40011400 	.word	0x40011400

080039c0 <memset>:
 80039c0:	0003      	movs	r3, r0
 80039c2:	1882      	adds	r2, r0, r2
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d100      	bne.n	80039ca <memset+0xa>
 80039c8:	4770      	bx	lr
 80039ca:	7019      	strb	r1, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	e7f9      	b.n	80039c4 <memset+0x4>

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	2600      	movs	r6, #0
 80039d4:	4c0c      	ldr	r4, [pc, #48]	@ (8003a08 <__libc_init_array+0x38>)
 80039d6:	4d0d      	ldr	r5, [pc, #52]	@ (8003a0c <__libc_init_array+0x3c>)
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	2600      	movs	r6, #0
 80039e2:	f000 f819 	bl	8003a18 <_init>
 80039e6:	4c0a      	ldr	r4, [pc, #40]	@ (8003a10 <__libc_init_array+0x40>)
 80039e8:	4d0a      	ldr	r5, [pc, #40]	@ (8003a14 <__libc_init_array+0x44>)
 80039ea:	1b64      	subs	r4, r4, r5
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	00b3      	lsls	r3, r6, #2
 80039f6:	58eb      	ldr	r3, [r5, r3]
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	00b3      	lsls	r3, r6, #2
 8003a00:	58eb      	ldr	r3, [r5, r3]
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	08003a60 	.word	0x08003a60
 8003a0c:	08003a60 	.word	0x08003a60
 8003a10:	08003a64 	.word	0x08003a64
 8003a14:	08003a60 	.word	0x08003a60

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
