
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000474c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800480c  0800480c  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004834  08004834  00005834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800483c  0800483c  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004844  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000014  08004858  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08004858  00006500  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d570  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251a  00000000  00000000  000135ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00015ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b74  00000000  00000000  000169a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013390  00000000  00000000  0001751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dce  00000000  00000000  0002a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075552  00000000  00000000  0003c67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003574  00000000  00000000  000b1c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b5184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047f4 	.word	0x080047f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080047f4 	.word	0x080047f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <clear_LEDs>:
 *      Author: vakhaib
 */

#include "Din_LED.h"

void clear_LEDs(LEDs* leds, uint16_t num_LEDs) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	000a      	movs	r2, r1
 8000686:	1cbb      	adds	r3, r7, #2
 8000688:	801a      	strh	r2, [r3, #0]

	for (int i = 0; i < num_LEDs; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e066      	b.n	800075e <clear_LEDs+0xe2>
		for (int j = 0; j < 8; j++) {
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	e05d      	b.n	8000752 <clear_LEDs+0xd6>
			(leds + i) ->r[j] = T0H;
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	0013      	movs	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	189b      	adds	r3, r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	001a      	movs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	3208      	adds	r2, #8
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	210f      	movs	r1, #15
 80006ae:	52d1      	strh	r1, [r2, r3]
			(leds + i) ->g[j] = T0H;
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	0013      	movs	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	189b      	adds	r3, r3, r2
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	001a      	movs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	210f      	movs	r1, #15
 80006c6:	52d1      	strh	r1, [r2, r3]
			(leds + i) ->b[j] = T0H;
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	0013      	movs	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	001a      	movs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	3210      	adds	r2, #16
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	210f      	movs	r1, #15
 80006e0:	52d1      	strh	r1, [r2, r3]
			if (i >= 0 && i <= 2) {
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db31      	blt.n	800074c <clear_LEDs+0xd0>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	dc2e      	bgt.n	800074c <clear_LEDs+0xd0>
				(leds + num_LEDs + i) ->r[j] = 0;
 80006ee:	1cbb      	adds	r3, r7, #2
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	18d2      	adds	r2, r2, r3
 80006f6:	0013      	movs	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	189b      	adds	r3, r3, r2
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	001a      	movs	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	189b      	adds	r3, r3, r2
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	3208      	adds	r2, #8
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	2100      	movs	r1, #0
 800070c:	52d1      	strh	r1, [r2, r3]
				(leds + num_LEDs + i) ->g[j] = 0;
 800070e:	1cbb      	adds	r3, r7, #2
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	18d2      	adds	r2, r2, r3
 8000716:	0013      	movs	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	189b      	adds	r3, r3, r2
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	001a      	movs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	189b      	adds	r3, r3, r2
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	2100      	movs	r1, #0
 800072a:	52d1      	strh	r1, [r2, r3]
				(leds + num_LEDs + i) ->b[j] = 0;
 800072c:	1cbb      	adds	r3, r7, #2
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	18d2      	adds	r2, r2, r3
 8000734:	0013      	movs	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	189b      	adds	r3, r3, r2
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	001a      	movs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	189b      	adds	r3, r3, r2
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	3210      	adds	r2, #16
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	2100      	movs	r1, #0
 800074a:	52d1      	strh	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3301      	adds	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2b07      	cmp	r3, #7
 8000756:	dd9e      	ble.n	8000696 <clear_LEDs+0x1a>
	for (int i = 0; i < num_LEDs; i++) {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	1cbb      	adds	r3, r7, #2
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	db93      	blt.n	8000690 <clear_LEDs+0x14>
	leds -> pause[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0};
	*/
	//memset(leds -> pause, 0x00, 35);
}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b004      	add	sp, #16
 8000770:	bd80      	pop	{r7, pc}

08000772 <turn_spec_LEDs>:
			}
		}
	}
}

void turn_spec_LEDs(LEDs* leds, rgb_color* colors) {
 8000772:	b580      	push	{r7, lr}
 8000774:	b088      	sub	sp, #32
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 12; i++) {
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	e0bf      	b.n	8000902 <turn_spec_LEDs+0x190>
		int r = decToBinary(colors[i].r);
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	0018      	movs	r0, r3
 800078e:	f000 f8c1 	bl	8000914 <decToBinary>
 8000792:	0003      	movs	r3, r0
 8000794:	61bb      	str	r3, [r7, #24]
		int g = decToBinary(colors[i].g);
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f8b7 	bl	8000914 <decToBinary>
 80007a6:	0003      	movs	r3, r0
 80007a8:	617b      	str	r3, [r7, #20]
		int b = decToBinary(colors[i].b);
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	18d3      	adds	r3, r2, r3
 80007b2:	789b      	ldrb	r3, [r3, #2]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 f8ad 	bl	8000914 <decToBinary>
 80007ba:	0003      	movs	r3, r0
 80007bc:	613b      	str	r3, [r7, #16]
		int a = decToBinary(colors[i].a);
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 f8a3 	bl	8000914 <decToBinary>
 80007ce:	0003      	movs	r3, r0
 80007d0:	60bb      	str	r3, [r7, #8]
		for (int j = 0; j < 8; j++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e08d      	b.n	80008f4 <turn_spec_LEDs+0x182>
			(leds + i) -> r[j] = (r%10==0) ? T0H : T1H;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	210a      	movs	r1, #10
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff fe03 	bl	80003e8 <__aeabi_idivmod>
 80007e2:	1e0b      	subs	r3, r1, #0
 80007e4:	d101      	bne.n	80007ea <turn_spec_LEDs+0x78>
 80007e6:	210f      	movs	r1, #15
 80007e8:	e000      	b.n	80007ec <turn_spec_LEDs+0x7a>
 80007ea:	211e      	movs	r1, #30
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	0013      	movs	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	001a      	movs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	3208      	adds	r2, #8
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	52d1      	strh	r1, [r2, r3]
			(leds + i) -> g[j] = (g%10==0) ? T0H : T1H;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	210a      	movs	r1, #10
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fded 	bl	80003e8 <__aeabi_idivmod>
 800080e:	1e0b      	subs	r3, r1, #0
 8000810:	d101      	bne.n	8000816 <turn_spec_LEDs+0xa4>
 8000812:	210f      	movs	r1, #15
 8000814:	e000      	b.n	8000818 <turn_spec_LEDs+0xa6>
 8000816:	211e      	movs	r1, #30
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	0013      	movs	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	189b      	adds	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	001a      	movs	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	189b      	adds	r3, r3, r2
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	52d1      	strh	r1, [r2, r3]
			(leds + i) -> b[j] = (b%10==0) ? T0H : T1H;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	210a      	movs	r1, #10
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fdd8 	bl	80003e8 <__aeabi_idivmod>
 8000838:	1e0b      	subs	r3, r1, #0
 800083a:	d101      	bne.n	8000840 <turn_spec_LEDs+0xce>
 800083c:	210f      	movs	r1, #15
 800083e:	e000      	b.n	8000842 <turn_spec_LEDs+0xd0>
 8000840:	211e      	movs	r1, #30
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	0013      	movs	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	189b      	adds	r3, r3, r2
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	001a      	movs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	189b      	adds	r3, r3, r2
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	3210      	adds	r2, #16
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	52d1      	strh	r1, [r2, r3]
			r = r/10;
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	210a      	movs	r1, #10
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fcdc 	bl	800021c <__divsi3>
 8000864:	0003      	movs	r3, r0
 8000866:	61bb      	str	r3, [r7, #24]
			g = g/10;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	210a      	movs	r1, #10
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff fcd5 	bl	800021c <__divsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	617b      	str	r3, [r7, #20]
			b = b/10;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	210a      	movs	r1, #10
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff fcce 	bl	800021c <__divsi3>
 8000880:	0003      	movs	r3, r0
 8000882:	613b      	str	r3, [r7, #16]
			if (i >= 0 && i <= 2) {
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db31      	blt.n	80008ee <turn_spec_LEDs+0x17c>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	2b02      	cmp	r3, #2
 800088e:	dc2e      	bgt.n	80008ee <turn_spec_LEDs+0x17c>
				(leds + 12 + i) ->r[j] = 0;
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	0013      	movs	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	189b      	adds	r3, r3, r2
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	2290      	movs	r2, #144	@ 0x90
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	4694      	mov	ip, r2
 80008a0:	4463      	add	r3, ip
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	3208      	adds	r2, #8
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	2100      	movs	r1, #0
 80008ae:	52d1      	strh	r1, [r2, r3]
				(leds + 12 + i) ->g[j] = 0;
 80008b0:	69fa      	ldr	r2, [r7, #28]
 80008b2:	0013      	movs	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	189b      	adds	r3, r3, r2
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	2290      	movs	r2, #144	@ 0x90
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	4694      	mov	ip, r2
 80008c0:	4463      	add	r3, ip
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	2100      	movs	r1, #0
 80008cc:	52d1      	strh	r1, [r2, r3]
				(leds + 12 + i) ->b[j] = 0;
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	0013      	movs	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	189b      	adds	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	2290      	movs	r2, #144	@ 0x90
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	4694      	mov	ip, r2
 80008de:	4463      	add	r3, ip
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	3210      	adds	r2, #16
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	2100      	movs	r1, #0
 80008ec:	52d1      	strh	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	dc00      	bgt.n	80008fc <turn_spec_LEDs+0x18a>
 80008fa:	e76d      	b.n	80007d8 <turn_spec_LEDs+0x66>
	for (int i = 0; i < 12; i++) {
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3301      	adds	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b0b      	cmp	r3, #11
 8000906:	dc00      	bgt.n	800090a <turn_spec_LEDs+0x198>
 8000908:	e73b      	b.n	8000782 <turn_spec_LEDs+0x10>
			}
		}

	}
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b008      	add	sp, #32
 8000912:	bd80      	pop	{r7, pc}

08000914 <decToBinary>:
			}
		}
	}
}

static int decToBinary(int n) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	4c30      	ldr	r4, [pc, #192]	@ (80009d8 <decToBinary+0xc4>)
 8000918:	44a5      	add	sp, r4
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	// array to store binary number
	int result = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	4a2e      	ldr	r2, [pc, #184]	@ (80009dc <decToBinary+0xc8>)
 8000922:	18ba      	adds	r2, r7, r2
 8000924:	6013      	str	r3, [r2, #0]
	int binaryNum[1000];

	// counter for binary array
	int i = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	22fb      	movs	r2, #251	@ 0xfb
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	6013      	str	r3, [r2, #0]
	while (n > 0) {
 8000930:	e020      	b.n	8000974 <decToBinary+0x60>

		// storing remainder in binary array
		binaryNum[i] = n % 2;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a2a      	ldr	r2, [pc, #168]	@ (80009e0 <decToBinary+0xcc>)
 8000936:	4013      	ands	r3, r2
 8000938:	d504      	bpl.n	8000944 <decToBinary+0x30>
 800093a:	3b01      	subs	r3, #1
 800093c:	2202      	movs	r2, #2
 800093e:	4252      	negs	r2, r2
 8000940:	4313      	orrs	r3, r2
 8000942:	3301      	adds	r3, #1
 8000944:	0019      	movs	r1, r3
 8000946:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <decToBinary+0xd0>)
 8000948:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <decToBinary+0xd4>)
 800094a:	189b      	adds	r3, r3, r2
 800094c:	19db      	adds	r3, r3, r7
 800094e:	22fb      	movs	r2, #251	@ 0xfb
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	18ba      	adds	r2, r7, r2
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	50d1      	str	r1, [r2, r3]
		n = n / 2;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da00      	bge.n	8000962 <decToBinary+0x4e>
 8000960:	3301      	adds	r3, #1
 8000962:	105b      	asrs	r3, r3, #1
 8000964:	607b      	str	r3, [r7, #4]
		i++;
 8000966:	22fb      	movs	r2, #251	@ 0xfb
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	18bb      	adds	r3, r7, r2
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	6013      	str	r3, [r2, #0]
	while (n > 0) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	dcdb      	bgt.n	8000932 <decToBinary+0x1e>
	}

	// printing binary array in reverse order
	for (int j = i - 1; j >= 0; j--)
 800097a:	23fb      	movs	r3, #251	@ 0xfb
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <decToBinary+0xd8>)
 8000986:	18ba      	adds	r2, r7, r2
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e018      	b.n	80009be <decToBinary+0xaa>
		result = result*10 + binaryNum[j];
 800098c:	4c13      	ldr	r4, [pc, #76]	@ (80009dc <decToBinary+0xc8>)
 800098e:	193b      	adds	r3, r7, r4
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	0013      	movs	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	189b      	adds	r3, r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	0019      	movs	r1, r3
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <decToBinary+0xd0>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <decToBinary+0xd4>)
 80009a0:	189b      	adds	r3, r3, r2
 80009a2:	19db      	adds	r3, r3, r7
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <decToBinary+0xd8>)
 80009a6:	183a      	adds	r2, r7, r0
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	58d3      	ldr	r3, [r2, r3]
 80009ae:	18cb      	adds	r3, r1, r3
 80009b0:	193a      	adds	r2, r7, r4
 80009b2:	6013      	str	r3, [r2, #0]
	for (int j = i - 1; j >= 0; j--)
 80009b4:	183b      	adds	r3, r7, r0
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	183a      	adds	r2, r7, r0
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <decToBinary+0xd8>)
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dae1      	bge.n	800098c <decToBinary+0x78>
	return result;
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <decToBinary+0xc8>)
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	681b      	ldr	r3, [r3, #0]
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <decToBinary+0xdc>)
 80009d4:	449d      	add	sp, r3
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	fffff044 	.word	0xfffff044
 80009dc:	00000fb4 	.word	0x00000fb4
 80009e0:	80000001 	.word	0x80000001
 80009e4:	fffff054 	.word	0xfffff054
 80009e8:	00000fb8 	.word	0x00000fb8
 80009ec:	00000fac 	.word	0x00000fac
 80009f0:	00000fbc 	.word	0x00000fbc

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rgb_color hour_color = {250, 0, 0, 4};
 80009fa:	2314      	movs	r3, #20
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	4acb      	ldr	r2, [pc, #812]	@ (8000d2c <main+0x338>)
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	601a      	str	r2, [r3, #0]
	rgb_color minut_color = {0, 0, 250, 4};
 8000a04:	2310      	movs	r3, #16
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	4ac9      	ldr	r2, [pc, #804]	@ (8000d30 <main+0x33c>)
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	601a      	str	r2, [r3, #0]
	rgb_color red = {250, 0, 0, 4};
 8000a0e:	230c      	movs	r3, #12
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	4ac6      	ldr	r2, [pc, #792]	@ (8000d2c <main+0x338>)
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	601a      	str	r2, [r3, #0]
	rgb_color blue = {0, 0, 250, 4};
 8000a18:	2308      	movs	r3, #8
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	4ac4      	ldr	r2, [pc, #784]	@ (8000d30 <main+0x33c>)
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	601a      	str	r2, [r3, #0]
	rgb_color green = {0, 250, 0, 4};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4ac3      	ldr	r2, [pc, #780]	@ (8000d34 <main+0x340>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fec7 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f99b 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fb7f 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 fb5f 	bl	80010f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000a3a:	f000 faa7 	bl	8000f8c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a3e:	f000 fadd 	bl	8000ffc <MX_TIM2_Init>
  MX_ADC_Init();
 8000a42:	f000 fa13 	bl	8000e6c <MX_ADC_Init>
  MX_RTC_Init();
 8000a46:	f000 fa77 	bl	8000f38 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < 12; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a4e:	e039      	b.n	8000ac4 <main+0xd0>
	  led_pattern[i] = none;
 8000a50:	4ab9      	ldr	r2, [pc, #740]	@ (8000d38 <main+0x344>)
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	0099      	lsls	r1, r3, #2
 8000a56:	4bb9      	ldr	r3, [pc, #740]	@ (8000d3c <main+0x348>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	508b      	str	r3, [r1, r2]
	  time_pattern[i] = none;
 8000a5c:	4ab8      	ldr	r2, [pc, #736]	@ (8000d40 <main+0x34c>)
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	0099      	lsls	r1, r3, #2
 8000a62:	4bb6      	ldr	r3, [pc, #728]	@ (8000d3c <main+0x348>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	508b      	str	r3, [r1, r2]
	  null_pattern[i] = none;
 8000a68:	4ab6      	ldr	r2, [pc, #728]	@ (8000d44 <main+0x350>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	0099      	lsls	r1, r3, #2
 8000a6e:	4bb3      	ldr	r3, [pc, #716]	@ (8000d3c <main+0x348>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	508b      	str	r3, [r1, r2]
	  if (i%3==0) {
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	2103      	movs	r1, #3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fcb5 	bl	80003e8 <__aeabi_idivmod>
 8000a7e:	1e0b      	subs	r3, r1, #0
 8000a80:	d107      	bne.n	8000a92 <main+0x9e>
		  led_pattern[i] = blue;
 8000a82:	4aad      	ldr	r2, [pc, #692]	@ (8000d38 <main+0x344>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a86:	0099      	lsls	r1, r3, #2
 8000a88:	2308      	movs	r3, #8
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	508b      	str	r3, [r1, r2]
 8000a90:	e015      	b.n	8000abe <main+0xca>
	  } else if (i%3==1) {
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	2103      	movs	r1, #3
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fca6 	bl	80003e8 <__aeabi_idivmod>
 8000a9c:	000b      	movs	r3, r1
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d106      	bne.n	8000ab0 <main+0xbc>
		  led_pattern[i] = green;
 8000aa2:	4aa5      	ldr	r2, [pc, #660]	@ (8000d38 <main+0x344>)
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	0099      	lsls	r1, r3, #2
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	508b      	str	r3, [r1, r2]
 8000aae:	e006      	b.n	8000abe <main+0xca>
	  } else {
		  led_pattern[i] = red;
 8000ab0:	4aa1      	ldr	r2, [pc, #644]	@ (8000d38 <main+0x344>)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	0099      	lsls	r1, r3, #2
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	508b      	str	r3, [r1, r2]
  for (int i = 0; i < 12; i++) {
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	2b0b      	cmp	r3, #11
 8000ac8:	ddc2      	ble.n	8000a50 <main+0x5c>
	  }
  }
  time_pattern[shifted_hours] = hour_color;
 8000aca:	4b9f      	ldr	r3, [pc, #636]	@ (8000d48 <main+0x354>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	4a9c      	ldr	r2, [pc, #624]	@ (8000d40 <main+0x34c>)
 8000ad0:	0099      	lsls	r1, r3, #2
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	508b      	str	r3, [r1, r2]
  time_pattern[shifted_minutes] = minut_color;
 8000ada:	4b9c      	ldr	r3, [pc, #624]	@ (8000d4c <main+0x358>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4a98      	ldr	r2, [pc, #608]	@ (8000d40 <main+0x34c>)
 8000ae0:	0099      	lsls	r1, r3, #2
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	508b      	str	r3, [r1, r2]
	 /* HAL_SuspendTick();
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  HAL_ResumeTick();
*/

	  if (showingLeds) {
 8000aea:	4b99      	ldr	r3, [pc, #612]	@ (8000d50 <main+0x35c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d100      	bne.n	8000af4 <main+0x100>
 8000af2:	e10e      	b.n	8000d12 <main+0x31e>
		  int x = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
		  bool shouldExitIf = false;
 8000af8:	231f      	movs	r3, #31
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

		  while (HAL_GPIO_ReadPin(Button_R_GPIO_Port, Button_R_Pin)) {
 8000b00:	e010      	b.n	8000b24 <main+0x130>
			  x++;
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	3301      	adds	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
			  if (x >= 200) {
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b0c:	dd07      	ble.n	8000b1e <main+0x12a>
				  changeTime = true;
 8000b0e:	4b91      	ldr	r3, [pc, #580]	@ (8000d54 <main+0x360>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
				  shouldExitIf = true;
 8000b14:	231f      	movs	r3, #31
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
				  break;
 8000b1c:	e00c      	b.n	8000b38 <main+0x144>
			  }
			  HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f000 febc 	bl	800189c <HAL_Delay>
		  while (HAL_GPIO_ReadPin(Button_R_GPIO_Port, Button_R_Pin)) {
 8000b24:	2380      	movs	r3, #128	@ 0x80
 8000b26:	00da      	lsls	r2, r3, #3
 8000b28:	23a0      	movs	r3, #160	@ 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fd14 	bl	800255c <HAL_GPIO_ReadPin>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d1e4      	bne.n	8000b02 <main+0x10e>
		  }
		  if (!shouldExitIf) {
 8000b38:	231f      	movs	r3, #31
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4053      	eors	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d100      	bne.n	8000b4a <main+0x156>
 8000b48:	e0e3      	b.n	8000d12 <main+0x31e>
			  if (shifted_hours==shifted_minutes) {
 8000b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d48 <main+0x354>)
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d4c <main+0x358>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d150      	bne.n	8000bf8 <main+0x204>
				  for (int i = 0; i < 5; i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	e049      	b.n	8000bf0 <main+0x1fc>
					  if (toggler) {
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d58 <main+0x364>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <main+0x182>
						  time_pattern[shifted_hours] = hour_color;
 8000b64:	4b78      	ldr	r3, [pc, #480]	@ (8000d48 <main+0x354>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	4a75      	ldr	r2, [pc, #468]	@ (8000d40 <main+0x34c>)
 8000b6a:	0099      	lsls	r1, r3, #2
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	508b      	str	r3, [r1, r2]
 8000b74:	e007      	b.n	8000b86 <main+0x192>
					  } else {
						  time_pattern[shifted_minutes] = minut_color;
 8000b76:	4b75      	ldr	r3, [pc, #468]	@ (8000d4c <main+0x358>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	4a71      	ldr	r2, [pc, #452]	@ (8000d40 <main+0x34c>)
 8000b7c:	0099      	lsls	r1, r3, #2
 8000b7e:	2310      	movs	r3, #16
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	508b      	str	r3, [r1, r2]
					  }
					  toggler = !toggler;
 8000b86:	4b74      	ldr	r3, [pc, #464]	@ (8000d58 <main+0x364>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	4193      	sbcs	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2201      	movs	r2, #1
 8000b92:	4053      	eors	r3, r2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	1c1a      	adds	r2, r3, #0
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d58 <main+0x364>)
 8000ba0:	701a      	strb	r2, [r3, #0]
					  turn_spec_LEDs(leds, time_pattern);
 8000ba2:	4a67      	ldr	r2, [pc, #412]	@ (8000d40 <main+0x34c>)
 8000ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8000d5c <main+0x368>)
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fde2 	bl	8000772 <turn_spec_LEDs>
					  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000bae:	23b4      	movs	r3, #180	@ 0xb4
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4a6a      	ldr	r2, [pc, #424]	@ (8000d5c <main+0x368>)
 8000bb4:	486a      	ldr	r0, [pc, #424]	@ (8000d60 <main+0x36c>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f002 ff72 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
					  HAL_Delay(500);
 8000bbc:	23fa      	movs	r3, #250	@ 0xfa
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 fe6b 	bl	800189c <HAL_Delay>
					  turn_spec_LEDs(leds, null_pattern);
 8000bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000d44 <main+0x350>)
 8000bc8:	4b64      	ldr	r3, [pc, #400]	@ (8000d5c <main+0x368>)
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fdd0 	bl	8000772 <turn_spec_LEDs>
					  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000bd2:	23b4      	movs	r3, #180	@ 0xb4
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4a61      	ldr	r2, [pc, #388]	@ (8000d5c <main+0x368>)
 8000bd8:	4861      	ldr	r0, [pc, #388]	@ (8000d60 <main+0x36c>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f002 ff60 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
					  HAL_Delay(500);
 8000be0:	23fa      	movs	r3, #250	@ 0xfa
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fe59 	bl	800189c <HAL_Delay>
				  for (int i = 0; i < 5; i++) {
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	3301      	adds	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	ddb2      	ble.n	8000b5c <main+0x168>
 8000bf6:	e02d      	b.n	8000c54 <main+0x260>
				  }
			  } else {
				  time_pattern[shifted_hours] = hour_color;
 8000bf8:	4b53      	ldr	r3, [pc, #332]	@ (8000d48 <main+0x354>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <main+0x34c>)
 8000bfe:	0099      	lsls	r1, r3, #2
 8000c00:	2314      	movs	r3, #20
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	508b      	str	r3, [r1, r2]
				  time_pattern[shifted_minutes] = minut_color;
 8000c08:	4b50      	ldr	r3, [pc, #320]	@ (8000d4c <main+0x358>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d40 <main+0x34c>)
 8000c0e:	0099      	lsls	r1, r3, #2
 8000c10:	2310      	movs	r3, #16
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	508b      	str	r3, [r1, r2]
				  turn_spec_LEDs(leds, time_pattern);
 8000c18:	4a49      	ldr	r2, [pc, #292]	@ (8000d40 <main+0x34c>)
 8000c1a:	4b50      	ldr	r3, [pc, #320]	@ (8000d5c <main+0x368>)
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff fda7 	bl	8000772 <turn_spec_LEDs>
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000c24:	23b4      	movs	r3, #180	@ 0xb4
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4a4c      	ldr	r2, [pc, #304]	@ (8000d5c <main+0x368>)
 8000c2a:	484d      	ldr	r0, [pc, #308]	@ (8000d60 <main+0x36c>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f002 ff37 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
				  HAL_Delay(5000);
 8000c32:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <main+0x370>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fe31 	bl	800189c <HAL_Delay>
				  turn_spec_LEDs(leds, null_pattern);
 8000c3a:	4a42      	ldr	r2, [pc, #264]	@ (8000d44 <main+0x350>)
 8000c3c:	4b47      	ldr	r3, [pc, #284]	@ (8000d5c <main+0x368>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fd96 	bl	8000772 <turn_spec_LEDs>
				  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000c46:	23b4      	movs	r3, #180	@ 0xb4
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4a44      	ldr	r2, [pc, #272]	@ (8000d5c <main+0x368>)
 8000c4c:	4844      	ldr	r0, [pc, #272]	@ (8000d60 <main+0x36c>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f002 ff26 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
			  }
		  	  showingLeds = false;
 8000c54:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <main+0x35c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  while(changeTime) {
 8000c5a:	e05a      	b.n	8000d12 <main+0x31e>
		  time_pattern[shifted_hours] = hour_color;
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <main+0x354>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	4a37      	ldr	r2, [pc, #220]	@ (8000d40 <main+0x34c>)
 8000c62:	0099      	lsls	r1, r3, #2
 8000c64:	2014      	movs	r0, #20
 8000c66:	183b      	adds	r3, r7, r0
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	508b      	str	r3, [r1, r2]
		  time_pattern[shifted_minutes] = minut_color;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <main+0x358>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	4a33      	ldr	r2, [pc, #204]	@ (8000d40 <main+0x34c>)
 8000c72:	0099      	lsls	r1, r3, #2
 8000c74:	2310      	movs	r3, #16
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	508b      	str	r3, [r1, r2]
		  if (shifted_hours==shifted_minutes) {
 8000c7c:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <main+0x354>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <main+0x358>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d121      	bne.n	8000ccc <main+0x2d8>
			  if (toggler) {
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <main+0x364>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d007      	beq.n	8000ca0 <main+0x2ac>
				  time_pattern[shifted_hours] = hour_color;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <main+0x354>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <main+0x34c>)
 8000c96:	0099      	lsls	r1, r3, #2
 8000c98:	183b      	adds	r3, r7, r0
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	508b      	str	r3, [r1, r2]
 8000c9e:	e007      	b.n	8000cb0 <main+0x2bc>
			  } else {
				  time_pattern[shifted_minutes] = minut_color;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <main+0x358>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	@ (8000d40 <main+0x34c>)
 8000ca6:	0099      	lsls	r1, r3, #2
 8000ca8:	2310      	movs	r3, #16
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	508b      	str	r3, [r1, r2]
			  }
			  toggler = !toggler;
 8000cb0:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <main+0x364>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	4193      	sbcs	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	1c1a      	adds	r2, r3, #0
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <main+0x364>)
 8000cca:	701a      	strb	r2, [r3, #0]
		  }
		  turn_spec_LEDs(leds, time_pattern);
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <main+0x34c>)
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <main+0x368>)
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fd4d 	bl	8000772 <turn_spec_LEDs>
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000cd8:	23b4      	movs	r3, #180	@ 0xb4
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <main+0x368>)
 8000cde:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <main+0x36c>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f002 fedd 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(500);
 8000ce6:	23fa      	movs	r3, #250	@ 0xfa
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fdd6 	bl	800189c <HAL_Delay>
		  clear_LEDs(leds, MAX_LED);
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <main+0x368>)
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fcc1 	bl	800067c <clear_LEDs>
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds, (MAX_LED * 24) + 72);
 8000cfa:	23b4      	movs	r3, #180	@ 0xb4
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <main+0x368>)
 8000d00:	4817      	ldr	r0, [pc, #92]	@ (8000d60 <main+0x36c>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	f002 fecc 	bl	8003aa0 <HAL_TIM_PWM_Start_DMA>
		  HAL_Delay(500);
 8000d08:	23fa      	movs	r3, #250	@ 0xfa
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fdc5 	bl	800189c <HAL_Delay>
	  while(changeTime) {
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <main+0x360>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1a0      	bne.n	8000c5c <main+0x268>

	  }
	  // Enter Stop Mode
	  HAL_SuspendTick();
 8000d1a:	f000 fde3 	bl	80018e4 <HAL_SuspendTick>

	  HAL_PWR_EnableSleepOnExit();
 8000d1e:	f001 fcc1 	bl	80026a4 <HAL_PWR_EnableSleepOnExit>

	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000d22:	2101      	movs	r1, #1
 8000d24:	2001      	movs	r0, #1
 8000d26:	f001 fc61 	bl	80025ec <HAL_PWR_EnterSTOPMode>
	  if (showingLeds) {
 8000d2a:	e6de      	b.n	8000aea <main+0xf6>
 8000d2c:	0800480c 	.word	0x0800480c
 8000d30:	08004810 	.word	0x08004810
 8000d34:	08004814 	.word	0x08004814
 8000d38:	20000460 	.word	0x20000460
 8000d3c:	200004f0 	.word	0x200004f0
 8000d40:	20000490 	.word	0x20000490
 8000d44:	200004c0 	.word	0x200004c0
 8000d48:	200004f4 	.word	0x200004f4
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	200004f6 	.word	0x200004f6
 8000d54:	200004f7 	.word	0x200004f7
 8000d58:	200004f8 	.word	0x200004f8
 8000d5c:	20000190 	.word	0x20000190
 8000d60:	20000108 	.word	0x20000108
 8000d64:	00001388 	.word	0x00001388

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b099      	sub	sp, #100	@ 0x64
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	242c      	movs	r4, #44	@ 0x2c
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	0018      	movs	r0, r3
 8000d74:	2334      	movs	r3, #52	@ 0x34
 8000d76:	001a      	movs	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f003 fd0f 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7e:	2318      	movs	r3, #24
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	0018      	movs	r0, r3
 8000d84:	2314      	movs	r3, #20
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f003 fd07 	bl	800479c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8e:	003b      	movs	r3, r7
 8000d90:	0018      	movs	r0, r3
 8000d92:	2318      	movs	r3, #24
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f003 fd00 	bl	800479c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <SystemClock_Config+0xf8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a30      	ldr	r2, [pc, #192]	@ (8000e64 <SystemClock_Config+0xfc>)
 8000da2:	401a      	ands	r2, r3
 8000da4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <SystemClock_Config+0xf8>)
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	0109      	lsls	r1, r1, #4
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dae:	f001 fc0f 	bl	80025d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000db2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <SystemClock_Config+0x100>)
 8000db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000db6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <SystemClock_Config+0x100>)
 8000db8:	492a      	ldr	r1, [pc, #168]	@ (8000e64 <SystemClock_Config+0xfc>)
 8000dba:	400a      	ands	r2, r1
 8000dbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2206      	movs	r2, #6
 8000dc2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2280      	movs	r2, #128	@ 0x80
 8000dc8:	0052      	lsls	r2, r2, #1
 8000dca:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	0021      	movs	r1, r4
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	02d2      	lsls	r2, r2, #11
 8000dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	03d2      	lsls	r2, r2, #15
 8000df4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 fc6f 	bl	80026dc <HAL_RCC_OscConfig>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e02:	f000 fb1d 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	2118      	movs	r1, #24
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2203      	movs	r2, #3
 8000e12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f001 ffd2 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e34:	f000 fb04 	bl	8001440 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e38:	003b      	movs	r3, r7
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2280      	movs	r2, #128	@ 0x80
 8000e42:	0252      	lsls	r2, r2, #9
 8000e44:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	003b      	movs	r3, r7
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 f9b1 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e52:	f000 faf5 	bl	8001440 <Error_Handler>
  }
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b019      	add	sp, #100	@ 0x64
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	40007000 	.word	0x40007000
 8000e64:	ffffe7ff 	.word	0xffffe7ff
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	003b      	movs	r3, r7
 8000e74:	0018      	movs	r0, r3
 8000e76:	2308      	movs	r3, #8
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f003 fc8e 	bl	800479c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000e82:	4a2b      	ldr	r2, [pc, #172]	@ (8000f30 <MX_ADC_Init+0xc4>)
 8000e84:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000e86:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e8c:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	05d2      	lsls	r2, r2, #23
 8000e92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e9a:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000eae:	2220      	movs	r2, #32
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000eb6:	2221      	movs	r2, #33	@ 0x21
 8000eb8:	2100      	movs	r1, #0
 8000eba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ec4:	22c2      	movs	r2, #194	@ 0xc2
 8000ec6:	32ff      	adds	r2, #255	@ 0xff
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ecc:	222c      	movs	r2, #44	@ 0x2c
 8000ece:	2100      	movs	r1, #0
 8000ed0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fd12 	bl	800191c <HAL_ADC_Init>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000efc:	f000 faa0 	bl	8001440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f00:	003b      	movs	r3, r7
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <MX_ADC_Init+0xc8>)
 8000f04:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f06:	003b      	movs	r3, r7
 8000f08:	2280      	movs	r2, #128	@ 0x80
 8000f0a:	0152      	lsls	r2, r2, #5
 8000f0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f0e:	003a      	movs	r2, r7
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_ADC_Init+0xc0>)
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 fe75 	bl	8001c04 <HAL_ADC_ConfigChannel>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000f1e:	f000 fa8f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	20000030 	.word	0x20000030
 8000f30:	40012400 	.word	0x40012400
 8000f34:	24000200 	.word	0x24000200

08000f38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <MX_RTC_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f4a:	227f      	movs	r2, #127	@ 0x7f
 8000f4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f50:	22ff      	movs	r2, #255	@ 0xff
 8000f52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <MX_RTC_Init+0x4c>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 fa4a 	bl	8003408 <HAL_RTC_Init>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f78:	f000 fa62 	bl	8001440 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	2000008c 	.word	0x2000008c
 8000f88:	40002800 	.word	0x40002800

08000f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000f92:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <MX_SPI1_Init+0x6c>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000f98:	2282      	movs	r2, #130	@ 0x82
 8000f9a:	0052      	lsls	r2, r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	02d2      	lsls	r2, r2, #11
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f002 fc4c 	bl	800387c <HAL_SPI_Init>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fa2a 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	200000b0 	.word	0x200000b0
 8000ff8:	40013000 	.word	0x40013000

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	2318      	movs	r3, #24
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	0018      	movs	r0, r3
 8001008:	2310      	movs	r3, #16
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f003 fbc5 	bl	800479c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	2310      	movs	r3, #16
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	0018      	movs	r0, r3
 8001018:	2308      	movs	r3, #8
 800101a:	001a      	movs	r2, r3
 800101c:	2100      	movs	r1, #0
 800101e:	f003 fbbd 	bl	800479c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	003b      	movs	r3, r7
 8001024:	0018      	movs	r0, r3
 8001026:	2310      	movs	r3, #16
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f003 fbb6 	bl	800479c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	05d2      	lsls	r2, r2, #23
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40;
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001046:	2228      	movs	r2, #40	@ 0x28
 8001048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001056:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001058:	0018      	movs	r0, r3
 800105a:	f002 fc98 	bl	800398e <HAL_TIM_Base_Init>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 f9ed 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	2118      	movs	r1, #24
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	0152      	lsls	r2, r2, #5
 800106e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	187a      	adds	r2, r7, r1
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f002 ff62 	bl	8003f40 <HAL_TIM_ConfigClockSource>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001080:	f000 f9de 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 8001086:	0018      	movs	r0, r3
 8001088:	f002 fcc1 	bl	8003a0e <HAL_TIM_PWM_Init>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001090:	f000 f9d6 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2110      	movs	r1, #16
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a2:	187a      	adds	r2, r7, r1
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f003 fb1f 	bl	80046ec <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80010b2:	f000 f9c5 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	003b      	movs	r3, r7
 80010b8:	2260      	movs	r2, #96	@ 0x60
 80010ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010bc:	003b      	movs	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	003b      	movs	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c8:	003b      	movs	r3, r7
 80010ca:	2204      	movs	r2, #4
 80010cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ce:	0039      	movs	r1, r7
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	0018      	movs	r0, r3
 80010d6:	f002 fe6d 	bl	8003db4 <HAL_TIM_PWM_ConfigChannel>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80010de:	f000 f9af 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <MX_TIM2_Init+0xf8>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 faad 	bl	8001644 <HAL_TIM_MspPostInit>

}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b00a      	add	sp, #40	@ 0x28
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000108 	.word	0x20000108

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_DMA_Init+0x38>)
 8001100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_DMA_Init+0x38>)
 8001104:	2101      	movs	r1, #1
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	@ 0x30
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_DMA_Init+0x38>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2102      	movs	r1, #2
 800111a:	200b      	movs	r0, #11
 800111c:	f000 fec4 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001120:	200b      	movs	r0, #11
 8001122:	f000 fed6 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	40021000 	.word	0x40021000

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	240c      	movs	r4, #12
 800113c:	193b      	adds	r3, r7, r4
 800113e:	0018      	movs	r0, r3
 8001140:	2314      	movs	r3, #20
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f003 fb29 	bl	800479c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <MX_GPIO_Init+0xdc>)
 800114c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001150:	2104      	movs	r1, #4
 8001152:	430a      	orrs	r2, r1
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001156:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115a:	2204      	movs	r2, #4
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800116e:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	2201      	movs	r2, #1
 8001174:	4013      	ands	r3, r2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <MX_GPIO_Init+0xdc>)
 800117c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001180:	2102      	movs	r1, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001186:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_GPIO_Init+0xdc>)
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Button_LT_Pin Button_LB_Pin SPI1_IRQ_Pin Button_R_Pin */
  GPIO_InitStruct.Pin = Button_LT_Pin|Button_LB_Pin|SPI1_IRQ_Pin|Button_R_Pin;
 8001192:	193b      	adds	r3, r7, r4
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <MX_GPIO_Init+0xe0>)
 8001196:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	2288      	movs	r2, #136	@ 0x88
 800119c:	0352      	lsls	r2, r2, #13
 800119e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	193a      	adds	r2, r7, r4
 80011a8:	23a0      	movs	r3, #160	@ 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 f866 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHRG_Pin DONE_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin|DONE_Pin;
 80011b4:	0021      	movs	r1, r4
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	22c0      	movs	r2, #192	@ 0xc0
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	187a      	adds	r2, r7, r1
 80011cc:	23a0      	movs	r3, #160	@ 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 f854 	bl	8002280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fe63 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011e2:	2005      	movs	r0, #5
 80011e4:	f000 fe75 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2006      	movs	r0, #6
 80011ee:	f000 fe5b 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80011f2:	2006      	movs	r0, #6
 80011f4:	f000 fe6d 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2007      	movs	r0, #7
 80011fe:	f000 fe53 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001202:	2007      	movs	r0, #7
 8001204:	f000 fe65 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b009      	add	sp, #36	@ 0x24
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	0000040b 	.word	0x0000040b

08001218 <HAL_GPIO_EXTI_Callback>:
    MX_SPI1_Init();
 	MX_TIM2_Init();
 	MX_ADC_Init();
 	MX_RTC_Init();
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	1dbb      	adds	r3, r7, #6
 8001222:	801a      	strh	r2, [r3, #0]
	//SystemClock_Config();
	//HAL_ResumeTick();
	SystemClock_Config();
 8001224:	f7ff fda0 	bl	8000d68 <SystemClock_Config>
	HAL_ResumeTick();
 8001228:	f000 fb6a 	bl	8001900 <HAL_ResumeTick>
	HAL_PWR_DisableSleepOnExit();
 800122c:	f001 fa48 	bl	80026c0 <HAL_PWR_DisableSleepOnExit>
	if (GPIO_Pin == Button_LB_Pin) {
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d132      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0x86>
		showingLeds = true;
 8001238:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x130>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		if (changeTime) {
 800123e:	4b43      	ldr	r3, [pc, #268]	@ (800134c <HAL_GPIO_EXTI_Callback+0x134>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_EXTI_Callback+0x86>
			hours++;
 8001246:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b40      	ldr	r3, [pc, #256]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 8001250:	801a      	strh	r2, [r3, #0]
			if (hours >= 12) {
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b0b      	cmp	r3, #11
 8001258:	d902      	bls.n	8001260 <HAL_GPIO_EXTI_Callback+0x48>
				hours = 0;
 800125a:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 800125c:	2200      	movs	r2, #0
 800125e:	801a      	strh	r2, [r3, #0]
			}
			shifted_hours = (hours<6) ? hours+6 : hours-6;
 8001260:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d804      	bhi.n	8001272 <HAL_GPIO_EXTI_Callback+0x5a>
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	3306      	adds	r3, #6
 800126e:	b29b      	uxth	r3, r3
 8001270:	e003      	b.n	800127a <HAL_GPIO_EXTI_Callback+0x62>
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x138>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	3b06      	subs	r3, #6
 8001278:	b29b      	uxth	r3, r3
 800127a:	4a36      	ldr	r2, [pc, #216]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x13c>)
 800127c:	8013      	strh	r3, [r2, #0]

			time_pattern[shifted_hours-1] = none;
 800127e:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	4a34      	ldr	r2, [pc, #208]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x140>)
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_GPIO_EXTI_Callback+0x144>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	508b      	str	r3, [r1, r2]
			if (shifted_hours == 0) {
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0x86>
				time_pattern[11] = none;
 8001296:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x140>)
 8001298:	4a30      	ldr	r2, [pc, #192]	@ (800135c <HAL_GPIO_EXTI_Callback+0x144>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
    }
    if (GPIO_Pin == Button_LT_Pin) {
 800129e:	1dbb      	adds	r3, r7, #6
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d12d      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0xea>
		showingLeds = true;
 80012a6:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x130>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		if (changeTime) {
 80012ac:	4b27      	ldr	r3, [pc, #156]	@ (800134c <HAL_GPIO_EXTI_Callback+0x134>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d026      	beq.n	8001302 <HAL_GPIO_EXTI_Callback+0xea>
			minutes+=5;
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x148>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	3305      	adds	r3, #5
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x148>)
 80012be:	801a      	strh	r2, [r3, #0]
			if (minutes >= 60) {
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x148>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80012c6:	d902      	bls.n	80012ce <HAL_GPIO_EXTI_Callback+0xb6>
				minutes = 0;
 80012c8:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x148>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	801a      	strh	r2, [r3, #0]
			}
			shifted_minutes = minutes/5;
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x148>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2105      	movs	r1, #5
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7fe ff17 	bl	8000108 <__udivsi3>
 80012da:	0003      	movs	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x14c>)
 80012e0:	801a      	strh	r2, [r3, #0]
			time_pattern[shifted_minutes-1] = none;
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x14c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x140>)
 80012ea:	0099      	lsls	r1, r3, #2
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_GPIO_EXTI_Callback+0x144>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	508b      	str	r3, [r1, r2]
			if (shifted_minutes == 0) {
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x14c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0xea>
				time_pattern[11] = none;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x140>)
 80012fc:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HAL_GPIO_EXTI_Callback+0x144>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	}
    if (GPIO_Pin == Button_R_Pin) {
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	429a      	cmp	r2, r3
 800130c:	d117      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0x126>
    	showingLeds = true;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x130>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
    	if (changeTime) {
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_GPIO_EXTI_Callback+0x134>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d010      	beq.n	800133e <HAL_GPIO_EXTI_Callback+0x126>
    		changeTime = false;
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_GPIO_EXTI_Callback+0x134>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    		showingLeds = false;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x130>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 300, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001328:	2396      	movs	r3, #150	@ 0x96
 800132a:	0059      	lsls	r1, r3, #1
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_GPIO_EXTI_Callback+0x150>)
 800132e:	2204      	movs	r2, #4
 8001330:	0018      	movs	r0, r3
 8001332:	f002 f99b 	bl	800366c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <HAL_GPIO_EXTI_Callback+0x126>
    		{
    			Error_Handler();
 800133a:	f000 f881 	bl	8001440 <Error_Handler>
    	}
	}

    //HAL_SuspendTick();
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	200004f6 	.word	0x200004f6
 800134c:	200004f7 	.word	0x200004f7
 8001350:	20000002 	.word	0x20000002
 8001354:	200004f4 	.word	0x200004f4
 8001358:	20000490 	.word	0x20000490
 800135c:	200004f0 	.word	0x200004f0
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004
 8001368:	2000008c 	.word	0x2000008c

0800136c <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001374:	f7ff fcf8 	bl	8000d68 <SystemClock_Config>
	HAL_ResumeTick();
 8001378:	f000 fac2 	bl	8001900 <HAL_ResumeTick>
	HAL_PWR_DisableSleepOnExit();
 800137c:	f001 f9a0 	bl	80026c0 <HAL_PWR_DisableSleepOnExit>
    minutes+=5;
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0xbc>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	3305      	adds	r3, #5
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0xbc>)
 800138a:	801a      	strh	r2, [r3, #0]
	if (minutes >= 60) {
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0xbc>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b3b      	cmp	r3, #59	@ 0x3b
 8001392:	d908      	bls.n	80013a6 <HAL_RTCEx_WakeUpTimerEventCallback+0x3a>
		minutes = 0;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	801a      	strh	r2, [r3, #0]
		hours++;
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013a4:	801a      	strh	r2, [r3, #0]
	}
	if (hours >= 12) {
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	2b0b      	cmp	r3, #11
 80013ac:	d902      	bls.n	80013b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
		hours = 0;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	801a      	strh	r2, [r3, #0]
	}
	shifted_minutes = minutes/5;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0xbc>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	2105      	movs	r1, #5
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7fe fea4 	bl	8000108 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_RTCEx_WakeUpTimerEventCallback+0xc4>)
 80013c6:	801a      	strh	r2, [r3, #0]
	shifted_hours = (hours<6) ? hours+6 : hours-6;
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d804      	bhi.n	80013da <HAL_RTCEx_WakeUpTimerEventCallback+0x6e>
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3306      	adds	r3, #6
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	e003      	b.n	80013e2 <HAL_RTCEx_WakeUpTimerEventCallback+0x76>
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_RTCEx_WakeUpTimerEventCallback+0xc0>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3b06      	subs	r3, #6
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <HAL_RTCEx_WakeUpTimerEventCallback+0xc8>)
 80013e4:	8013      	strh	r3, [r2, #0]
	time_pattern[shifted_minutes-1] = none;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_RTCEx_WakeUpTimerEventCallback+0xc4>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_RTCEx_WakeUpTimerEventCallback+0xcc>)
 80013ee:	0099      	lsls	r1, r3, #2
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_RTCEx_WakeUpTimerEventCallback+0xd0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	508b      	str	r3, [r1, r2]
	time_pattern[shifted_hours-1] = none;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_RTCEx_WakeUpTimerEventCallback+0xc8>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_RTCEx_WakeUpTimerEventCallback+0xcc>)
 80013fe:	0099      	lsls	r1, r3, #2
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_RTCEx_WakeUpTimerEventCallback+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	508b      	str	r3, [r1, r2]
	if (shifted_minutes == 0 || shifted_hours == 0) {
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_RTCEx_WakeUpTimerEventCallback+0xc4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_RTCEx_WakeUpTimerEventCallback+0xaa>
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_RTCEx_WakeUpTimerEventCallback+0xc8>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_RTCEx_WakeUpTimerEventCallback+0xb2>
		time_pattern[11] = none;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_RTCEx_WakeUpTimerEventCallback+0xcc>)
 8001418:	4a08      	ldr	r2, [pc, #32]	@ (800143c <HAL_RTCEx_WakeUpTimerEventCallback+0xd0>)
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000000 	.word	0x20000000
 800142c:	20000002 	.word	0x20000002
 8001430:	20000004 	.word	0x20000004
 8001434:	200004f4 	.word	0x200004f4
 8001438:	20000490 	.word	0x20000490
 800143c:	200004f0 	.word	0x200004f0

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_MspInit+0x24>)
 8001452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_MspInit+0x24>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <HAL_MspInit+0x24>)
 800145e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_MspInit+0x24>)
 8001462:	2180      	movs	r1, #128	@ 0x80
 8001464:	0549      	lsls	r1, r1, #21
 8001466:	430a      	orrs	r2, r1
 8001468:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	240c      	movs	r4, #12
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	2314      	movs	r3, #20
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f003 f988 	bl	800479c <memset>
  if(hadc->Instance==ADC1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <HAL_ADC_MspInit+0x70>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d121      	bne.n	80014da <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_ADC_MspInit+0x74>)
 8001498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_ADC_MspInit+0x74>)
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	430a      	orrs	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_ADC_MspInit+0x74>)
 80014a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_ADC_MspInit+0x74>)
 80014aa:	2102      	movs	r1, #2
 80014ac:	430a      	orrs	r2, r1
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_ADC_MspInit+0x74>)
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2203      	movs	r2, #3
 80014c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_ADC_MspInit+0x78>)
 80014d2:	0019      	movs	r1, r3
 80014d4:	0010      	movs	r0, r2
 80014d6:	f000 fed3 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b009      	add	sp, #36	@ 0x24
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	40012400 	.word	0x40012400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	50000400 	.word	0x50000400

080014f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_RTC_MspInit+0x38>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10e      	bne.n	8001520 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_RTC_MspInit+0x3c>)
 8001504:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RTC_MspInit+0x3c>)
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	02c9      	lsls	r1, r1, #11
 800150c:	430a      	orrs	r2, r1
 800150e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	2002      	movs	r0, #2
 8001516:	f000 fcc7 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800151a:	2002      	movs	r0, #2
 800151c:	f000 fcd9 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40002800 	.word	0x40002800
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	240c      	movs	r4, #12
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	2314      	movs	r3, #20
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f003 f92a 	bl	800479c <memset>
  if(hspi->Instance==SPI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_SPI_MspInit+0x80>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d129      	bne.n	80015a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_SPI_MspInit+0x84>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <HAL_SPI_MspInit+0x84>)
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	0149      	lsls	r1, r1, #5
 800155c:	430a      	orrs	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_SPI_MspInit+0x84>)
 8001562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <HAL_SPI_MspInit+0x84>)
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_SPI_MspInit+0x84>)
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001578:	0021      	movs	r1, r4
 800157a:	187b      	adds	r3, r7, r1
 800157c:	22f0      	movs	r2, #240	@ 0xf0
 800157e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2202      	movs	r2, #2
 8001584:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2203      	movs	r2, #3
 8001590:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	187a      	adds	r2, r7, r1
 800159a:	23a0      	movs	r3, #160	@ 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	0011      	movs	r1, r2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 fe6d 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b009      	add	sp, #36	@ 0x24
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d131      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015da:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <HAL_TIM_Base_MspInit+0x88>)
 80015dc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015e0:	2208      	movs	r2, #8
 80015e2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015e6:	2210      	movs	r2, #16
 80015e8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 8001608:	2220      	movs	r2, #32
 800160a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 800160e:	22c0      	movs	r2, #192	@ 0xc0
 8001610:	0192      	lsls	r2, r2, #6
 8001612:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fc78 	bl	8001f0c <HAL_DMA_Init>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001620:	f7ff ff0e 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 8001628:	621a      	str	r2, [r3, #32]
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	20000148 	.word	0x20000148
 8001640:	40020058 	.word	0x40020058

08001644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	240c      	movs	r4, #12
 800164e:	193b      	adds	r3, r7, r4
 8001650:	0018      	movs	r0, r3
 8001652:	2314      	movs	r3, #20
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f003 f8a0 	bl	800479c <memset>
  if(htim->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	05db      	lsls	r3, r3, #23
 8001664:	429a      	cmp	r2, r3
 8001666:	d123      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_TIM_MspPostInit+0x74>)
 800166a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_TIM_MspPostInit+0x74>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_TIM_MspPostInit+0x74>)
 8001676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001680:	193b      	adds	r3, r7, r4
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	0212      	lsls	r2, r2, #8
 8001686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	0021      	movs	r1, r4
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2202      	movs	r2, #2
 800168e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2205      	movs	r2, #5
 80016a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 80016a2:	187a      	adds	r2, r7, r1
 80016a4:	23a0      	movs	r3, #160	@ 0xa0
 80016a6:	05db      	lsls	r3, r3, #23
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 fde8 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b009      	add	sp, #36	@ 0x24
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	40021000 	.word	0x40021000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	e7fd      	b.n	80016c0 <NMI_Handler+0x4>

080016c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	e7fd      	b.n	80016c8 <HardFault_Handler+0x4>

080016cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f8be 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <RTC_IRQHandler+0x14>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f002 f890 	bl	800381c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	2000008c 	.word	0x2000008c

08001708 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_LT_Pin);
 800170c:	2001      	movs	r0, #1
 800170e:	f000 ff43 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_LB_Pin);
 8001712:	2002      	movs	r0, #2
 8001714:	f000 ff40 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 8001722:	2008      	movs	r0, #8
 8001724:	f000 ff38 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_R_Pin);
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	0018      	movs	r0, r3
 8001738:	f000 ff2e 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fcbc 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	20000148 	.word	0x20000148

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800176a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800176c:	f7ff fff6 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001796:	f003 f809 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179a:	f7ff f92b 	bl	80009f4 <main>

0800179e <LoopForever>:

LoopForever:
    b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
   ldr   r0, =_estack
 80017a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017ac:	08004844 	.word	0x08004844
  ldr r2, =_sbss
 80017b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017b4:	20000500 	.word	0x20000500

080017b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_COMP_IRQHandler>
	...

080017bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_Init+0x3c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Init+0x3c>)
 80017ce:	2140      	movs	r1, #64	@ 0x40
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f811 	bl	80017fc <HAL_InitTick>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e001      	b.n	80017ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017e6:	f7ff fe31 	bl	800144c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_InitTick+0x5c>)
 8001806:	681c      	ldr	r4, [r3, #0]
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	0019      	movs	r1, r3
 800180e:	23fa      	movs	r3, #250	@ 0xfa
 8001810:	0098      	lsls	r0, r3, #2
 8001812:	f7fe fc79 	bl	8000108 <__udivsi3>
 8001816:	0003      	movs	r3, r0
 8001818:	0019      	movs	r1, r3
 800181a:	0020      	movs	r0, r4
 800181c:	f7fe fc74 	bl	8000108 <__udivsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fb65 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e00f      	b.n	8001850 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d80b      	bhi.n	800184e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	2301      	movs	r3, #1
 800183a:	425b      	negs	r3, r3
 800183c:	2200      	movs	r2, #0
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fb32 	bl	8001ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_InitTick+0x64>)
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b003      	add	sp, #12
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	20000008 	.word	0x20000008
 800185c:	20000010 	.word	0x20000010
 8001860:	2000000c 	.word	0x2000000c

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	001a      	movs	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	18d2      	adds	r2, r2, r3
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_IncTick+0x20>)
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	20000010 	.word	0x20000010
 8001884:	200004fc 	.word	0x200004fc

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	200004fc 	.word	0x200004fc

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3301      	adds	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	001a      	movs	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	46c0      	nop			@ (mov r8, r8)
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_SuspendTick+0x18>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_SuspendTick+0x18>)
 80018ee:	2102      	movs	r1, #2
 80018f0:	438a      	bics	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	46c0      	nop			@ (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <HAL_ResumeTick+0x18>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_ResumeTick+0x18>)
 800190a:	2102      	movs	r1, #2
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e159      	b.n	8001be2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2250      	movs	r2, #80	@ 0x50
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fd94 	bl	8001474 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001950:	2210      	movs	r2, #16
 8001952:	4013      	ands	r3, r2
 8001954:	2b10      	cmp	r3, #16
 8001956:	d005      	beq.n	8001964 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2204      	movs	r2, #4
 8001960:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001962:	d00b      	beq.n	800197c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	2210      	movs	r2, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2250      	movs	r2, #80	@ 0x50
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e132      	b.n	8001be2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001980:	4a9a      	ldr	r2, [pc, #616]	@ (8001bec <HAL_ADC_Init+0x2d0>)
 8001982:	4013      	ands	r3, r2
 8001984:	2202      	movs	r2, #2
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2203      	movs	r2, #3
 8001994:	4013      	ands	r3, r2
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_ADC_Init+0x90>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_Init+0x90>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_ADC_Init+0x92>
 80019ac:	2300      	movs	r3, #0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d149      	bne.n	8001a46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	23c0      	movs	r3, #192	@ 0xc0
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d00b      	beq.n	80019d6 <HAL_ADC_Init+0xba>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d005      	beq.n	80019d6 <HAL_ADC_Init+0xba>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d111      	bne.n	80019fa <HAL_ADC_Init+0xde>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	0892      	lsrs	r2, r2, #2
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6919      	ldr	r1, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	e014      	b.n	8001a24 <HAL_ADC_Init+0x108>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	0892      	lsrs	r2, r2, #2
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	4b79      	ldr	r3, [pc, #484]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b78      	ldr	r3, [pc, #480]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a10:	4978      	ldr	r1, [pc, #480]	@ (8001bf4 <HAL_ADC_Init+0x2d8>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	4b76      	ldr	r3, [pc, #472]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b74      	ldr	r3, [pc, #464]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2118      	movs	r1, #24
 8001a30:	438a      	bics	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68d9      	ldr	r1, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001a46:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b69      	ldr	r3, [pc, #420]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a4c:	496a      	ldr	r1, [pc, #424]	@ (8001bf8 <HAL_ADC_Init+0x2dc>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001a52:	4b67      	ldr	r3, [pc, #412]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	065a      	lsls	r2, r3, #25
 8001a5c:	4b64      	ldr	r3, [pc, #400]	@ (8001bf0 <HAL_ADC_Init+0x2d4>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d108      	bne.n	8001a82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	0549      	lsls	r1, r1, #21
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	495b      	ldr	r1, [pc, #364]	@ (8001bfc <HAL_ADC_Init+0x2e0>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68d9      	ldr	r1, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_Init+0x18c>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_Init+0x18e>
 8001aa8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001aaa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2020      	movs	r0, #32
 8001ab0:	5c1b      	ldrb	r3, [r3, r0]
 8001ab2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ab4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	202c      	movs	r0, #44	@ 0x2c
 8001aba:	5c1b      	ldrb	r3, [r3, r0]
 8001abc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001abe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ac4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001acc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ad4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ae2:	23c2      	movs	r3, #194	@ 0xc2
 8001ae4:	33ff      	adds	r3, #255	@ 0xff
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d00b      	beq.n	8001b02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68d9      	ldr	r1, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2221      	movs	r2, #33	@ 0x21
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11a      	bne.n	8001b42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	0249      	lsls	r1, r1, #9
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	e00b      	b.n	8001b42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	2220      	movs	r2, #32
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d11f      	bne.n	8001b8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	492a      	ldr	r1, [pc, #168]	@ (8001c00 <HAL_ADC_Init+0x2e4>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b68:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001b6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	e00e      	b.n	8001ba8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2107      	movs	r1, #7
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6959      	ldr	r1, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	fffffefd 	.word	0xfffffefd
 8001bf0:	40012708 	.word	0x40012708
 8001bf4:	ffc3ffff 	.word	0xffc3ffff
 8001bf8:	fdffffff 	.word	0xfdffffff
 8001bfc:	fffe0219 	.word	0xfffe0219
 8001c00:	fffffc03 	.word	0xfffffc03

08001c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2250      	movs	r2, #80	@ 0x50
 8001c12:	5c9b      	ldrb	r3, [r3, r2]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x18>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e06c      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0xf2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2250      	movs	r2, #80	@ 0x50
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d00b      	beq.n	8001c48 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	2220      	movs	r2, #32
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2250      	movs	r2, #80	@ 0x50
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e056      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d00 <HAL_ADC_ConfigChannel+0xfc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d028      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	035b      	lsls	r3, r3, #13
 8001c5e:	0b5a      	lsrs	r2, r3, #13
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	02db      	lsls	r3, r3, #11
 8001c70:	4013      	ands	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001c7a:	2180      	movs	r1, #128	@ 0x80
 8001c7c:	0409      	lsls	r1, r1, #16
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001c82:	200a      	movs	r0, #10
 8001c84:	f000 f844 	bl	8001d10 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	4013      	ands	r3, r2
 8001c92:	d02b      	beq.n	8001cec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001c9a:	2180      	movs	r1, #128	@ 0x80
 8001c9c:	03c9      	lsls	r1, r1, #15
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e023      	b.n	8001cec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	035b      	lsls	r3, r3, #13
 8001cb0:	0b5b      	lsrs	r3, r3, #13
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	02db      	lsls	r3, r3, #11
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d005      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001cce:	490e      	ldr	r1, [pc, #56]	@ (8001d08 <HAL_ADC_ConfigChannel+0x104>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d005      	beq.n	8001cec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <HAL_ADC_ConfigChannel+0x100>)
 8001ce6:	4909      	ldr	r1, [pc, #36]	@ (8001d0c <HAL_ADC_ConfigChannel+0x108>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2250      	movs	r2, #80	@ 0x50
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	00001001 	.word	0x00001001
 8001d04:	40012708 	.word	0x40012708
 8001d08:	ff7fffff 	.word	0xff7fffff
 8001d0c:	ffbfffff 	.word	0xffbfffff

08001d10 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <ADC_DelayMicroSecond+0x38>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	490b      	ldr	r1, [pc, #44]	@ (8001d4c <ADC_DelayMicroSecond+0x3c>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7fe f9f2 	bl	8000108 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	001a      	movs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4353      	muls	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001d2e:	e002      	b.n	8001d36 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f9      	bne.n	8001d30 <ADC_DelayMicroSecond+0x20>
  }
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	000f4240 	.word	0x000f4240

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d62:	d809      	bhi.n	8001d78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_EnableIRQ+0x30>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	4091      	lsls	r1, r2
 8001d74:	000a      	movs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
  }
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d98:	d828      	bhi.n	8001dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e58 <__NVIC_SetPriority+0xd4>)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	33c0      	adds	r3, #192	@ 0xc0
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	1dfa      	adds	r2, r7, #7
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	0011      	movs	r1, r2
 8001db0:	2203      	movs	r2, #3
 8001db2:	400a      	ands	r2, r1
 8001db4:	00d2      	lsls	r2, r2, #3
 8001db6:	21ff      	movs	r1, #255	@ 0xff
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	43d2      	mvns	r2, r2
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	22ff      	movs	r2, #255	@ 0xff
 8001dc8:	401a      	ands	r2, r3
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	481f      	ldr	r0, [pc, #124]	@ (8001e58 <__NVIC_SetPriority+0xd4>)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	430a      	orrs	r2, r1
 8001de4:	33c0      	adds	r3, #192	@ 0xc0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dea:	e031      	b.n	8001e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <__NVIC_SetPriority+0xd8>)
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0019      	movs	r1, r3
 8001df4:	230f      	movs	r3, #15
 8001df6:	400b      	ands	r3, r1
 8001df8:	3b08      	subs	r3, #8
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1dfa      	adds	r2, r7, #7
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	400a      	ands	r2, r1
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	21ff      	movs	r1, #255	@ 0xff
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	43d2      	mvns	r2, r2
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	22ff      	movs	r2, #255	@ 0xff
 8001e24:	401a      	ands	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	4003      	ands	r3, r0
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	001c      	movs	r4, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	4023      	ands	r3, r4
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	430a      	orrs	r2, r1
 8001e46:	3306      	adds	r3, #6
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	18c3      	adds	r3, r0, r3
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	045b      	lsls	r3, r3, #17
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d301      	bcc.n	8001e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e74:	2301      	movs	r3, #1
 8001e76:	e010      	b.n	8001e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2103      	movs	r1, #3
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff ff7c 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <SysTick_Config+0x44>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	0002      	movs	r2, r0
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff33 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ffaf 	bl	8001e60 <SysTick_Config>
 8001f02:	0003      	movs	r3, r0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e061      	b.n	8001fe2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a32      	ldr	r2, [pc, #200]	@ (8001fec <HAL_DMA_Init+0xe0>)
 8001f24:	4694      	mov	ip, r2
 8001f26:	4463      	add	r3, ip
 8001f28:	2114      	movs	r1, #20
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7fe f8ec 	bl	8000108 <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	009a      	lsls	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_DMA_Init+0xe4>)
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2225      	movs	r2, #37	@ 0x25
 8001f42:	2102      	movs	r1, #2
 8001f44:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a28      	ldr	r2, [pc, #160]	@ (8001ff4 <HAL_DMA_Init+0xe8>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d018      	beq.n	8001fca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <HAL_DMA_Init+0xec>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	211c      	movs	r1, #28
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	4099      	lsls	r1, r3
 8001fa8:	000b      	movs	r3, r1
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_DMA_Init+0xec>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_DMA_Init+0xec>)
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	201c      	movs	r0, #28
 8001fc0:	4003      	ands	r3, r0
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_DMA_Init+0xec>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2225      	movs	r2, #37	@ 0x25
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	bffdfff8 	.word	0xbffdfff8
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	ffff800f 	.word	0xffff800f
 8001ff8:	400200a8 	.word	0x400200a8

08001ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2317      	movs	r3, #23
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2224      	movs	r2, #36	@ 0x24
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_DMA_Start_IT+0x24>
 800201c:	2302      	movs	r3, #2
 800201e:	e04f      	b.n	80020c0 <HAL_DMA_Start_IT+0xc4>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2225      	movs	r2, #37	@ 0x25
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d13a      	bne.n	80020aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2225      	movs	r2, #37	@ 0x25
 8002038:	2102      	movs	r1, #2
 800203a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	438a      	bics	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f8e3 	bl	8002224 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	210e      	movs	r1, #14
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e00f      	b.n	8002098 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2104      	movs	r1, #4
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	210a      	movs	r1, #10
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2224      	movs	r2, #36	@ 0x24
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020b2:	2317      	movs	r3, #23
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b006      	add	sp, #24
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	221c      	movs	r2, #28
 80020e6:	4013      	ands	r3, r2
 80020e8:	2204      	movs	r2, #4
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	d026      	beq.n	8002142 <HAL_DMA_IRQHandler+0x7a>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2204      	movs	r2, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
 8002106:	d107      	bne.n	8002118 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	221c      	movs	r2, #28
 800211e:	401a      	ands	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2104      	movs	r1, #4
 8002126:	4091      	lsls	r1, r2
 8002128:	000a      	movs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <HAL_DMA_IRQHandler+0x6e>
 8002134:	e071      	b.n	800221a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	0010      	movs	r0, r2
 800213e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002140:	e06b      	b.n	800221a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	221c      	movs	r2, #28
 8002148:	4013      	ands	r3, r2
 800214a:	2202      	movs	r2, #2
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	d02d      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xea>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2202      	movs	r2, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d029      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2220      	movs	r2, #32
 8002166:	4013      	ands	r3, r2
 8002168:	d10b      	bne.n	8002182 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	210a      	movs	r1, #10
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2225      	movs	r2, #37	@ 0x25
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	221c      	movs	r2, #28
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	2102      	movs	r1, #2
 8002190:	4091      	lsls	r1, r2
 8002192:	000a      	movs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2224      	movs	r2, #36	@ 0x24
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d039      	beq.n	800221a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	0010      	movs	r0, r2
 80021ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021b0:	e033      	b.n	800221a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	221c      	movs	r2, #28
 80021b8:	4013      	ands	r3, r2
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	d02a      	beq.n	800221c <HAL_DMA_IRQHandler+0x154>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2208      	movs	r2, #8
 80021ca:	4013      	ands	r3, r2
 80021cc:	d026      	beq.n	800221c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	210e      	movs	r1, #14
 80021da:	438a      	bics	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	221c      	movs	r2, #28
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	2101      	movs	r1, #1
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2225      	movs	r2, #37	@ 0x25
 80021fc:	2101      	movs	r1, #1
 80021fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	@ 0x24
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	0010      	movs	r0, r2
 8002218:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46c0      	nop			@ (mov r8, r8)
}
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}

08002224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	221c      	movs	r2, #28
 8002238:	401a      	ands	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2101      	movs	r1, #1
 8002240:	4091      	lsls	r1, r2
 8002242:	000a      	movs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b10      	cmp	r3, #16
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002296:	e149      	b.n	800252c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4091      	lsls	r1, r2
 80022a2:	000a      	movs	r2, r1
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <HAL_GPIO_Init+0x30>
 80022ae:	e13a      	b.n	8002526 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d130      	bne.n	800232a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fe:	2201      	movs	r2, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	2201      	movs	r2, #1
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	4013      	ands	r3, r2
 8002332:	2b03      	cmp	r3, #3
 8002334:	d017      	beq.n	8002366 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	409a      	lsls	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	4013      	ands	r3, r2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d123      	bne.n	80023ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	58d3      	ldr	r3, [r2, r3]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2107      	movs	r1, #7
 800239e:	400b      	ands	r3, r1
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	6939      	ldr	r1, [r7, #16]
 80023b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	43da      	mvns	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2203      	movs	r2, #3
 80023d8:	401a      	ands	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	23c0      	movs	r3, #192	@ 0xc0
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_GPIO_Init+0x17c>
 80023fa:	e094      	b.n	8002526 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fc:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_GPIO_Init+0x2c4>)
 80023fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002400:	4b50      	ldr	r3, [pc, #320]	@ (8002544 <HAL_GPIO_Init+0x2c4>)
 8002402:	2101      	movs	r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002408:	4a4f      	ldr	r2, [pc, #316]	@ (8002548 <HAL_GPIO_Init+0x2c8>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	589b      	ldr	r3, [r3, r2]
 8002414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2203      	movs	r2, #3
 800241a:	4013      	ands	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	220f      	movs	r2, #15
 8002420:	409a      	lsls	r2, r3
 8002422:	0013      	movs	r3, r2
 8002424:	43da      	mvns	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	23a0      	movs	r3, #160	@ 0xa0
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	429a      	cmp	r2, r3
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x1de>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a44      	ldr	r2, [pc, #272]	@ (800254c <HAL_GPIO_Init+0x2cc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x1da>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a43      	ldr	r2, [pc, #268]	@ (8002550 <HAL_GPIO_Init+0x2d0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x1d6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a42      	ldr	r2, [pc, #264]	@ (8002554 <HAL_GPIO_Init+0x2d4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x1d2>
 800244e:	2305      	movs	r3, #5
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002452:	2306      	movs	r3, #6
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x1e0>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x1e0>
 800245e:	2300      	movs	r3, #0
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	2103      	movs	r1, #3
 8002464:	400a      	ands	r2, r1
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002470:	4935      	ldr	r1, [pc, #212]	@ (8002548 <HAL_GPIO_Init+0x2c8>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43da      	mvns	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	035b      	lsls	r3, r3, #13
 8002496:	4013      	ands	r3, r2
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	039b      	lsls	r3, r3, #14
 80024c0:	4013      	ands	r3, r2
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80024d2:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	029b      	lsls	r3, r3, #10
 80024ea:	4013      	ands	r3, r2
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43da      	mvns	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	4013      	ands	r3, r2
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002520:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_GPIO_Init+0x2d8>)
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	40da      	lsrs	r2, r3
 8002534:	1e13      	subs	r3, r2, #0
 8002536:	d000      	beq.n	800253a <HAL_GPIO_Init+0x2ba>
 8002538:	e6ae      	b.n	8002298 <HAL_GPIO_Init+0x18>
  }
}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b006      	add	sp, #24
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40010000 	.word	0x40010000
 800254c:	50000400 	.word	0x50000400
 8002550:	50000800 	.word	0x50000800
 8002554:	50001c00 	.word	0x50001c00
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	000a      	movs	r2, r1
 8002566:	1cbb      	adds	r3, r7, #2
 8002568:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	1cba      	adds	r2, r7, #2
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	4013      	ands	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002576:	230f      	movs	r3, #15
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e003      	b.n	8002588 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002580:	230f      	movs	r3, #15
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b004      	add	sp, #16
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	0002      	movs	r2, r0
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	1dba      	adds	r2, r7, #6
 80025aa:	8812      	ldrh	r2, [r2, #0]
 80025ac:	4013      	ands	r3, r2
 80025ae:	d008      	beq.n	80025c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80025b2:	1dba      	adds	r2, r7, #6
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b8:	1dbb      	adds	r3, r7, #6
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe fe2b 	bl	8001218 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025da:	2180      	movs	r1, #128	@ 0x80
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40007000 	.word	0x40007000

080025ec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	000a      	movs	r2, r1
 80025f6:	1cfb      	adds	r3, r7, #3
 80025f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_PWR_EnterSTOPMode+0xac>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_PWR_EnterSTOPMode+0x40>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002620:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002626:	491d      	ldr	r1, [pc, #116]	@ (800269c <HAL_PWR_EnterSTOPMode+0xb0>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2203      	movs	r2, #3
 8002636:	4393      	bics	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800264e:	2104      	movs	r1, #4
 8002650:	430a      	orrs	r2, r1
 8002652:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002654:	1cfb      	adds	r3, r7, #3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800265c:	bf30      	wfi
 800265e:	e002      	b.n	8002666 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002660:	bf40      	sev
    __WFE();
 8002662:	bf20      	wfe
    __WFE();
 8002664:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800266c:	2104      	movs	r1, #4
 800266e:	438a      	bics	r2, r1
 8002670:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_PWR_EnterSTOPMode+0xa0>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	0089      	lsls	r1, r1, #2
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
  }
}
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40007000 	.word	0x40007000
 8002698:	40010000 	.word	0x40010000
 800269c:	fffffdff 	.word	0xfffffdff
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_PWR_EnableSleepOnExit+0x18>)
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_PWR_EnableSleepOnExit+0x18>)
 80026ae:	2102      	movs	r1, #2
 80026b0:	430a      	orrs	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]
}
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <HAL_PWR_DisableSleepOnExit+0x18>)
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_PWR_DisableSleepOnExit+0x18>)
 80026ca:	2102      	movs	r1, #2
 80026cc:	438a      	bics	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
}
 80026d0:	46c0      	nop			@ (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 fb6c 	bl	8002dc8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f0:	4bc8      	ldr	r3, [pc, #800]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	220c      	movs	r2, #12
 80026f6:	4013      	ands	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fa:	4bc6      	ldr	r3, [pc, #792]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x36>
 8002710:	e07d      	b.n	800280e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	429a      	cmp	r2, r3
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4bba      	ldr	r3, [pc, #744]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_RCC_OscConfig+0x5a>
 8002734:	e06a      	b.n	800280c <HAL_RCC_OscConfig+0x130>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d166      	bne.n	800280c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f000 fb42 	bl	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x84>
 8002750:	4bb0      	ldr	r3, [pc, #704]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4baf      	ldr	r3, [pc, #700]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	0249      	lsls	r1, r1, #9
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e027      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	23a0      	movs	r3, #160	@ 0xa0
 8002766:	02db      	lsls	r3, r3, #11
 8002768:	429a      	cmp	r2, r3
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0xae>
 800276c:	4ba9      	ldr	r3, [pc, #676]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4ba8      	ldr	r3, [pc, #672]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	02c9      	lsls	r1, r1, #11
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4ba6      	ldr	r3, [pc, #664]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4ba5      	ldr	r3, [pc, #660]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	0249      	lsls	r1, r1, #9
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e012      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 800278a:	4ba2      	ldr	r3, [pc, #648]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002790:	49a1      	ldr	r1, [pc, #644]	@ (8002a18 <HAL_RCC_OscConfig+0x33c>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b9f      	ldr	r3, [pc, #636]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027aa:	499c      	ldr	r1, [pc, #624]	@ (8002a1c <HAL_RCC_OscConfig+0x340>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d014      	beq.n	80027e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f866 	bl	8001888 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c2:	f7ff f861 	bl	8001888 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	@ 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e2f9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0xe6>
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f851 	bl	8001888 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff f84c 	bl	8001888 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e2e4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fe:	4b85      	ldr	r3, [pc, #532]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	4013      	ands	r3, r2
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x110>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d100      	bne.n	800281a <HAL_RCC_OscConfig+0x13e>
 8002818:	e099      	b.n	800294e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	2220      	movs	r2, #32
 8002824:	4013      	ands	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002828:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b79      	ldr	r3, [pc, #484]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800282e:	2120      	movs	r1, #32
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2220      	movs	r2, #32
 8002838:	4393      	bics	r3, r2
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d13e      	bne.n	80028c6 <HAL_RCC_OscConfig+0x1ea>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800284e:	4b71      	ldr	r3, [pc, #452]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2204      	movs	r2, #4
 8002854:	4013      	ands	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_RCC_OscConfig+0x186>
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e2b2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b6c      	ldr	r3, [pc, #432]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a6e      	ldr	r2, [pc, #440]	@ (8002a20 <HAL_RCC_OscConfig+0x344>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	4b68      	ldr	r3, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2209      	movs	r2, #9
 800287e:	4393      	bics	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288a:	f000 fbeb 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 800288e:	0001      	movs	r1, r0
 8002890:	4b60      	ldr	r3, [pc, #384]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	220f      	movs	r2, #15
 8002898:	4013      	ands	r3, r2
 800289a:	4a62      	ldr	r2, [pc, #392]	@ (8002a24 <HAL_RCC_OscConfig+0x348>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	000a      	movs	r2, r1
 80028a0:	40da      	lsrs	r2, r3
 80028a2:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <HAL_RCC_OscConfig+0x34c>)
 80028a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028a6:	4b61      	ldr	r3, [pc, #388]	@ (8002a2c <HAL_RCC_OscConfig+0x350>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2513      	movs	r5, #19
 80028ac:	197c      	adds	r4, r7, r5
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fe ffa4 	bl	80017fc <HAL_InitTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028b8:	197b      	adds	r3, r7, r5
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d046      	beq.n	800294e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	e280      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d027      	beq.n	800291c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028cc:	4b51      	ldr	r3, [pc, #324]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2209      	movs	r2, #9
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe ffd3 	bl	8001888 <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe ffce 	bl	8001888 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e266      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fa:	4b46      	ldr	r3, [pc, #280]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2204      	movs	r2, #4
 8002900:	4013      	ands	r3, r2
 8002902:	d0f1      	beq.n	80028e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	@ (8002a20 <HAL_RCC_OscConfig+0x344>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b3f      	ldr	r3, [pc, #252]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e018      	b.n	800294e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b3c      	ldr	r3, [pc, #240]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002922:	2101      	movs	r1, #1
 8002924:	438a      	bics	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe ffae 	bl	8001888 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe ffa9 	bl	8001888 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e241      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d1f1      	bne.n	8002932 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2210      	movs	r2, #16
 8002954:	4013      	ands	r3, r2
 8002956:	d100      	bne.n	800295a <HAL_RCC_OscConfig+0x27e>
 8002958:	e0a1      	b.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d140      	bne.n	80029e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002960:	4b2c      	ldr	r3, [pc, #176]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x29c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e227      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <HAL_RCC_OscConfig+0x354>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298c:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	0a19      	lsrs	r1, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	061a      	lsls	r2, r3, #24
 800299a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	0b5b      	lsrs	r3, r3, #13
 80029a6:	3301      	adds	r3, #1
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0212      	lsls	r2, r2, #8
 80029ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	210f      	movs	r1, #15
 80029b6:	400b      	ands	r3, r1
 80029b8:	491a      	ldr	r1, [pc, #104]	@ (8002a24 <HAL_RCC_OscConfig+0x348>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_RCC_OscConfig+0x34c>)
 80029c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_RCC_OscConfig+0x350>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2513      	movs	r5, #19
 80029c8:	197c      	adds	r4, r7, r5
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fe ff16 	bl	80017fc <HAL_InitTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d060      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80029dc:	197b      	adds	r3, r7, r5
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	e1f2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029f0:	2180      	movs	r1, #128	@ 0x80
 80029f2:	0049      	lsls	r1, r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe ff46 	bl	8001888 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a00:	e018      	b.n	8002a34 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a02:	f7fe ff41 	bl	8001888 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d911      	bls.n	8002a34 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1d9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	fffbffff 	.word	0xfffbffff
 8002a20:	ffffe0ff 	.word	0xffffe0ff
 8002a24:	08004818 	.word	0x08004818
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a34:	4bc9      	ldr	r3, [pc, #804]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d0e0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4bc6      	ldr	r3, [pc, #792]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4ac6      	ldr	r2, [pc, #792]	@ (8002d60 <HAL_RCC_OscConfig+0x684>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	4bc3      	ldr	r3, [pc, #780]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a54:	4bc1      	ldr	r3, [pc, #772]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	0a19      	lsrs	r1, r3, #8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	061a      	lsls	r2, r3, #24
 8002a62:	4bbe      	ldr	r3, [pc, #760]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	e019      	b.n	8002a9e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a6a:	4bbc      	ldr	r3, [pc, #752]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4bbb      	ldr	r3, [pc, #748]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a70:	49bc      	ldr	r1, [pc, #752]	@ (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe ff07 	bl	8001888 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a80:	f7fe ff02 	bl	8001888 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e19a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a92:	4bb2      	ldr	r3, [pc, #712]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d036      	beq.n	8002b16 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d019      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab0:	4baa      	ldr	r3, [pc, #680]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ab4:	4ba9      	ldr	r3, [pc, #676]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fee4 	bl	8001888 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fedf 	bl	8001888 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e177      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0f1      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3ea>
 8002ae2:	e018      	b.n	8002b16 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ae8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fe feca 	bl	8001888 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afa:	f7fe fec5 	bl	8001888 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e15d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b0c:	4b93      	ldr	r3, [pc, #588]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	2202      	movs	r2, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d1f1      	bne.n	8002afa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <HAL_RCC_OscConfig+0x446>
 8002b20:	e0ae      	b.n	8002c80 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2023      	movs	r0, #35	@ 0x23
 8002b24:	183b      	adds	r3, r7, r0
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b8c      	ldr	r3, [pc, #560]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	055b      	lsls	r3, r3, #21
 8002b32:	4013      	ands	r3, r2
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b89      	ldr	r3, [pc, #548]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b3a:	4b88      	ldr	r3, [pc, #544]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	0549      	lsls	r1, r1, #21
 8002b40:	430a      	orrs	r2, r1
 8002b42:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b44:	183b      	adds	r3, r7, r0
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b87      	ldr	r3, [pc, #540]	@ (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b56:	4b84      	ldr	r3, [pc, #528]	@ (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b83      	ldr	r3, [pc, #524]	@ (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	0049      	lsls	r1, r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fe90 	bl	8001888 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fe fe8b 	bl	8001888 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	@ 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e123      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b79      	ldr	r3, [pc, #484]	@ (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4cc>
 8002b98:	4b70      	ldr	r3, [pc, #448]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002b9e:	2180      	movs	r1, #128	@ 0x80
 8002ba0:	0049      	lsls	r1, r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ba6:	e031      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x4ee>
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bb4:	4b69      	ldr	r3, [pc, #420]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bb6:	496b      	ldr	r1, [pc, #428]	@ (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bbc:	4b67      	ldr	r3, [pc, #412]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bc0:	4b66      	ldr	r3, [pc, #408]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bc2:	496a      	ldr	r1, [pc, #424]	@ (8002d6c <HAL_RCC_OscConfig+0x690>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	23a0      	movs	r3, #160	@ 0xa0
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x518>
 8002bd6:	4b61      	ldr	r3, [pc, #388]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bda:	4b60      	ldr	r3, [pc, #384]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bdc:	2180      	movs	r1, #128	@ 0x80
 8002bde:	00c9      	lsls	r1, r1, #3
 8002be0:	430a      	orrs	r2, r1
 8002be2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002be4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	0049      	lsls	r1, r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002bf4:	4b59      	ldr	r3, [pc, #356]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bf8:	4b58      	ldr	r3, [pc, #352]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002bfa:	495a      	ldr	r1, [pc, #360]	@ (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c00:	4b56      	ldr	r3, [pc, #344]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c04:	4b55      	ldr	r3, [pc, #340]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c06:	4959      	ldr	r1, [pc, #356]	@ (8002d6c <HAL_RCC_OscConfig+0x690>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fe38 	bl	8001888 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fe33 	bl	8001888 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a51      	ldr	r2, [pc, #324]	@ (8002d70 <HAL_RCC_OscConfig+0x694>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0ca      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c32:	4b4a      	ldr	r3, [pc, #296]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d0ef      	beq.n	8002c1e <HAL_RCC_OscConfig+0x542>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fe22 	bl	8001888 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c48:	e009      	b.n	8002c5e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fe1d 	bl	8001888 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	4a46      	ldr	r2, [pc, #280]	@ (8002d70 <HAL_RCC_OscConfig+0x694>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0b4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c6a:	2323      	movs	r3, #35	@ 0x23
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b39      	ldr	r3, [pc, #228]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c78:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c7a:	493e      	ldr	r1, [pc, #248]	@ (8002d74 <HAL_RCC_OscConfig+0x698>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5ae>
 8002c88:	e09d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d100      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5b6>
 8002c90:	e076      	b.n	8002d80 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d145      	bne.n	8002d26 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ca0:	4935      	ldr	r1, [pc, #212]	@ (8002d78 <HAL_RCC_OscConfig+0x69c>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fdef 	bl	8001888 <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fdea 	bl	8001888 <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e082      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	049b      	lsls	r3, r3, #18
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cce:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d7c <HAL_RCC_OscConfig+0x6a0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	0449      	lsls	r1, r1, #17
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fdc4 	bl	8001888 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fdbf 	bl	8001888 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e057      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d18:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	049b      	lsls	r3, r3, #18
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x62a>
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d2c:	4912      	ldr	r1, [pc, #72]	@ (8002d78 <HAL_RCC_OscConfig+0x69c>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fda9 	bl	8001888 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fda4 	bl	8001888 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e03c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4e:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	049b      	lsls	r3, r3, #18
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x660>
 8002d5a:	e034      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	ffff1fff 	.word	0xffff1fff
 8002d64:	fffffeff 	.word	0xfffffeff
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	fffffbff 	.word	0xfffffbff
 8002d70:	00001388 	.word	0x00001388
 8002d74:	efffffff 	.word	0xefffffff
 8002d78:	feffffff 	.word	0xfeffffff
 8002d7c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_RCC_OscConfig+0x6f4>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	23f0      	movs	r3, #240	@ 0xf0
 8002da6:	039b      	lsls	r3, r3, #14
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	23c0      	movs	r3, #192	@ 0xc0
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b00a      	add	sp, #40	@ 0x28
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e128      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b96      	ldr	r3, [pc, #600]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d91e      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b93      	ldr	r3, [pc, #588]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4b90      	ldr	r3, [pc, #576]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fd3e 	bl	8001888 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe fd39 	bl	8001888 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a8a      	ldr	r2, [pc, #552]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e109      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b87      	ldr	r3, [pc, #540]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3e:	4b83      	ldr	r3, [pc, #524]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	22f0      	movs	r2, #240	@ 0xf0
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
 8002e5c:	e089      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e66:	4b79      	ldr	r3, [pc, #484]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	@ 0x80
 8002e6c:	029b      	lsls	r3, r3, #10
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d120      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e1      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7e:	4b73      	ldr	r3, [pc, #460]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	049b      	lsls	r3, r3, #18
 8002e86:	4013      	ands	r3, r2
 8002e88:	d114      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0d5      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	4b6d      	ldr	r3, [pc, #436]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0ca      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea4:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0c2      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4b65      	ldr	r3, [pc, #404]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4393      	bics	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4b62      	ldr	r3, [pc, #392]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fcde 	bl	8001888 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	e009      	b.n	8002eee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eda:	f7fe fcd5 	bl	8001888 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	4a58      	ldr	r2, [pc, #352]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0a5      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eee:	4b57      	ldr	r3, [pc, #348]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d1ef      	bne.n	8002eda <HAL_RCC_ClockConfig+0x106>
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d111      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f06:	f7fe fcbf 	bl	8001888 <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	4a4d      	ldr	r2, [pc, #308]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e08f      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	220c      	movs	r2, #12
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x132>
 8002f26:	e024      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fe fca9 	bl	8001888 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	4a42      	ldr	r2, [pc, #264]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e079      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x15e>
 8002f52:	e00e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fc98 	bl	8001888 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e068      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f68:	4b38      	ldr	r3, [pc, #224]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d21e      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f80:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f92:	f7fe fc79 	bl	8001888 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7fe fc74 	bl	8001888 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	4a28      	ldr	r2, [pc, #160]	@ (8003048 <HAL_RCC_ClockConfig+0x274>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e044      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb0:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCC_ClockConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d1ee      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	@ (8003050 <HAL_RCC_ClockConfig+0x27c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <HAL_RCC_ClockConfig+0x280>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00da      	lsls	r2, r3, #3
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffc:	f000 f832 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003000:	0001      	movs	r1, r0
 8003002:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_RCC_ClockConfig+0x278>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	220f      	movs	r2, #15
 800300a:	4013      	ands	r3, r2
 800300c:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <HAL_RCC_ClockConfig+0x284>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	000a      	movs	r2, r1
 8003012:	40da      	lsrs	r2, r3
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_ClockConfig+0x288>)
 8003016:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_ClockConfig+0x28c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	250b      	movs	r5, #11
 800301e:	197c      	adds	r4, r7, r5
 8003020:	0018      	movs	r0, r3
 8003022:	f7fe fbeb 	bl	80017fc <HAL_InitTick>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800302a:	197b      	adds	r3, r7, r5
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003032:	197b      	adds	r3, r7, r5
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	e000      	b.n	800303a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bdb0      	pop	{r4, r5, r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	40022000 	.word	0x40022000
 8003048:	00001388 	.word	0x00001388
 800304c:	40021000 	.word	0x40021000
 8003050:	fffff8ff 	.word	0xfffff8ff
 8003054:	ffffc7ff 	.word	0xffffc7ff
 8003058:	08004818 	.word	0x08004818
 800305c:	20000008 	.word	0x20000008
 8003060:	2000000c 	.word	0x2000000c

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b08e      	sub	sp, #56	@ 0x38
 8003068:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800306a:	4b4c      	ldr	r3, [pc, #304]	@ (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003072:	230c      	movs	r3, #12
 8003074:	4013      	ands	r3, r2
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d014      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 800307a:	d900      	bls.n	800307e <HAL_RCC_GetSysClockFreq+0x1a>
 800307c:	e07b      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x112>
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x24>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d00b      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003086:	e076      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003088:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003092:	4b43      	ldr	r3, [pc, #268]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003094:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003096:	e07c      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003098:	4b42      	ldr	r3, [pc, #264]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800309c:	e079      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80030a2:	e076      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	0c9a      	lsrs	r2, r3, #18
 80030a8:	230f      	movs	r3, #15
 80030aa:	401a      	ands	r2, r3
 80030ac:	4b3f      	ldr	r3, [pc, #252]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x148>)
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	0d9a      	lsrs	r2, r3, #22
 80030b6:	2303      	movs	r3, #3
 80030b8:	4013      	ands	r3, r2
 80030ba:	3301      	adds	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b37      	ldr	r3, [pc, #220]	@ (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	4013      	ands	r3, r2
 80030c8:	d01a      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	69b8      	ldr	r0, [r7, #24]
 80030d8:	69f9      	ldr	r1, [r7, #28]
 80030da:	f7fd f9ab 	bl	8000434 <__aeabi_lmul>
 80030de:	0002      	movs	r2, r0
 80030e0:	000b      	movs	r3, r1
 80030e2:	0010      	movs	r0, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f7fd f97f 	bl	80003f4 <__aeabi_uldivmod>
 80030f6:	0002      	movs	r2, r0
 80030f8:	000b      	movs	r3, r1
 80030fa:	0013      	movs	r3, r2
 80030fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fe:	e037      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003100:	4b26      	ldr	r3, [pc, #152]	@ (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	d01a      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003114:	2300      	movs	r3, #0
 8003116:	68b8      	ldr	r0, [r7, #8]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	f7fd f98b 	bl	8000434 <__aeabi_lmul>
 800311e:	0002      	movs	r2, r0
 8003120:	000b      	movs	r3, r1
 8003122:	0010      	movs	r0, r2
 8003124:	0019      	movs	r1, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f7fd f95f 	bl	80003f4 <__aeabi_uldivmod>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	0013      	movs	r3, r2
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
 800313e:	e017      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	0018      	movs	r0, r3
 8003144:	2300      	movs	r3, #0
 8003146:	0019      	movs	r1, r3
 8003148:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800314a:	2300      	movs	r3, #0
 800314c:	f7fd f972 	bl	8000434 <__aeabi_lmul>
 8003150:	0002      	movs	r2, r0
 8003152:	000b      	movs	r3, r1
 8003154:	0010      	movs	r0, r2
 8003156:	0019      	movs	r1, r3
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	001c      	movs	r4, r3
 800315c:	2300      	movs	r3, #0
 800315e:	001d      	movs	r5, r3
 8003160:	0022      	movs	r2, r4
 8003162:	002b      	movs	r3, r5
 8003164:	f7fd f946 	bl	80003f4 <__aeabi_uldivmod>
 8003168:	0002      	movs	r2, r0
 800316a:	000b      	movs	r3, r1
 800316c:	0013      	movs	r3, r2
 800316e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003174:	e00d      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_RCC_GetSysClockFreq+0x138>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	2207      	movs	r2, #7
 800317e:	4013      	ands	r3, r2
 8003180:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3301      	adds	r3, #1
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	0212      	lsls	r2, r2, #8
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003190:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b00e      	add	sp, #56	@ 0x38
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	003d0900 	.word	0x003d0900
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	08004828 	.word	0x08004828

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80031b8:	2017      	movs	r0, #23
 80031ba:	183b      	adds	r3, r7, r0
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2220      	movs	r2, #32
 80031c6:	4013      	ands	r3, r2
 80031c8:	d100      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80031ca:	e0c7      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031cc:	4b84      	ldr	r3, [pc, #528]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d0:	2380      	movs	r3, #128	@ 0x80
 80031d2:	055b      	lsls	r3, r3, #21
 80031d4:	4013      	ands	r3, r2
 80031d6:	d109      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b81      	ldr	r3, [pc, #516]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031dc:	4b80      	ldr	r3, [pc, #512]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0549      	lsls	r1, r1, #21
 80031e2:	430a      	orrs	r2, r1
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80031e6:	183b      	adds	r3, r7, r0
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b7d      	ldr	r3, [pc, #500]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	d11a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f8:	4b7a      	ldr	r3, [pc, #488]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b79      	ldr	r3, [pc, #484]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031fe:	2180      	movs	r1, #128	@ 0x80
 8003200:	0049      	lsls	r1, r1, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fb3f 	bl	8001888 <HAL_GetTick>
 800320a:	0003      	movs	r3, r0
 800320c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	e008      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fe fb3a 	bl	8001888 <HAL_GetTick>
 8003214:	0002      	movs	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0d9      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b70      	ldr	r3, [pc, #448]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d0f0      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800322e:	4b6c      	ldr	r3, [pc, #432]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	23c0      	movs	r3, #192	@ 0xc0
 8003234:	039b      	lsls	r3, r3, #14
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	23c0      	movs	r3, #192	@ 0xc0
 8003240:	039b      	lsls	r3, r3, #14
 8003242:	4013      	ands	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	429a      	cmp	r2, r3
 8003248:	d013      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	23c0      	movs	r3, #192	@ 0xc0
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	401a      	ands	r2, r3
 8003254:	23c0      	movs	r3, #192	@ 0xc0
 8003256:	029b      	lsls	r3, r3, #10
 8003258:	429a      	cmp	r2, r3
 800325a:	d10a      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800325c:	4b60      	ldr	r3, [pc, #384]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	029b      	lsls	r3, r3, #10
 8003264:	401a      	ands	r2, r3
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	429a      	cmp	r2, r3
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0b1      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003272:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003276:	23c0      	movs	r3, #192	@ 0xc0
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03b      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	23c0      	movs	r3, #192	@ 0xc0
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	4013      	ands	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d033      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2220      	movs	r2, #32
 800329a:	4013      	ands	r3, r2
 800329c:	d02e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800329e:	4b50      	ldr	r3, [pc, #320]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	4a51      	ldr	r2, [pc, #324]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a8:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ac:	4b4c      	ldr	r3, [pc, #304]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032ae:	2180      	movs	r1, #128	@ 0x80
 80032b0:	0309      	lsls	r1, r1, #12
 80032b2:	430a      	orrs	r2, r1
 80032b4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ba:	4b49      	ldr	r3, [pc, #292]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032bc:	494b      	ldr	r1, [pc, #300]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032be:	400a      	ands	r2, r1
 80032c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fe fad9 	bl	8001888 <HAL_GetTick>
 80032d6:	0003      	movs	r3, r0
 80032d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032da:	e009      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fad4 	bl	8001888 <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	4a42      	ldr	r2, [pc, #264]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e072      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032f0:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2220      	movs	r2, #32
 8003302:	4013      	ands	r3, r2
 8003304:	d01f      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	@ 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	401a      	ands	r2, r3
 8003310:	23c0      	movs	r3, #192	@ 0xc0
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	429a      	cmp	r2, r3
 8003316:	d10c      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a35      	ldr	r2, [pc, #212]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800331e:	4013      	ands	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	23c0      	movs	r3, #192	@ 0xc0
 8003328:	039b      	lsls	r3, r3, #14
 800332a:	401a      	ands	r2, r3
 800332c:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003334:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	23c0      	movs	r3, #192	@ 0xc0
 800333c:	029b      	lsls	r3, r3, #10
 800333e:	401a      	ands	r2, r3
 8003340:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003342:	430a      	orrs	r2, r1
 8003344:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003354:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003356:	4928      	ldr	r1, [pc, #160]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003358:	400a      	ands	r2, r1
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2202      	movs	r2, #2
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003366:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	220c      	movs	r2, #12
 800336c:	4393      	bics	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003376:	430a      	orrs	r2, r1
 8003378:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2204      	movs	r2, #4
 8003380:	4013      	ands	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003384:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003388:	4a1c      	ldr	r2, [pc, #112]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003394:	430a      	orrs	r2, r1
 8003396:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2208      	movs	r2, #8
 800339e:	4013      	ands	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a2:	4b0f      	ldr	r3, [pc, #60]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a6:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80033c0:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b006      	add	sp, #24
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	fffcffff 	.word	0xfffcffff
 80033ec:	fff7ffff 	.word	0xfff7ffff
 80033f0:	00001388 	.word	0x00001388
 80033f4:	ffcfffff 	.word	0xffcfffff
 80033f8:	efffffff 	.word	0xefffffff
 80033fc:	fffff3ff 	.word	0xfffff3ff
 8003400:	ffffcfff 	.word	0xffffcfff
 8003404:	fff3ffff 	.word	0xfff3ffff

08003408 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003410:	230f      	movs	r3, #15
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e088      	b.n	8003534 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2221      	movs	r2, #33	@ 0x21
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fe f859 	bl	80014f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2221      	movs	r2, #33	@ 0x21
 8003442:	2102      	movs	r1, #2
 8003444:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2210      	movs	r2, #16
 800344e:	4013      	ands	r3, r2
 8003450:	2b10      	cmp	r3, #16
 8003452:	d05f      	beq.n	8003514 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	@ 0xca
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2253      	movs	r2, #83	@ 0x53
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003464:	250f      	movs	r5, #15
 8003466:	197c      	adds	r4, r7, r5
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	0018      	movs	r0, r3
 800346c:	f000 f890 	bl	8003590 <RTC_EnterInitMode>
 8003470:	0003      	movs	r3, r0
 8003472:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003474:	0028      	movs	r0, r5
 8003476:	183b      	adds	r3, r7, r0
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d12c      	bne.n	80034d8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	492c      	ldr	r1, [pc, #176]	@ (800353c <HAL_RTC_Init+0x134>)
 800348a:	400a      	ands	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68d2      	ldr	r2, [r2, #12]
 80034b4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6919      	ldr	r1, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80034ca:	183c      	adds	r4, r7, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f8a2 	bl	8003618 <RTC_ExitInitMode>
 80034d4:	0003      	movs	r3, r0
 80034d6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d113      	bne.n	800350a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2103      	movs	r1, #3
 80034ee:	438a      	bics	r2, r1
 80034f0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	22ff      	movs	r2, #255	@ 0xff
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24
 8003512:	e003      	b.n	800351c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800351c:	230f      	movs	r3, #15
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2221      	movs	r2, #33	@ 0x21
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800352e:	230f      	movs	r3, #15
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	ff8fffbf 	.word	0xff8fffbf

08003540 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0e      	ldr	r2, [pc, #56]	@ (800358c <HAL_RTC_WaitForSynchro+0x4c>)
 8003552:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003554:	f7fe f998 	bl	8001888 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800355c:	e00a      	b.n	8003574 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800355e:	f7fe f993 	bl	8001888 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad2      	subs	r2, r2, r3
 8003568:	23fa      	movs	r3, #250	@ 0xfa
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d901      	bls.n	8003574 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	4013      	ands	r3, r2
 800357e:	d0ee      	beq.n	800355e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	0001ff5f 	.word	0x0001ff5f

08003590 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	230f      	movs	r3, #15
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2240      	movs	r2, #64	@ 0x40
 80035ac:	4013      	ands	r3, r2
 80035ae:	d12c      	bne.n	800360a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2180      	movs	r1, #128	@ 0x80
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fe f962 	bl	8001888 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035c8:	e014      	b.n	80035f4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035ca:	f7fe f95d 	bl	8001888 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	200f      	movs	r0, #15
 80035d6:	183b      	adds	r3, r7, r0
 80035d8:	1839      	adds	r1, r7, r0
 80035da:	7809      	ldrb	r1, [r1, #0]
 80035dc:	7019      	strb	r1, [r3, #0]
 80035de:	23fa      	movs	r3, #250	@ 0xfa
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d906      	bls.n	80035f4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2221      	movs	r2, #33	@ 0x21
 80035ea:	2104      	movs	r1, #4
 80035ec:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80035ee:	183b      	adds	r3, r7, r0
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2240      	movs	r2, #64	@ 0x40
 80035fc:	4013      	ands	r3, r2
 80035fe:	d104      	bne.n	800360a <RTC_EnterInitMode+0x7a>
 8003600:	230f      	movs	r3, #15
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d1df      	bne.n	80035ca <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800360a:	230f      	movs	r3, #15
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	781b      	ldrb	r3, [r3, #0]
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b004      	add	sp, #16
 8003616:	bd80      	pop	{r7, pc}

08003618 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	240f      	movs	r4, #15
 8003622:	193b      	adds	r3, r7, r4
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	438a      	bics	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2220      	movs	r2, #32
 8003640:	4013      	ands	r3, r2
 8003642:	d10c      	bne.n	800365e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f7ff ff7a 	bl	8003540 <HAL_RTC_WaitForSynchro>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d006      	beq.n	800365e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2221      	movs	r2, #33	@ 0x21
 8003654:	2104      	movs	r1, #4
 8003656:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003658:	193b      	adds	r3, r7, r4
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800365e:	230f      	movs	r3, #15
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	781b      	ldrb	r3, [r3, #0]
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b005      	add	sp, #20
 800366a:	bd90      	pop	{r4, r7, pc}

0800366c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003678:	4b64      	ldr	r3, [pc, #400]	@ (800380c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	22fa      	movs	r2, #250	@ 0xfa
 800367e:	01d1      	lsls	r1, r2, #7
 8003680:	0018      	movs	r0, r3
 8003682:	f7fc fd41 	bl	8000108 <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	001a      	movs	r2, r3
 800368a:	0013      	movs	r3, r2
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	189b      	adds	r3, r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0ad      	b.n	8003802 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2221      	movs	r2, #33	@ 0x21
 80036b2:	2102      	movs	r1, #2
 80036b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	22ca      	movs	r2, #202	@ 0xca
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2253      	movs	r2, #83	@ 0x53
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	d019      	beq.n	8003708 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	22ff      	movs	r2, #255	@ 0xff
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2221      	movs	r2, #33	@ 0x21
 80036ec:	2103      	movs	r1, #3
 80036ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e082      	b.n	8003802 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2204      	movs	r2, #4
 8003704:	4013      	ands	r3, r2
 8003706:	d1e5      	bne.n	80036d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	493f      	ldr	r1, [pc, #252]	@ (8003810 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003714:	400a      	ands	r2, r1
 8003716:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	22ff      	movs	r2, #255	@ 0xff
 8003720:	401a      	ands	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	493b      	ldr	r1, [pc, #236]	@ (8003814 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800372c:	4b37      	ldr	r3, [pc, #220]	@ (800380c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22fa      	movs	r2, #250	@ 0xfa
 8003732:	01d1      	lsls	r1, r2, #7
 8003734:	0018      	movs	r0, r3
 8003736:	f7fc fce7 	bl	8000108 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	015b      	lsls	r3, r3, #5
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	189b      	adds	r3, r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3b01      	subs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	22ff      	movs	r2, #255	@ 0xff
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2221      	movs	r2, #33	@ 0x21
 8003764:	2103      	movs	r1, #3
 8003766:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e046      	b.n	8003802 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2204      	movs	r2, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d0e5      	beq.n	800374c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2107      	movs	r1, #7
 800378c:	438a      	bics	r2, r1
 800378e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	0349      	lsls	r1, r1, #13
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80037b6:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b17      	ldr	r3, [pc, #92]	@ (8003818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	0349      	lsls	r1, r1, #13
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	01c9      	lsls	r1, r1, #7
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	00c9      	lsls	r1, r1, #3
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	22ff      	movs	r2, #255	@ 0xff
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2221      	movs	r2, #33	@ 0x21
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	2100      	movs	r1, #0
 80037fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b006      	add	sp, #24
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	20000008 	.word	0x20000008
 8003810:	fffffbff 	.word	0xfffffbff
 8003814:	fffffb7f 	.word	0xfffffb7f
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003824:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003826:	2280      	movs	r2, #128	@ 0x80
 8003828:	0352      	lsls	r2, r2, #13
 800382a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	4013      	ands	r3, r2
 8003838:	d014      	beq.n	8003864 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4013      	ands	r3, r2
 8003846:	d00d      	beq.n	8003864 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	22ff      	movs	r2, #255	@ 0xff
 8003850:	401a      	ands	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4908      	ldr	r1, [pc, #32]	@ (8003878 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8003858:	430a      	orrs	r2, r1
 800385a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f7fd fd84 	bl	800136c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2221      	movs	r2, #33	@ 0x21
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010400 	.word	0x40010400
 8003878:	fffffb7f 	.word	0xfffffb7f

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07b      	b.n	8003986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	2382      	movs	r3, #130	@ 0x82
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	429a      	cmp	r2, r3
 80038a0:	d009      	beq.n	80038b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	61da      	str	r2, [r3, #28]
 80038a8:	e005      	b.n	80038b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2251      	movs	r2, #81	@ 0x51
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2250      	movs	r2, #80	@ 0x50
 80038cc:	2100      	movs	r1, #0
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fd fe2c 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2251      	movs	r2, #81	@ 0x51
 80038dc:	2102      	movs	r1, #2
 80038de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2140      	movs	r1, #64	@ 0x40
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	2382      	movs	r3, #130	@ 0x82
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	2384      	movs	r3, #132	@ 0x84
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	400b      	ands	r3, r1
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2102      	movs	r1, #2
 8003918:	400b      	ands	r3, r1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	2101      	movs	r1, #1
 8003922:	400b      	ands	r3, r1
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6999      	ldr	r1, [r3, #24]
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	400b      	ands	r3, r1
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2138      	movs	r1, #56	@ 0x38
 8003938:	400b      	ands	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	2180      	movs	r1, #128	@ 0x80
 8003942:	400b      	ands	r3, r1
 8003944:	431a      	orrs	r2, r3
 8003946:	0011      	movs	r1, r2
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	019b      	lsls	r3, r3, #6
 8003950:	401a      	ands	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	2204      	movs	r2, #4
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2210      	movs	r2, #16
 800396c:	401a      	ands	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2251      	movs	r2, #81	@ 0x51
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2239      	movs	r2, #57	@ 0x39
 80039a4:	5c9b      	ldrb	r3, [r3, r2]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2238      	movs	r2, #56	@ 0x38
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fd fdfe 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2239      	movs	r2, #57	@ 0x39
 80039c0:	2102      	movs	r1, #2
 80039c2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	0019      	movs	r1, r3
 80039ce:	0010      	movs	r0, r2
 80039d0:	f000 fc76 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	223e      	movs	r2, #62	@ 0x3e
 80039d8:	2101      	movs	r1, #1
 80039da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	223a      	movs	r2, #58	@ 0x3a
 80039e0:	2101      	movs	r1, #1
 80039e2:	5499      	strb	r1, [r3, r2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	223b      	movs	r2, #59	@ 0x3b
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	223c      	movs	r2, #60	@ 0x3c
 80039f0:	2101      	movs	r1, #1
 80039f2:	5499      	strb	r1, [r3, r2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	223d      	movs	r2, #61	@ 0x3d
 80039f8:	2101      	movs	r1, #1
 80039fa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2239      	movs	r2, #57	@ 0x39
 8003a00:	2101      	movs	r1, #1
 8003a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2239      	movs	r2, #57	@ 0x39
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2238      	movs	r2, #56	@ 0x38
 8003a30:	2100      	movs	r1, #0
 8003a32:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f829 	bl	8003a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2239      	movs	r2, #57	@ 0x39
 8003a40:	2102      	movs	r1, #2
 8003a42:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	0010      	movs	r0, r2
 8003a50:	f000 fc36 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	223e      	movs	r2, #62	@ 0x3e
 8003a58:	2101      	movs	r1, #1
 8003a5a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	223a      	movs	r2, #58	@ 0x3a
 8003a60:	2101      	movs	r1, #1
 8003a62:	5499      	strb	r1, [r3, r2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	223b      	movs	r2, #59	@ 0x3b
 8003a68:	2101      	movs	r1, #1
 8003a6a:	5499      	strb	r1, [r3, r2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	223c      	movs	r2, #60	@ 0x3c
 8003a70:	2101      	movs	r1, #1
 8003a72:	5499      	strb	r1, [r3, r2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	223d      	movs	r2, #61	@ 0x3d
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2239      	movs	r2, #57	@ 0x39
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	001a      	movs	r2, r3
 8003aae:	1cbb      	adds	r3, r7, #2
 8003ab0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2317      	movs	r3, #23
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d108      	bne.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x32>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	223a      	movs	r2, #58	@ 0x3a
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3b02      	subs	r3, #2
 8003aca:	425a      	negs	r2, r3
 8003acc:	4153      	adcs	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e01f      	b.n	8003b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d108      	bne.n	8003aea <HAL_TIM_PWM_Start_DMA+0x4a>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	223b      	movs	r2, #59	@ 0x3b
 8003adc:	5c9b      	ldrb	r3, [r3, r2]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3b02      	subs	r3, #2
 8003ae2:	425a      	negs	r2, r3
 8003ae4:	4153      	adcs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e013      	b.n	8003b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d108      	bne.n	8003b02 <HAL_TIM_PWM_Start_DMA+0x62>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	223c      	movs	r2, #60	@ 0x3c
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3b02      	subs	r3, #2
 8003afa:	425a      	negs	r2, r3
 8003afc:	4153      	adcs	r3, r2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e007      	b.n	8003b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	223d      	movs	r2, #61	@ 0x3d
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3b02      	subs	r3, #2
 8003b0c:	425a      	negs	r2, r3
 8003b0e:	4153      	adcs	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
 8003b18:	e13d      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <HAL_TIM_PWM_Start_DMA+0x92>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	223a      	movs	r2, #58	@ 0x3a
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	425a      	negs	r2, r3
 8003b2c:	4153      	adcs	r3, r2
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e01f      	b.n	8003b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d108      	bne.n	8003b4a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	223b      	movs	r2, #59	@ 0x3b
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	425a      	negs	r2, r3
 8003b44:	4153      	adcs	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e013      	b.n	8003b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d108      	bne.n	8003b62 <HAL_TIM_PWM_Start_DMA+0xc2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	223c      	movs	r2, #60	@ 0x3c
 8003b54:	5c9b      	ldrb	r3, [r3, r2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	425a      	negs	r2, r3
 8003b5c:	4153      	adcs	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e007      	b.n	8003b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	223d      	movs	r2, #61	@ 0x3d
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	4153      	adcs	r3, r2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d025      	beq.n	8003bc2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_TIM_PWM_Start_DMA+0xe4>
 8003b7c:	1cbb      	adds	r3, r7, #2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e106      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	223a      	movs	r2, #58	@ 0x3a
 8003b92:	2102      	movs	r1, #2
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	e016      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d104      	bne.n	8003ba8 <HAL_TIM_PWM_Start_DMA+0x108>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	223b      	movs	r2, #59	@ 0x3b
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	5499      	strb	r1, [r3, r2]
 8003ba6:	e00e      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d104      	bne.n	8003bb8 <HAL_TIM_PWM_Start_DMA+0x118>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	223c      	movs	r2, #60	@ 0x3c
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	5499      	strb	r1, [r3, r2]
 8003bb6:	e006      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	223d      	movs	r2, #61	@ 0x3d
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	5499      	strb	r1, [r3, r2]
 8003bc0:	e001      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0e7      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d100      	bne.n	8003bce <HAL_TIM_PWM_Start_DMA+0x12e>
 8003bcc:	e080      	b.n	8003cd0 <HAL_TIM_PWM_Start_DMA+0x230>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d900      	bls.n	8003bd6 <HAL_TIM_PWM_Start_DMA+0x136>
 8003bd4:	e0a1      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x27a>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d054      	beq.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d900      	bls.n	8003be4 <HAL_TIM_PWM_Start_DMA+0x144>
 8003be2:	e09a      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x27a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_PWM_Start_DMA+0x152>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d025      	beq.n	8003c3c <HAL_TIM_PWM_Start_DMA+0x19c>
 8003bf0:	e093      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a6a      	ldr	r2, [pc, #424]	@ (8003da0 <HAL_TIM_PWM_Start_DMA+0x300>)
 8003bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a69      	ldr	r2, [pc, #420]	@ (8003da4 <HAL_TIM_PWM_Start_DMA+0x304>)
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <HAL_TIM_PWM_Start_DMA+0x308>)
 8003c08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a18      	ldr	r0, [r3, #32]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3334      	adds	r3, #52	@ 0x34
 8003c16:	001a      	movs	r2, r3
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	f7fe f9ee 	bl	8001ffc <HAL_DMA_Start_IT>
 8003c20:	1e03      	subs	r3, r0, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b6      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2180      	movs	r1, #128	@ 0x80
 8003c34:	0089      	lsls	r1, r1, #2
 8003c36:	430a      	orrs	r2, r1
 8003c38:	60da      	str	r2, [r3, #12]
      break;
 8003c3a:	e073      	b.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	4a57      	ldr	r2, [pc, #348]	@ (8003da0 <HAL_TIM_PWM_Start_DMA+0x300>)
 8003c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <HAL_TIM_PWM_Start_DMA+0x304>)
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	4a55      	ldr	r2, [pc, #340]	@ (8003da8 <HAL_TIM_PWM_Start_DMA+0x308>)
 8003c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3338      	adds	r3, #56	@ 0x38
 8003c60:	001a      	movs	r2, r3
 8003c62:	1cbb      	adds	r3, r7, #2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	f7fe f9c9 	bl	8001ffc <HAL_DMA_Start_IT>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e091      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	00c9      	lsls	r1, r1, #3
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
      break;
 8003c84:	e04e      	b.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	4a45      	ldr	r2, [pc, #276]	@ (8003da0 <HAL_TIM_PWM_Start_DMA+0x300>)
 8003c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	4a44      	ldr	r2, [pc, #272]	@ (8003da4 <HAL_TIM_PWM_Start_DMA+0x304>)
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	4a43      	ldr	r2, [pc, #268]	@ (8003da8 <HAL_TIM_PWM_Start_DMA+0x308>)
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	333c      	adds	r3, #60	@ 0x3c
 8003caa:	001a      	movs	r2, r3
 8003cac:	1cbb      	adds	r3, r7, #2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	f7fe f9a4 	bl	8001ffc <HAL_DMA_Start_IT>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e06c      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2180      	movs	r1, #128	@ 0x80
 8003cc8:	0109      	lsls	r1, r1, #4
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	60da      	str	r2, [r3, #12]
      break;
 8003cce:	e029      	b.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	4a32      	ldr	r2, [pc, #200]	@ (8003da0 <HAL_TIM_PWM_Start_DMA+0x300>)
 8003cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	4a31      	ldr	r2, [pc, #196]	@ (8003da4 <HAL_TIM_PWM_Start_DMA+0x304>)
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	4a30      	ldr	r2, [pc, #192]	@ (8003da8 <HAL_TIM_PWM_Start_DMA+0x308>)
 8003ce6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3340      	adds	r3, #64	@ 0x40
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	1cbb      	adds	r3, r7, #2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	f7fe f97f 	bl	8001ffc <HAL_DMA_Start_IT>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e047      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2180      	movs	r1, #128	@ 0x80
 8003d12:	0149      	lsls	r1, r1, #5
 8003d14:	430a      	orrs	r2, r1
 8003d16:	60da      	str	r2, [r3, #12]
      break;
 8003d18:	e004      	b.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8003d1a:	2317      	movs	r3, #23
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
      break;
 8003d22:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003d24:	2317      	movs	r3, #23
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d130      	bne.n	8003d90 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	2201      	movs	r2, #1
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fcb4 	bl	80046a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	05db      	lsls	r3, r3, #23
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d009      	beq.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x2bc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a17      	ldr	r2, [pc, #92]	@ (8003dac <HAL_TIM_PWM_Start_DMA+0x30c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x2bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a16      	ldr	r2, [pc, #88]	@ (8003db0 <HAL_TIM_PWM_Start_DMA+0x310>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d111      	bne.n	8003d80 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2207      	movs	r2, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d010      	beq.n	8003d90 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	e007      	b.n	8003d90 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d90:	2317      	movs	r3, #23
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	781b      	ldrb	r3, [r3, #0]
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b006      	add	sp, #24
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	080041ad 	.word	0x080041ad
 8003da4:	08004257 	.word	0x08004257
 8003da8:	08004119 	.word	0x08004119
 8003dac:	40010800 	.word	0x40010800
 8003db0:	40011400 	.word	0x40011400

08003db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2317      	movs	r3, #23
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2238      	movs	r2, #56	@ 0x38
 8003dcc:	5c9b      	ldrb	r3, [r3, r2]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0ad      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2238      	movs	r2, #56	@ 0x38
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d100      	bne.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003de4:	e076      	b.n	8003ed4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d900      	bls.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003dec:	e095      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d04e      	beq.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d900      	bls.n	8003dfc <HAL_TIM_PWM_ConfigChannel+0x48>
 8003dfa:	e08e      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d021      	beq.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003e08:	e087      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 faa8 	bl	8004368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2108      	movs	r1, #8
 8003e24:	430a      	orrs	r2, r1
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2104      	movs	r1, #4
 8003e34:	438a      	bics	r2, r1
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	619a      	str	r2, [r3, #24]
      break;
 8003e4a:	e06b      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fac3 	bl	80043e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	0109      	lsls	r1, r1, #4
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4931      	ldr	r1, [pc, #196]	@ (8003f3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	619a      	str	r2, [r3, #24]
      break;
 8003e90:	e048      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fae2 	bl	8004464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2108      	movs	r1, #8
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2104      	movs	r1, #4
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69d9      	ldr	r1, [r3, #28]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	61da      	str	r2, [r3, #28]
      break;
 8003ed2:	e027      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0011      	movs	r1, r2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 fb01 	bl	80044e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2180      	movs	r1, #128	@ 0x80
 8003eee:	0109      	lsls	r1, r1, #4
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	490f      	ldr	r1, [pc, #60]	@ (8003f3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69d9      	ldr	r1, [r3, #28]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	021a      	lsls	r2, r3, #8
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	61da      	str	r2, [r3, #28]
      break;
 8003f18:	e004      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003f1a:	2317      	movs	r3, #23
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
      break;
 8003f22:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2238      	movs	r2, #56	@ 0x38
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]

  return status;
 8003f2c:	2317      	movs	r3, #23
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b006      	add	sp, #24
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	fffffbff 	.word	0xfffffbff

08003f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	230f      	movs	r3, #15
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2238      	movs	r2, #56	@ 0x38
 8003f56:	5c9b      	ldrb	r3, [r3, r2]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIM_ConfigClockSource+0x20>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0bc      	b.n	80040da <HAL_TIM_ConfigClockSource+0x19a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2238      	movs	r2, #56	@ 0x38
 8003f64:	2101      	movs	r1, #1
 8003f66:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2239      	movs	r2, #57	@ 0x39
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2277      	movs	r2, #119	@ 0x77
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4a58      	ldr	r2, [pc, #352]	@ (80040e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2280      	movs	r2, #128	@ 0x80
 8003f96:	0192      	lsls	r2, r2, #6
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d040      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xde>
 8003f9c:	2280      	movs	r2, #128	@ 0x80
 8003f9e:	0192      	lsls	r2, r2, #6
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d900      	bls.n	8003fa6 <HAL_TIM_ConfigClockSource+0x66>
 8003fa4:	e088      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fa6:	2280      	movs	r2, #128	@ 0x80
 8003fa8:	0152      	lsls	r2, r2, #5
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d100      	bne.n	8003fb0 <HAL_TIM_ConfigClockSource+0x70>
 8003fae:	e088      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x182>
 8003fb0:	2280      	movs	r2, #128	@ 0x80
 8003fb2:	0152      	lsls	r2, r2, #5
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d900      	bls.n	8003fba <HAL_TIM_ConfigClockSource+0x7a>
 8003fb8:	e07e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fba:	2b70      	cmp	r3, #112	@ 0x70
 8003fbc:	d018      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xb0>
 8003fbe:	d900      	bls.n	8003fc2 <HAL_TIM_ConfigClockSource+0x82>
 8003fc0:	e07a      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fc2:	2b60      	cmp	r3, #96	@ 0x60
 8003fc4:	d04f      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x126>
 8003fc6:	d900      	bls.n	8003fca <HAL_TIM_ConfigClockSource+0x8a>
 8003fc8:	e076      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fca:	2b50      	cmp	r3, #80	@ 0x50
 8003fcc:	d03b      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x106>
 8003fce:	d900      	bls.n	8003fd2 <HAL_TIM_ConfigClockSource+0x92>
 8003fd0:	e072      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d057      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x146>
 8003fd6:	d900      	bls.n	8003fda <HAL_TIM_ConfigClockSource+0x9a>
 8003fd8:	e06e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fda:	2b30      	cmp	r3, #48	@ 0x30
 8003fdc:	d063      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x166>
 8003fde:	d86b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d060      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x166>
 8003fe4:	d868      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d05d      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x166>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d05b      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x166>
 8003fee:	e063      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	f000 fb30 	bl	8004664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2277      	movs	r2, #119	@ 0x77
 8004010:	4313      	orrs	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
      break;
 800401c:	e052      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 fb19 	bl	8004664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2180      	movs	r1, #128	@ 0x80
 800403e:	01c9      	lsls	r1, r1, #7
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
      break;
 8004044:	e03e      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004052:	001a      	movs	r2, r3
 8004054:	f000 fa8c 	bl	8004570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2150      	movs	r1, #80	@ 0x50
 800405e:	0018      	movs	r0, r3
 8004060:	f000 fae6 	bl	8004630 <TIM_ITRx_SetConfig>
      break;
 8004064:	e02e      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004072:	001a      	movs	r2, r3
 8004074:	f000 faaa 	bl	80045cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2160      	movs	r1, #96	@ 0x60
 800407e:	0018      	movs	r0, r3
 8004080:	f000 fad6 	bl	8004630 <TIM_ITRx_SetConfig>
      break;
 8004084:	e01e      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004092:	001a      	movs	r2, r3
 8004094:	f000 fa6c 	bl	8004570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2140      	movs	r1, #64	@ 0x40
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 fac6 	bl	8004630 <TIM_ITRx_SetConfig>
      break;
 80040a4:	e00e      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0019      	movs	r1, r3
 80040b0:	0010      	movs	r0, r2
 80040b2:	f000 fabd 	bl	8004630 <TIM_ITRx_SetConfig>
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80040b8:	230f      	movs	r3, #15
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80040c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2239      	movs	r2, #57	@ 0x39
 80040c8:	2101      	movs	r1, #1
 80040ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2238      	movs	r2, #56	@ 0x38
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]

  return status;
 80040d4:	230f      	movs	r3, #15
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	781b      	ldrb	r3, [r3, #0]
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	ffff00ff 	.word	0xffff00ff

080040e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	223a      	movs	r2, #58	@ 0x3a
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]
 800413e:	e02a      	b.n	8004196 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d107      	bne.n	800415a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2202      	movs	r2, #2
 800414e:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	223b      	movs	r2, #59	@ 0x3b
 8004154:	2101      	movs	r1, #1
 8004156:	5499      	strb	r1, [r3, r2]
 8004158:	e01d      	b.n	8004196 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2204      	movs	r2, #4
 8004168:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	223c      	movs	r2, #60	@ 0x3c
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	e010      	b.n	8004196 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	429a      	cmp	r2, r3
 800417c:	d107      	bne.n	800418e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2208      	movs	r2, #8
 8004182:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	223d      	movs	r2, #61	@ 0x3d
 8004188:	2101      	movs	r1, #1
 800418a:	5499      	strb	r1, [r3, r2]
 800418c:	e003      	b.n	8004196 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2239      	movs	r2, #57	@ 0x39
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff ffb5 	bl	8004108 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10b      	bne.n	80041dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	223a      	movs	r2, #58	@ 0x3a
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]
 80041da:	e031      	b.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d10b      	bne.n	80041fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2202      	movs	r2, #2
 80041ea:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d125      	bne.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	223b      	movs	r2, #59	@ 0x3b
 80041f8:	2101      	movs	r1, #1
 80041fa:	5499      	strb	r1, [r3, r2]
 80041fc:	e020      	b.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d10b      	bne.n	8004220 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2204      	movs	r2, #4
 800420c:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d114      	bne.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	223c      	movs	r2, #60	@ 0x3c
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]
 800421e:	e00f      	b.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d10a      	bne.n	8004240 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2208      	movs	r2, #8
 800422e:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	223d      	movs	r2, #61	@ 0x3d
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	0018      	movs	r0, r3
 8004244:	f7ff ff50 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	761a      	strb	r2, [r3, #24]
}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}

08004256 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d103      	bne.n	8004276 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	761a      	strb	r2, [r3, #24]
 8004274:	e019      	b.n	80042aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d103      	bne.n	8004288 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2202      	movs	r2, #2
 8004284:	761a      	strb	r2, [r3, #24]
 8004286:	e010      	b.n	80042aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d103      	bne.n	800429a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2204      	movs	r2, #4
 8004296:	761a      	strb	r2, [r3, #24]
 8004298:	e007      	b.n	80042aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d102      	bne.n	80042aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2208      	movs	r2, #8
 80042a8:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff ff23 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	761a      	strb	r2, [r3, #24]
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b004      	add	sp, #16
 80042be:	bd80      	pop	{r7, pc}

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	05db      	lsls	r3, r3, #23
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0x2a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	@ (800435c <TIM_Base_SetConfig+0x9c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0x2a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <TIM_Base_SetConfig+0xa0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2270      	movs	r2, #112	@ 0x70
 80042ee:	4393      	bics	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	05db      	lsls	r3, r3, #23
 8004302:	429a      	cmp	r2, r3
 8004304:	d007      	beq.n	8004316 <TIM_Base_SetConfig+0x56>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <TIM_Base_SetConfig+0x9c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0x56>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <TIM_Base_SetConfig+0xa0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <TIM_Base_SetConfig+0xa4>)
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2280      	movs	r2, #128	@ 0x80
 800432c:	4393      	bics	r3, r2
 800432e:	001a      	movs	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	615a      	str	r2, [r3, #20]
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b004      	add	sp, #16
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40010800 	.word	0x40010800
 8004360:	40011400 	.word	0x40011400
 8004364:	fffffcff 	.word	0xfffffcff

08004368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	2201      	movs	r2, #1
 8004378:	4393      	bics	r3, r2
 800437a:	001a      	movs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2270      	movs	r2, #112	@ 0x70
 8004396:	4393      	bics	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2203      	movs	r2, #3
 800439e:	4393      	bics	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2202      	movs	r2, #2
 80043b0:	4393      	bics	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b006      	add	sp, #24
 80043de:	bd80      	pop	{r7, pc}

080043e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	2210      	movs	r2, #16
 80043f0:	4393      	bics	r3, r2
 80043f2:	001a      	movs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a13      	ldr	r2, [pc, #76]	@ (800445c <TIM_OC2_SetConfig+0x7c>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <TIM_OC2_SetConfig+0x80>)
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2220      	movs	r2, #32
 800442a:	4393      	bics	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b006      	add	sp, #24
 800445a:	bd80      	pop	{r7, pc}
 800445c:	ffff8fff 	.word	0xffff8fff
 8004460:	fffffcff 	.word	0xfffffcff

08004464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <TIM_OC3_SetConfig+0x78>)
 8004474:	401a      	ands	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2270      	movs	r2, #112	@ 0x70
 8004490:	4393      	bics	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2203      	movs	r2, #3
 8004498:	4393      	bics	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <TIM_OC3_SetConfig+0x7c>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b006      	add	sp, #24
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	fffffeff 	.word	0xfffffeff
 80044e0:	fffffdff 	.word	0xfffffdff

080044e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <TIM_OC4_SetConfig+0x7c>)
 80044f4:	401a      	ands	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a15      	ldr	r2, [pc, #84]	@ (8004564 <TIM_OC4_SetConfig+0x80>)
 8004510:	4013      	ands	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a14      	ldr	r2, [pc, #80]	@ (8004568 <TIM_OC4_SetConfig+0x84>)
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4a10      	ldr	r2, [pc, #64]	@ (800456c <TIM_OC4_SetConfig+0x88>)
 800452c:	4013      	ands	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b006      	add	sp, #24
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	ffffefff 	.word	0xffffefff
 8004564:	ffff8fff 	.word	0xffff8fff
 8004568:	fffffcff 	.word	0xfffffcff
 800456c:	ffffdfff 	.word	0xffffdfff

08004570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	2201      	movs	r2, #1
 8004588:	4393      	bics	r3, r2
 800458a:	001a      	movs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	22f0      	movs	r2, #240	@ 0xf0
 800459a:	4393      	bics	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	220a      	movs	r2, #10
 80045ac:	4393      	bics	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b006      	add	sp, #24
 80045ca:	bd80      	pop	{r7, pc}

080045cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	2210      	movs	r2, #16
 80045de:	4393      	bics	r3, r2
 80045e0:	001a      	movs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4a0d      	ldr	r2, [pc, #52]	@ (800462c <TIM_TI2_ConfigInputStage+0x60>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	22a0      	movs	r2, #160	@ 0xa0
 8004608:	4393      	bics	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b006      	add	sp, #24
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	ffff0fff 	.word	0xffff0fff

08004630 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2270      	movs	r2, #112	@ 0x70
 8004644:	4393      	bics	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	2207      	movs	r2, #7
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b004      	add	sp, #16
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <TIM_ETR_SetConfig+0x3c>)
 800467c:	4013      	ands	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	021a      	lsls	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	431a      	orrs	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	ffff00ff 	.word	0xffff00ff

080046a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	221f      	movs	r2, #31
 80046b4:	4013      	ands	r3, r2
 80046b6:	2201      	movs	r2, #1
 80046b8:	409a      	lsls	r2, r3
 80046ba:	0013      	movs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	43d2      	mvns	r2, r2
 80046c6:	401a      	ands	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	211f      	movs	r1, #31
 80046d4:	400b      	ands	r3, r1
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4099      	lsls	r1, r3
 80046da:	000b      	movs	r3, r1
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b006      	add	sp, #24
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2238      	movs	r2, #56	@ 0x38
 80046fa:	5c9b      	ldrb	r3, [r3, r2]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e042      	b.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2238      	movs	r2, #56	@ 0x38
 8004708:	2101      	movs	r1, #1
 800470a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2239      	movs	r2, #57	@ 0x39
 8004710:	2102      	movs	r1, #2
 8004712:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2270      	movs	r2, #112	@ 0x70
 8004728:	4393      	bics	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	05db      	lsls	r3, r3, #23
 8004746:	429a      	cmp	r2, r3
 8004748:	d009      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0f      	ldr	r2, [pc, #60]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10c      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2280      	movs	r2, #128	@ 0x80
 8004762:	4393      	bics	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2239      	movs	r2, #57	@ 0x39
 800477c:	2101      	movs	r1, #1
 800477e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2238      	movs	r2, #56	@ 0x38
 8004784:	2100      	movs	r1, #0
 8004786:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	40010800 	.word	0x40010800
 8004798:	40011400 	.word	0x40011400

0800479c <memset>:
 800479c:	0003      	movs	r3, r0
 800479e:	1882      	adds	r2, r0, r2
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	7019      	strb	r1, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	2600      	movs	r6, #0
 80047b0:	4c0c      	ldr	r4, [pc, #48]	@ (80047e4 <__libc_init_array+0x38>)
 80047b2:	4d0d      	ldr	r5, [pc, #52]	@ (80047e8 <__libc_init_array+0x3c>)
 80047b4:	1b64      	subs	r4, r4, r5
 80047b6:	10a4      	asrs	r4, r4, #2
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	2600      	movs	r6, #0
 80047be:	f000 f819 	bl	80047f4 <_init>
 80047c2:	4c0a      	ldr	r4, [pc, #40]	@ (80047ec <__libc_init_array+0x40>)
 80047c4:	4d0a      	ldr	r5, [pc, #40]	@ (80047f0 <__libc_init_array+0x44>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	00b3      	lsls	r3, r6, #2
 80047d2:	58eb      	ldr	r3, [r5, r3]
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	00b3      	lsls	r3, r6, #2
 80047dc:	58eb      	ldr	r3, [r5, r3]
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	0800483c 	.word	0x0800483c
 80047e8:	0800483c 	.word	0x0800483c
 80047ec:	08004840 	.word	0x08004840
 80047f0:	0800483c 	.word	0x0800483c

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
